<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="53:TestPrintfAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fa943b82c80"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fa94466ede0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fa94466ede0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fa944497590"/></to>
    </wire>
    <wire loc="54:TestPrintfAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa943b6dda0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa9439c3370"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa9439c3370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fa943b491d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:TestPrintfAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa943b680f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa943de4020"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa943de4020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa943de0a70"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa94466a320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa943b44e50"/></to>
    </wire>
    <wire loc="49:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa94466a320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa943b7d020"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa94466a320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa9433a1e50"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa94466a320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa944372540"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa94466a320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa943baba60"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fa944497c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fa944d2a3a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fa944d2a3a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fa944702c30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fa9444966c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa94466c2f0"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa94466c2f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa944666110"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fa944496dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fa94466a320"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fa944666820"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7fa944667500"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fa944667500"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa94462f440"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fa944665020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa944656080"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7fa944665700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa943db72e0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa94462f440"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa9446153c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fa9446259e0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fa944615a70"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7fa9449ab4c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7fa944614cc0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7fa9445d1a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa94450f6d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7fa9445bf410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa944507b30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7fa9445c8d10"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa944514160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7fa9445ab020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa9444eecb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7fa9445cd020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa944515480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7fa9445b3570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa9444ee020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7fa9445a8020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa9444d6cb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7fa9445baa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa9444e7220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7fa9445d8020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa9445649d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7fa9445ad020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa9444fd2f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7fa9445b5890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa9444fe610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7fa9445be8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa9444ff220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7fa9445c7c70"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa94450d7a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7fa9445aa020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa9444e52f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7fa9445bc020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa9444f76d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7fa9445cdda0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa94450eac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7fa9445da7b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa944572540"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7fa9445b23e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa9444e6610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7fa9445d75a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa944516020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7fa9445b8020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa9444e06d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7fa9445c2dc0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa94451da90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7fa9445ac020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa9444f57a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7fa9445ce140"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa94451ede0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7fa9445b4700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa9444f6ac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7fa9445a9020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa9444de7a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7fa9445bb5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa9444f0b30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa94456b3e0"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7fa9445b11f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa9444dfac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7fa9445ae020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fa944505cb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7fa9445b0020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa9444d6020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7fa9445b6a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fa944505020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7fa9445b75a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fa9444d8b30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fa944570450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa944571d80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fa944570aa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7fa9444d1a90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fa94456f120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7fa9444ce260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa94451c930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa944572540"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa944519020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa944571d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa944513020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa944572540"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa9445127a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa944571d80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa94450c610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa944572540"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa94450ac50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa944571d80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fa9445692f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa94456abf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fa944569940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7fa9444ce9f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fa944568020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7fa9444cd240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa944504b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa94456b3e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa9445022f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa94456abf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa9444fc160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa94456b3e0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa9444fb7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa94456abf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa9444f4610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa94456b3e0"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa9444f3c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa94456abf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa9444edb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa94456b3e0"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa9444eb2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa94456abf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa9444e4160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa94456b3e0"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa9444e37a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa94456abf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa9444dd610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa94456b3e0"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa9444dcc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa94456abf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fa9444d5b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa94456b3e0"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fa9444d32f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fa94456abf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944701b70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7fa9446fa2c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7fa944d1c3b0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fa943ba4a20"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7fa943bd4bf0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fa943ba1440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fa943bdb020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fa943bdb020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fa94383a580"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fa943ba00c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fa943bdbc30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fa943bdbc30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fa9443e07e0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7fa943b83be0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7fa943ba41a0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fa9443e07e0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fa944378d60"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fa943bd98b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fa9443de470"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fa9443de470"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fa9443796c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7fa943bd7020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa9443dcb20"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa9443dcb20"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa944376a10"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fa9438392d0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fa94443ece0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fa943838020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fa9443de470"/></to>
    </wire>
    <wire loc="54:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fa94443ece0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fa9443f2580"/></to>
    </wire>
    <wire loc="55:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fa9443f1400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fa9443e73f0"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fa9443e73f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fa9443ce300"/></to>
    </wire>
    <wire loc="56:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fa9443f0060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fa9443de470"/></to>
    </wire>
    <wire loc="57:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fa9443ef720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fa9443e07e0"/></to>
    </wire>
    <wire loc="169:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7fa9443ee480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7fa9443eec60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fa9443e33b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fa944372b90"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fa944372b90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fa944360c40"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fa9443e01d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fa9443790d0"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa944372540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa9443605f0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa94436c2b0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa9443cf330"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fa9443754a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fa94436e790"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fa944374120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fa94436fc60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fa944367970"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7fa943bf2a30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fa94436e790"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fa94422ede0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fa94436fc60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fa94422e6c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7fa94422dc20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fa944367970"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa944358760"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa94436c2b0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa94422b920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa94436c2b0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa944221cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa94436c2b0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fa94422c590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fa944354530"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7fa94422ce80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7fa944359a40"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7fa94434f7e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7fa944227e00"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fa94434a780"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fa9441fb0c0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fa9441fb0c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fa943c070c0"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fa944217d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fa9441fb8d0"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fa9441fb8d0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fa943c0d440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7fa9442f76e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7fa94432f4f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7fa9442fbc70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fa9442f4a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7fa944229020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7fa944229800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fa9441f9020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fa943c0c440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fa943c0c440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fa944191d00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fa943c0d440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fa944192670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa943c0b020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa943c07920"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa943c06020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa943c0e020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa943c0e020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa944198c80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943c0ec70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943777020"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943777020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943d6a2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa94418b1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa943c0b020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa943769760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa94418f8e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fa94418de50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa943778340"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa943778340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa943d6b020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa944187710"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa943771c10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa943771c10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fa943d6e4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa94418f8e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa9440fbdc0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fa944191d00"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fa9440f9890"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fa944192670"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fa9440fa6d0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa944198c80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa9440fb020"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa9440f73e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa94418b1d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fa9440f85b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7fa94418de50"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa9440f25b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa944187710"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7fa9440f7a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa9440e8b60"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa9440e8b60"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fa9440dc360"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa9440f1020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa943e06d20"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa943e06d20"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa943e01d90"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fa9440ee120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fa943de4020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa9440e0bd0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa9440d7970"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa9440e16d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fa9440d7020"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fa94409c860"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7fa943fb3cc0"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7fa943fb3cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f04100"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7fa9440a6800"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7fa943fafcc0"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7fa943fafcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f00d10"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fa944099800"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7fa943fadcc0"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7fa943fadcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943efb740"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7fa944097800"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7fa943fa7cc0"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7fa943fa7cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ef2d10"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7fa944095800"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7fa943fa9cc0"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7fa943fa9cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ef6100"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7fa9440adbc0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7fa943cc7940"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7fa94400f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f43740"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7fa943ffa810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f13100"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7fa943fb1ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f04100"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7fa943f8ccb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e7a740"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7fa943ff6810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f0a740"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7fa943fe29a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ed9460"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7fa943fcd9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943eaad10"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7fa943fbd9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e83100"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7fa943f98cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e96740"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7fa943f84cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e75100"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7fa944009810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f35740"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7fa944005810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f2cd10"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7fa943ff0810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943efb740"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7fa943fdc9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ecb100"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7fa943fc79a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e9cd10"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7fa943fb79a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e75100"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7fa944013810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f4c100"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7fa943fff810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f1dd80"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7fa943fea810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943eed740"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7fa943f92cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e88740"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7fa943f86cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e75100"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7fa943f9ecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943eae100"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7fa943fe6810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ee4e60"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7fa943fd29a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943eb3740"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7fa943fc19a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e8dd10"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7fa943f90cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e83100"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7fa943fa5cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ebd100"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7fa94400d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f3e100"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7fa943ff8810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f0fd10"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7fa943fc59a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e96740"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7fa943ff4810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f04100"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7fa943fe09a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ed5e00"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7fa943fcb9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ea5740"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7fa943fbb9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e7fd10"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7fa943fa1cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943eb3740"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7fa944019800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f7dd10"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7fa944003810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f26740"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7fa943fee810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ef6100"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7fa943fda9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ec7d10"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7fa943f9ccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943eed740"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7fa943f96cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e91100"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7fa943f8acb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e75100"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7fa943fd69a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ebd100"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7fa943f9acc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ee8100"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7fa944011810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f48d10"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7fa943ffc810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f18740"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7fa943fe8810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ee8100"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7fa943fa3cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943eb8d10"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7fa943f8ecb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e7fd10"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7fa943fe49a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ede9f0"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7fa943fd09a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943eae100"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7fa943fbf9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e88740"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7fa94400b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f3ad10"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7fa943fc39a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e91100"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7fa944007810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f30100"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7fa943ff2810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f00d10"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7fa943fde9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ed0740"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7fa943fc99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ea0100"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7fa943fb99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e7a740"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7fa944015810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f52740"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7fa944001810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f21100"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7fa943fec810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ef2d10"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7fa943fd89a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943ec2740"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7fa943fabca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943efb740"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7fa943f94cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e8dd10"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7fa943fd49a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943eb8d10"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7fa943f88cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e7a740"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7fa943f82cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943e9cd10"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7fa943fb59f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fa943f0a740"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa943e01d90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa943dfae50"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943de8020"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa943db72e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa943de0470"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fa943ddd060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7fa943de1b10"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fa943de1b10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa943db4020"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fa943ddc340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7fa943dbae70"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fa943dbae70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa943da0b90"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fa943dd7660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7fa943db80f0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fa943db80f0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fa943d9b710"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa943da32f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7fa943fe6810"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa943d9fde0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7fa943fe29a0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa943d99930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7fa943fe09a0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa943770440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa943d6d3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa943770a50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa943cd1d70"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa943cd1d70"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7fa943cc7940"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa943776020"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa9440e8b60"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa9437777c0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa943d6aad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa943d6aad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa943cd9400"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa943d698a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa943769760"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943d6a2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943cda020"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943cda020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fa94339c530"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7fa943d6e4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fa943d67d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa943d6b020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa943cdb210"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fa943cdb210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fa94339d740"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa943d6d3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa943d66710"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa943cd9400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa94339b930"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa943cd9cd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa943d698a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa943d54bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa943cd9400"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7fa943d66d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa9440e16d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7fa943d545e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa9440e0bd0"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fa943cda7a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fa94339ccb0"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa94339a270"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa943cd9cd0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fa94339aa30"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7fa9433a04a0"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fa943398c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7fa943cbe700"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fa9440dc360"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fa943cb9250"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7fa943fb3cc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fa943cb71f0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7fa943fadcc0"/></to>
    </wire>
    <wire loc="114:../../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7fa943b9a500"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7fa943b7d680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7fa943b83be0"/></to>
    </wire>
    <wire loc="44:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fa943b5cd50"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fa94466ede0"/></to>
    </wire>
    <wire loc="47:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fa943b594a0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fa9443e33b0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fa943b491d0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fa943b41c30"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fa943b41c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa9439e4150"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa943b44e50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa943a5f020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fa943b37500"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fa9439d6790"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa943a5f020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa94334d1b0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7fa9439de640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fa943a332f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa943a2e850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa943a5f870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa943a5f870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa943348c90"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa9439d5a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa943ac3b70"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa943ac3b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa943abbcf0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fa94334d1b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fa943332660"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fa943341410"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa94334da00"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fa94334da00"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fa943331020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fa943343060"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fa943ac3b70"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa94332d190"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943337450"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943337450"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943b1bcd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa94332c770"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943336a80"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943336a80"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943b17a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa94332ba80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943335da0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943335da0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943b143f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943b1bcd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943b17a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7fa9445bf410"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943b143f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7fa9445b6a20"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943b1bcd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943b17a40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7fa9445be8c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943b143f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7fa9445b5890"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943b1bcd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943b17a40"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7fa9445bc020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943b143f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7fa9445b4700"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943b1bcd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943b17a40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7fa9445bb5a0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943b143f0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7fa9445b3570"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943b1bcd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943b17a40"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7fa9445baa50"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943b143f0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7fa9445b23e0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943b1bcd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943b17a40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7fa9445b8020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943b143f0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7fa9445b11f0"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943b1bcd0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943b17a40"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7fa9445b75a0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943b143f0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7fa9445b0020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fa943a9e0f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa943e01d90"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7fa943a2a9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7fa9439d9a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="37:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P.UartP" loc="41(Msp430Uart0P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.2 $ $Date: 2010/07/29 13:19:06 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="39(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2013/04/09 14:28:58 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ShimmerSerialP" loc="35:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../../tos/system/QueueC.nc">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../../tos/lib/printf/PutcharP.nc">
      <documentation loc="64:../../../tos/lib/printf/PutcharP.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Kevin Klues &#60;klueska@cs.stanford.edu>&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestPrintfC" loc="46:TestPrintfC.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../../tos/lib/serial/SerialStartP.nc">
      <documentation loc="33:../../../tos/lib/serial/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestPrintfAppC.TimerMilliC" loc="44(TestPrintfAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7fa9445a4970" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7fa9445a4d10" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7fa9445a3110" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7fa9445a3490" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7fa9445a3810" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7fa9445a3b80" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7fa9445a2020" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7fa9445a23b0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7fa9445a2780" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7fa944566e70" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7fa944563270" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7fa9444893c0" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7fa94445a0d0" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7fa9444370d0" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart0C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7fa943f7c190" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7fa943f7c540" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7fa943f7c8f0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7fa943f7cca0" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7fa943f7b060" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fa943dfbe60" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fa943dfbe60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fa943d4f5b0" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7fa943d425b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7fa943d29d80" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7fa943bd5490" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7fa943bd5490"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7fa943bd5810" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fa943af33b0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fa943af33b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fa943aba6b0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fa943aba6b0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fa943abae80" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fa943abae80"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fa943ab9290" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fa943ab9290"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fa943ab9a70" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fa943ab9a70"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fa943ab9e40" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7fa943ab8670" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7fa943ab8670"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fa943ac16d0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fa943ac16d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fa943a97020" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fa943a97020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fa943a97410" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fa943a97410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fa943a97bf0" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fa943a97bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fa943a95020" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa943a5bcc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa943a5bcc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa943a25230" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa943a25230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7fa943a25560" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa9439d7dd0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa9439d7dd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7fa94466a320" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fa94466a320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa94466a6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fa94466ede0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fa94466ede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fa94466d180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa94466c2f0" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa94466c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa94466c670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7fa944665020" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7fa944665020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa9446653a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa944666110" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa944666110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944666490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7fa944666820" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fa944666820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944666ba0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7fa944665700" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7fa944665700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944665a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa944656080" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa944656080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944656400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7fa944667500" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fa944667500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944667880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fa9446259e0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fa9446259e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fa94462b980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fa94462b020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fa94462b1b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fa94462b340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fa944625d60"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fa94462b4d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fa94462b660"/>
        <function-ref name="initClocks" scoped="" ref="0x7fa94462b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa94462f440" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa94462f440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa94462f7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fa944615a70" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fa944615a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fa944614980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fa944614020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fa9446141b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fa944614340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fa944615df0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fa9446144d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fa944614660"/>
        <function-ref name="initClocks" scoped="" ref="0x7fa9446147f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7fa944614cc0" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fa944614cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fa9446130a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa9446153c0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa9446153c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944615740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7fa9445d1a50" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7fa9445d1a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445d1dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445d0020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445d01b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445d0340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445d04d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445d0660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445d07f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445d0980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445d0b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7fa9445bf410" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7fa9445bf410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445bf790"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445bf920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445bfab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445bfc40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445bfdd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445be020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445be1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445be340"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445be4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7fa9445c8d10" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7fa9445c8d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445c70e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445c7270"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445c7400"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445c7590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445c7720"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445c78b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7fa9445ab020" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7fa9445ab020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445ab3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445ab530"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445ab6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445ab850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445ab9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445abb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7fa9445cd020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7fa9445cd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445cd3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445cd530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445cd6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445cd850"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445cd9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7fa9445b3570" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7fa9445b3570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445b38f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445b3a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445b3c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445b3da0"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445b2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7fa9445a8020" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7fa9445a8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445a83a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445a8530"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445a86c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445a8850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445a89e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445a8b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7fa9445baa50" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7fa9445baa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445badd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445b9020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445b91b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445b9340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445b94d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445b9660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445b97f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445b9980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445b9b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7fa9445d8020" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7fa9445d8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445d83a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445d8530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445d86c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445d8850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445d89e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445d8b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445d8d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445d7020"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445d71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7fa9445ad020" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7fa9445ad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445ad3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445ad530"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445ad6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445ad850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445ad9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445adb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7fa9445b5890" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7fa9445b5890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445b5c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445b5da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445b4020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445b41b0"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445b4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7fa9445be8c0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7fa9445be8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445bed40"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445bd020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445bd1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445bd340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445bd4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445bd660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445bd7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445bd980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445bdb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7fa9445c7c70" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7fa9445c7c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445c1020"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445c11b0"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445c1340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445c14d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445c1660"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445c17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7fa9445aa020" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7fa9445aa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445aa3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445aa530"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445aa6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445aa850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445aa9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445aab70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7fa9445bc020" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7fa9445bc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445bc3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445bc530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445bc6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445bc850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445bc9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445bcb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445bcd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445bb020"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445bb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7fa9445cdda0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7fa9445cdda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445c9180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445c9310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445c94a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445c9630"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445c97c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7fa9445da7b0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7fa9445da7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9445dab30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9445dacc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445dae50"/>
        <function-ref name="get" scoped="" ref="0x7fa9445e2020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445e21b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445e2340"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9445e24d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445e2660"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9445e27f0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa9445e2980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9445e2b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7fa9445b23e0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7fa9445b23e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445b2760"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445b28f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445b2a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445b2c10"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445b2da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7fa9445d75a0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7fa9445d75a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445d7920"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445d7ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445d7c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445d7dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445d1020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445d11b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445d1340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445d14d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445d1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7fa9445b8020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7fa9445b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445b83a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445b8530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445b86c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445b8850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445b89e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445b8b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445b8d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445b7020"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445b71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7fa9445c2dc0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7fa9445c2dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445c8180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445c8310"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445c84a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445c8630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445c87c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445c8950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7fa9445ac020" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7fa9445ac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445ac3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445ac530"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445ac6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445ac850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445ac9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445acb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7fa9445ce140" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7fa9445ce140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445ce4c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445ce650"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445ce7e0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445ce970"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445ceb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7fa9445b4700" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7fa9445b4700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445b4a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445b4c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445b4da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445b3020"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445b31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7fa9445a9020" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7fa9445a9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445a93a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445a9530"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445a96c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445a9850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445a99e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445a9b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7fa9445bb5a0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7fa9445bb5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445bb920"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445bbab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445bbc40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445bbdd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445ba020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445ba1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445ba340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445ba4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445ba660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7fa9445c1b70" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7fa9445c1b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9445c0020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9445c01b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445c0340"/>
        <function-ref name="get" scoped="" ref="0x7fa9445c04d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445c0660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445c07f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9445c0980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445c0b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9445c0ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa9445c0e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9445bf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7fa9445b11f0" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7fa9445b11f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445b1570"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445b1700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445b1890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445b1a20"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445b1bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7fa9445ae020" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7fa9445ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445ae3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9445ae530"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445ae6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445ae850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445ae9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9445aeb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7fa9445b0020" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7fa9445b0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445b05a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445b0730"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445b08c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445b0a50"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445b0be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7fa9445b6a20" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7fa9445b6a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445b6da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9445b5020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445b51b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9445b5340"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445b54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7fa9445b75a0" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7fa9445b75a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445b7920"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445b7ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445b7c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445b7dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445b6020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445b61b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9445b6340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9445b64d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445b6660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fa944570aa0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fa944570aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa944570e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fa944570450" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fa944570450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9445707d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fa94456f120" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fa94456f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa94456f4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fa944571d80" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa944571d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa944570180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa944572540" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa944572540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9445728c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa944572a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa944572be0"/>
        <function-ref name="get" scoped="" ref="0x7fa944572d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa944571020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445711b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa944571340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445714d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa944571660"/>
        <function-ref name="setMode" scoped="" ref="0x7fa9445717f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa944571980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fa944569940" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fa944569940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa944569cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fa9445692f0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fa9445692f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa944569670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fa944568020" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fa944568020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9445683a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fa94456abf0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa94456abf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa944569020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa94456b3e0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa94456b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa94456b760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa94456b8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa94456ba80"/>
        <function-ref name="get" scoped="" ref="0x7fa94456bc10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa94456bda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa94456a020"/>
        <function-ref name="getMode" scoped="" ref="0x7fa94456a1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa94456a340"/>
        <function-ref name="overflow" scoped="" ref="0x7fa94456a4d0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa94456a660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa94456a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa94451da90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa94451da90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa94451de10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa94451c020"/>
        <function-ref name="captured" scoped="" ref="0x7fa94451c1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa94451c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa94451c4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa94451c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa9445649d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa9445649d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa944564d50"/>
        <function-ref name="getControl" scoped="" ref="0x7fa94451e020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa94451e1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa94451e340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa94451e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa94451e660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa94451e7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa94451e980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa94451eb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa944519020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa944519020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9445193a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa94451ede0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa94451ede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa94451d180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa94451d310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa94451d4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa94451d630"/>
        <function-ref name="fired" scoped="" ref="0x7fa94451d7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa94451c930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa94451c930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa94451ccb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa94451ce40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa94451a020"/>
        <function-ref name="get" scoped="" ref="0x7fa94451a1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa94451a340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa94451a4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa94451a660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa94451a7f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa94451a980"/>
        <function-ref name="setMode" scoped="" ref="0x7fa94451ab10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa94451aca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa944514160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa944514160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445144e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa944514670"/>
        <function-ref name="captured" scoped="" ref="0x7fa944514800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa944514990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa944514b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa944514cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa944516020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa944516020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9445163a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa944516530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445166c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa944516850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9445169e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa944516b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa944516d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa944515020"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9445151b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa9445127a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa9445127a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa944512b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa944515480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa944515480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa944515800"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa944515990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa944515b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa944515cb0"/>
        <function-ref name="fired" scoped="" ref="0x7fa944515e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa944513020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa944513020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9445133a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa944513530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9445136c0"/>
        <function-ref name="get" scoped="" ref="0x7fa944513850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445139e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa944513b70"/>
        <function-ref name="getMode" scoped="" ref="0x7fa944513d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa944512020"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9445121b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa944512340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9445124d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa94450d7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa94450d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa94450db20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa94450dcb0"/>
        <function-ref name="captured" scoped="" ref="0x7fa94450de40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa94450c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa94450c1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa94450c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa94450f6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa94450f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa94450fa50"/>
        <function-ref name="getControl" scoped="" ref="0x7fa94450fbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa94450fd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa94450e020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa94450e1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa94450e340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa94450e4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa94450e660"/>
        <function-ref name="setControl" scoped="" ref="0x7fa94450e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa94450ac50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa94450ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa944509020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa94450eac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa94450eac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa94450ee40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa94450d020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa94450d1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa94450d340"/>
        <function-ref name="fired" scoped="" ref="0x7fa94450d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa94450c610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa94450c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa94450c990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa94450cb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa94450ccb0"/>
        <function-ref name="get" scoped="" ref="0x7fa94450ce40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa94450a020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa94450a1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa94450a340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa94450a4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa94450a660"/>
        <function-ref name="setMode" scoped="" ref="0x7fa94450a7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa94450a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa944505cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa944505cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445040a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa944504230"/>
        <function-ref name="captured" scoped="" ref="0x7fa9445043c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa944504550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9445046e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa944504870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa944507b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa944507b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa944506020"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9445061b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa944506340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9445064d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa944506660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9445067f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa944506980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa944506b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fa944506ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa9445022f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa9445022f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa944502670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa944505020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa944505020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9445053a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa944505530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9445056c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa944505850"/>
        <function-ref name="fired" scoped="" ref="0x7fa9445059e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa944504b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa944504b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa944503020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9445031b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa944503340"/>
        <function-ref name="get" scoped="" ref="0x7fa9445034d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa944503660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9445037f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa944503980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa944503b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fa944503ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa944503e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa944502020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa9444fd2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa9444fd2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444fd670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9444fd800"/>
        <function-ref name="captured" scoped="" ref="0x7fa9444fd990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444fdb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444fdcb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9444fde40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa9444ff220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa9444ff220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9444ff5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9444ff730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444ff8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9444ffa50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9444ffbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444ffd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9444fe020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9444fe1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9444fe340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa9444fb7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa9444fb7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444fbb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa9444fe610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa9444fe610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444fe990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9444feb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9444fecb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9444fee40"/>
        <function-ref name="fired" scoped="" ref="0x7fa9444fd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa9444fc160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa9444fc160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9444fc4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9444fc670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444fc800"/>
        <function-ref name="get" scoped="" ref="0x7fa9444fc990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444fcb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444fccb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9444fce40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444fb020"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9444fb1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa9444fb340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9444fb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa9444f57a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa9444f57a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444f5b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9444f5cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fa9444f5e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444f4020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444f41b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9444f4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa9444f76d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa9444f76d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9444f7a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9444f7be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444f7d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9444f6020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9444f61b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444f6340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9444f64d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9444f6660"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9444f67f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa9444f3c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa9444f3c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444f2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa9444f6ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa9444f6ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444f6e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9444f5020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9444f51b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9444f5340"/>
        <function-ref name="fired" scoped="" ref="0x7fa9444f54d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa9444f4610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa9444f4610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9444f4990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9444f4b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444f4cb0"/>
        <function-ref name="get" scoped="" ref="0x7fa9444f4e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444f3020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444f31b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9444f3340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444f34d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9444f3660"/>
        <function-ref name="setMode" scoped="" ref="0x7fa9444f37f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9444f3980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa9444eecb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa9444eecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444ed0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9444ed230"/>
        <function-ref name="captured" scoped="" ref="0x7fa9444ed3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444ed550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444ed6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9444ed870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa9444f0b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa9444f0b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9444ef020"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9444ef1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444ef340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9444ef4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9444ef660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444ef7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9444ef980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9444efb10"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9444efca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa9444eb2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa9444eb2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444eb670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa9444ee020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa9444ee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444ee3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9444ee530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9444ee6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9444ee850"/>
        <function-ref name="fired" scoped="" ref="0x7fa9444ee9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa9444edb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa9444edb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9444ec020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9444ec1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444ec340"/>
        <function-ref name="get" scoped="" ref="0x7fa9444ec4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444ec660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444ec7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9444ec980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444ecb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9444ecca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa9444ece30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9444eb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa9444e52f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa9444e52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444e5670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9444e5800"/>
        <function-ref name="captured" scoped="" ref="0x7fa9444e5990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444e5b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444e5cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9444e5e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa9444e7220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa9444e7220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9444e75a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9444e7730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444e78c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9444e7a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9444e7be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444e7d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9444e6020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9444e61b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9444e6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa9444e37a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa9444e37a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444e3b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa9444e6610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa9444e6610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444e6990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9444e6b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9444e6cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9444e6e40"/>
        <function-ref name="fired" scoped="" ref="0x7fa9444e5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa9444e4160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa9444e4160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9444e44e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9444e4670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444e4800"/>
        <function-ref name="get" scoped="" ref="0x7fa9444e4990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444e4b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444e4cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9444e4e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444e3020"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9444e31b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa9444e3340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9444e34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa9444de7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa9444de7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444deb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9444decb0"/>
        <function-ref name="captured" scoped="" ref="0x7fa9444dee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444dd020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444dd1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9444dd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa9444e06d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa9444e06d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9444e0a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9444e0be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444e0d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9444df020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9444df1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444df340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9444df4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9444df660"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9444df7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa9444dcc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa9444dcc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444db020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa9444dfac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa9444dfac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444dfe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9444de020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9444de1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9444de340"/>
        <function-ref name="fired" scoped="" ref="0x7fa9444de4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa9444dd610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa9444dd610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9444dd990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9444ddb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444ddcb0"/>
        <function-ref name="get" scoped="" ref="0x7fa9444dde40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444dc020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444dc1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9444dc340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444dc4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9444dc660"/>
        <function-ref name="setMode" scoped="" ref="0x7fa9444dc7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9444dc980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fa9444d6cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fa9444d6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444d50a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fa9444d5230"/>
        <function-ref name="captured" scoped="" ref="0x7fa9444d53c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444d5550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444d56e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fa9444d5870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fa9444d8b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fa9444d8b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa9444d7020"/>
        <function-ref name="getControl" scoped="" ref="0x7fa9444d71b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444d7340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa9444d74d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9444d7660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444d77f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9444d7980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa9444d7b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fa9444d7ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fa9444d32f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fa9444d32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444d3670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fa9444d6020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fa9444d6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa9444d63a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa9444d6530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9444d66c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa9444d6850"/>
        <function-ref name="fired" scoped="" ref="0x7fa9444d69e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa9444d5b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa9444d5b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9444d4020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9444d41b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9444d4340"/>
        <function-ref name="get" scoped="" ref="0x7fa9444d44d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa9444d4660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9444d47f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9444d4980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9444d4b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9444d4ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa9444d4e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9444d3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7fa9444cd240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7fa9444cd240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444cd5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7fa9444d1a90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7fa9444d1a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444d1e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7fa9444ce260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7fa9444ce260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444ce5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7fa9444ce9f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7fa9444ce9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9444ced70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7fa9449ab4c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fa9449ab4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fa9449ab840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7fa944d1c3b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fa944d1c3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fa944d1c730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fa944d1c8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7fa944d1ca50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7fa944b85bc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7fa944b85bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fa944cc1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fa944496dc0" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fa944496dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944495180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fa944497590" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fa944497590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fa944497910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7fa9444966c0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7fa9444966c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944496a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7fa944497c00" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fa944497c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944496020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fa9444961b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fa944496340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fa944d99410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fa944d99410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa944d99790"/>
        <function-ref name="runTask" scoped="" ref="0x7fa944d99920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fa944d2a3a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fa944d2a3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944d2a720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fa944d2a8b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fa944d2aa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fa944701b70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fa944701b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa944700020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa9447001b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7fa9446fa2c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fa9446fa2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fa9446fa640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fa9446fa7d0"/>
        <function-ref name="sleep" scoped="" ref="0x7fa9446fa960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fa944702c30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fa944702c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944701020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fa9447011b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fa944701340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fa943bdb020" loc="49:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa943bdb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa943bdb3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa943bdb530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa943bdb6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa943bdb850"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa943bdb9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fa943bdbc30" loc="50:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa943bdbc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa943bd9020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa943bd91b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa943bd9340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa943bd94d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa943bd9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fa943bd98b0" loc="51:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa943bd98b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa943bd9c30"/>
        <function-ref name="source" scoped="" ref="0x7fa943bd9dc0"/>
        <function-ref name="address" scoped="" ref="0x7fa943bd8020"/>
        <function-ref name="destination" scoped="" ref="0x7fa943bd81b0"/>
        <function-ref name="setSource" scoped="" ref="0x7fa943bd8340"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa943bd84d0"/>
        <function-ref name="type" scoped="" ref="0x7fa943bd8660"/>
        <function-ref name="setType" scoped="" ref="0x7fa943bd87f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa943bd8980"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa943bd8b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa943bd8ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7fa943bd7020" loc="52:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7fa943bd7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fa943bd73a0"/>
        <function-ref name="noAck" scoped="" ref="0x7fa943bd7530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fa943bd76c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fa94383a580" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa94383a580"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa94383a900"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa94383aa90"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa94383ac20"/>
        <function-ref name="cancel" scoped="" ref="0x7fa94383adb0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa943839020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7fa9438392d0" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa9438392d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa943839650"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa9438397e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa943839970"/>
        <function-ref name="cancel" scoped="" ref="0x7fa943839b00"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa943839c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fa943838020" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa943838020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa9438383a0"/>
        <function-ref name="source" scoped="" ref="0x7fa943838530"/>
        <function-ref name="address" scoped="" ref="0x7fa9438386c0"/>
        <function-ref name="destination" scoped="" ref="0x7fa943838850"/>
        <function-ref name="setSource" scoped="" ref="0x7fa9438389e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa943838b70"/>
        <function-ref name="type" scoped="" ref="0x7fa943838d00"/>
        <function-ref name="setType" scoped="" ref="0x7fa943837020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa9438371b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa943837340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa9438374d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fa94443ece0" loc="44:../../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa94443ece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa94443b0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa94443b230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa94443b3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa94443b550"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa94443b6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fa9443f1400" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa9443f1400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9443f17a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa9443f1930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa9443f1ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa9443f1c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa9443f1de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fa9443f2580" loc="46:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa9443f2580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9443f2920"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa9443f2ab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa9443f2c40"/>
        <function-ref name="cancel" scoped="" ref="0x7fa9443f2dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa9443f1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fa9443ef720" loc="50:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa9443ef720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9443efaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa9443efc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa9443efdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa9443ee020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa9443ee1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7fa9443ee480" loc="169:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7fa9443ee480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa9443ee800"/>
        <function-ref name="runTask" scoped="" ref="0x7fa9443ee990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7fa9443eec60" loc="126:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7fa9443eec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa9443ec020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa9443ec1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7fa9443f0060" loc="49:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa9443f0060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa9443f03e0"/>
        <function-ref name="source" scoped="" ref="0x7fa9443f0570"/>
        <function-ref name="address" scoped="" ref="0x7fa9443f0700"/>
        <function-ref name="destination" scoped="" ref="0x7fa9443f0890"/>
        <function-ref name="setSource" scoped="" ref="0x7fa9443f0a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa9443f0bb0"/>
        <function-ref name="type" scoped="" ref="0x7fa9443f0d40"/>
        <function-ref name="setType" scoped="" ref="0x7fa9443ef020"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa9443ef1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa9443ef340"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa9443ef4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fa9443e33b0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fa9443e33b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fa9443e3730"/>
        <function-ref name="stopDone" scoped="" ref="0x7fa9443e38c0"/>
        <function-ref name="start" scoped="" ref="0x7fa9443e3a50"/>
        <function-ref name="stop" scoped="" ref="0x7fa9443e3be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fa9443e73f0" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa9443e73f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9443e7770"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa9443e7900"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa9443e7a90"/>
        <function-ref name="cancel" scoped="" ref="0x7fa9443e7c20"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa9443e7db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fa9443e07e0" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa9443e07e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9443e0b60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa9443e0cf0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa9443e0e80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa9443de030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa9443de1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fa9443e01d0" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fa9443e01d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa9443e0550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa9443cf330" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa9443cf330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa9443cf6b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa9443cf840"/>
        <function-ref name="led1On" scoped="" ref="0x7fa9443cf9d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa9443cfb60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa9443cfcf0"/>
        <function-ref name="get" scoped="" ref="0x7fa9443cfe80"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa9443da030"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa9443da670"/>
        <function-ref name="set" scoped="" ref="0x7fa9443da1c0"/>
        <function-ref name="led0On" scoped="" ref="0x7fa9443da350"/>
        <function-ref name="led2On" scoped="" ref="0x7fa9443da4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fa9443dcb20" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa9443dcb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fa9443db020"/>
        <function-ref name="noAck" scoped="" ref="0x7fa9443db1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fa9443db340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fa9443de470" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa9443de470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa9443de7f0"/>
        <function-ref name="source" scoped="" ref="0x7fa9443de980"/>
        <function-ref name="address" scoped="" ref="0x7fa9443deb10"/>
        <function-ref name="destination" scoped="" ref="0x7fa9443deca0"/>
        <function-ref name="setSource" scoped="" ref="0x7fa9443dee30"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa9443dc020"/>
        <function-ref name="type" scoped="" ref="0x7fa9443dc1b0"/>
        <function-ref name="setType" scoped="" ref="0x7fa9443dc340"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa9443dc4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa9443dc660"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa9443dc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fa9443754a0" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7fa9443754a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa944375820"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa9443759b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa944375b40"/>
        <function-ref name="cancel" scoped="" ref="0x7fa944375cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa944375e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fa944374120" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7fa944374120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa9443744a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fa9443ce300" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa9443ce300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9443ce6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa9443ce830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa9443ce9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa9443ceb50"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa9443cece0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fa944378d60" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa944378d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa944376180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa944376310"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa9443764a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa944376630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa9443767c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fa9443790d0" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fa9443790d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa944379470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fa944376a10" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fa944376a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fa944376d90"/>
        <function-ref name="noAck" scoped="" ref="0x7fa944375020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fa9443751b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fa9443796c0" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fa9443796c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fa944379a40"/>
        <function-ref name="source" scoped="" ref="0x7fa944379bd0"/>
        <function-ref name="address" scoped="" ref="0x7fa944379d60"/>
        <function-ref name="destination" scoped="" ref="0x7fa944378020"/>
        <function-ref name="setSource" scoped="" ref="0x7fa9443781b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7fa944378340"/>
        <function-ref name="type" scoped="" ref="0x7fa9443784d0"/>
        <function-ref name="setType" scoped="" ref="0x7fa944378660"/>
        <function-ref name="isForMe" scoped="" ref="0x7fa9443787f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fa944378980"/>
        <function-ref name="localGroup" scoped="" ref="0x7fa944378b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fa944372b90" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fa944372b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fa94436f020"/>
        <function-ref name="stopDone" scoped="" ref="0x7fa94436f1b0"/>
        <function-ref name="start" scoped="" ref="0x7fa94436f340"/>
        <function-ref name="stop" scoped="" ref="0x7fa94436f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fa94436e790" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa94436e790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa9446820d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa94436eb10"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa94436eca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa94436ee30"/>
        <function-ref name="cancel" scoped="" ref="0x7fa94436d020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa94436d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa944372540" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa944372540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa9443728c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fa94436fc60" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fa94436fc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa9446820d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa94436e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa94436c2b0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa94436c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa94436c630"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa94436c7c0"/>
        <function-ref name="led1On" scoped="" ref="0x7fa94436c950"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa94436cae0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa94436cc70"/>
        <function-ref name="get" scoped="" ref="0x7fa94436ce00"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa94436b020"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa94436b660"/>
        <function-ref name="set" scoped="" ref="0x7fa94436b1b0"/>
        <function-ref name="led0On" scoped="" ref="0x7fa94436b340"/>
        <function-ref name="led2On" scoped="" ref="0x7fa94436b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7fa944367970" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fa944367970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa9446820d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fa944367cf0"/>
        <function-ref name="offset" scoped="" ref="0x7fa944367e80"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fa94436c030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fa944360c40" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fa944360c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fa94435f020"/>
        <function-ref name="stopDone" scoped="" ref="0x7fa94435f1b0"/>
        <function-ref name="start" scoped="" ref="0x7fa94435f340"/>
        <function-ref name="stop" scoped="" ref="0x7fa94435f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7fa9442f76e0" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7fa9442f76e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa9442f7a60"/>
        <function-ref name="runTask" scoped="" ref="0x7fa9442f7bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fa94434a780" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7fa94434a780"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa94434ab00"/>
        <function-ref name="stop" scoped="" ref="0x7fa94434ac90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7fa94432f4f0" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7fa94432f4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa94432f870"/>
        <function-ref name="runTask" scoped="" ref="0x7fa94432fa00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa9443605f0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa9443605f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa944360970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7fa944348360" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7fa944348360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7fa9443486e0"/>
        <function-ref name="flush" scoped="" ref="0x7fa944348870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7fa9442fbc70" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7fa9442fbc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa9442fa020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa9442fa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7fa94434f7e0" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fa94434f7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fa94434fb60"/>
        <function-ref name="resetSend" scoped="" ref="0x7fa94434fcf0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fa94434fe80"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fa944358030"/>
        <function-ref name="putData" scoped="" ref="0x7fa9443581c0"/>
        <function-ref name="putDone" scoped="" ref="0x7fa944358350"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fa9443584e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa944358760" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa944358760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa944358ae0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa944358c70"/>
        <function-ref name="led1On" scoped="" ref="0x7fa944358e00"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa944353020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa9443531b0"/>
        <function-ref name="get" scoped="" ref="0x7fa944353340"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa9443534d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa944353b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944353660"/>
        <function-ref name="led0On" scoped="" ref="0x7fa9443537f0"/>
        <function-ref name="led2On" scoped="" ref="0x7fa944353980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7fa9442f4a00" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fa9442f4a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa9442f4d80"/>
        <function-ref name="runTask" scoped="" ref="0x7fa9442f3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7fa944359a40" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fa944359a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fa944359dc0"/>
        <function-ref name="nextByte" scoped="" ref="0x7fa94435e020"/>
        <function-ref name="startSend" scoped="" ref="0x7fa94435e1b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fa94435e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7fa944354530" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fa944354530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fa9443548b0"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fa944354a40"/>
        <function-ref name="endPacket" scoped="" ref="0x7fa944354bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7fa944229020" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7fa944229020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa9442293a0"/>
        <function-ref name="runTask" scoped="" ref="0x7fa944229530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fa94422ede0" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fa94422ede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa9446820d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa94422d1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa94422d350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa94422d4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa94422d670"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa94422d800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7fa944229800" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7fa944229800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa944229b80"/>
        <function-ref name="runTask" scoped="" ref="0x7fa944229d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fa94422e6c0" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fa94422e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa9446820d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fa94422ea60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7fa94422dc20" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7fa94422dc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fa9446820d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fa94422c020"/>
        <function-ref name="offset" scoped="" ref="0x7fa94422c1b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fa94422c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa94422b920" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa94422b920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa94422bca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa94422be30"/>
        <function-ref name="led1On" scoped="" ref="0x7fa94422a020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa94422a1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa94422a340"/>
        <function-ref name="get" scoped="" ref="0x7fa94422a4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa94422a660"/>
        <function-ref name="led2On" scoped="" ref="0x7fa94422aca0"/>
        <function-ref name="set" scoped="" ref="0x7fa94422a980"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa94422a7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fa94422ab10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7fa94422ce80" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fa94422ce80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fa94422b220"/>
        <function-ref name="nextByte" scoped="" ref="0x7fa94422b3b0"/>
        <function-ref name="startSend" scoped="" ref="0x7fa94422b540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fa94422b6d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7fa94422c590" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fa94422c590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fa94422c910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fa94422caa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7fa94422cc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7fa944217d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa944217d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9442210e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa944221270"/>
        <function-ref name="receive" scoped="" ref="0x7fa944221400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa944221590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa944221720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa9442218b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa944221a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7fa944227e00" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fa944227e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fa9442231c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7fa944223350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fa9442234e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fa944223670"/>
        <function-ref name="putData" scoped="" ref="0x7fa944223800"/>
        <function-ref name="putDone" scoped="" ref="0x7fa944223990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fa944223b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa944221cc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa944221cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa9442200a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa944220230"/>
        <function-ref name="led1On" scoped="" ref="0x7fa9442203c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa944220550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa9442206e0"/>
        <function-ref name="get" scoped="" ref="0x7fa944220870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa944220a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa9442161b0"/>
        <function-ref name="set" scoped="" ref="0x7fa944220b90"/>
        <function-ref name="led0On" scoped="" ref="0x7fa944220d20"/>
        <function-ref name="led2On" scoped="" ref="0x7fa944216020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fa9441f9020" loc="40:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fa9441f9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9441f93a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fa9441f9530"/>
        <function-ref name="receive" scoped="" ref="0x7fa9441f96c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fa9441f9850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fa9441fb8d0" loc="39:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa9441fb8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9441fbc50"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa9441fbde0"/>
        <function-ref name="receive" scoped="" ref="0x7fa9441fa020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa9441fa1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa9441fa340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa9441fa4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa9441fa660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fa9441fb0c0" loc="38:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fa9441fb0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa9441fb440"/>
        <function-ref name="stop" scoped="" ref="0x7fa9441fb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa943c0ec70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943c0ec70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa943c0d020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa943c0d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fa943c0c440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fa943c0c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa943c0c7c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fa943c0c950"/>
        <function-ref name="receive" scoped="" ref="0x7fa943c0cae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fa943c0cc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fa943c0b020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa943c0b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fa943c0b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fa943c0d440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa943c0d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa943c0d7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa943c0d950"/>
        <function-ref name="receive" scoped="" ref="0x7fa943c0dae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa943c0dc70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa943c0de00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa943c0c020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa943c0c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa943c0e020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa943c0e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa943c0e3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa943c0e530"/>
        <function-ref name="request" scoped="" ref="0x7fa943c0e6c0"/>
        <function-ref name="granted" scoped="" ref="0x7fa943c0e850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa943c0e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fa94418f8e0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa94418f8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa94418fc60"/>
        <function-ref name="configure" scoped="" ref="0x7fa94418fdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fa944191d00" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fa944191d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa94418d0a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fa94418d230"/>
        <function-ref name="receive" scoped="" ref="0x7fa94418d3c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fa94418d550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fa94418b1d0" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa94418b1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fa94418b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fa944192670" loc="43:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa944192670"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9441929f0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa944192b80"/>
        <function-ref name="receive" scoped="" ref="0x7fa944192d10"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa944191020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa9441911b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa944191340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa9441914d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fa94418de50" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fa94418de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa94418c210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa94418c3a0"/>
        <function-ref name="request" scoped="" ref="0x7fa94418c530"/>
        <function-ref name="granted" scoped="" ref="0x7fa94418c6c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa94418c850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa944198c80" loc="41:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa944198c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa9441940a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa944194230"/>
        <function-ref name="request" scoped="" ref="0x7fa9441943c0"/>
        <function-ref name="granted" scoped="" ref="0x7fa944194550"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa9441946e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fa944187710" loc="48:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa944187710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa944187a90"/>
        <function-ref name="txDone" scoped="" ref="0x7fa944187c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fa9440fbdc0" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa9440fbdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa9440fa180"/>
        <function-ref name="configure" scoped="" ref="0x7fa9440fa310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fa9440f9890" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fa9440f9890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9440f9c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fa9440f9dc0"/>
        <function-ref name="receive" scoped="" ref="0x7fa9440f8020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fa9440f81b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fa9440f73e0" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa9440f73e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fa9440f7780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7fa9440f7a50" loc="50:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fa9440f7a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa9440f7dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa9440f6020"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa9440f61b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa9440f6340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa9440f64d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa9440f6660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa9440f67f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa9440f6980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa9440f6b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa9440f6ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa9440f6e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa9440f5020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa9440f51b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa9440f5440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa9440f55d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa9440f5760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa9440f58f0"/>
        <function-ref name="isUart" scoped="" ref="0x7fa9440f5a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa9440f5c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa9440f5da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa9440f4020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa9440f41b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa9440f4340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa9440f44d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9440f4660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa9440f49f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa9440f4b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa9440f4d10"/>
        <function-ref name="tx" scoped="" ref="0x7fa9440f3020"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa9440f31b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa9440f3340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa9440f34d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa9440f3660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa9440f37f0"/>
        <function-ref name="rx" scoped="" ref="0x7fa9440f3980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa9440f3b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa9440f3ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa9440f3e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa9440f2020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa9440f21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fa9440fa6d0" loc="45:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fa9440fa6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa9440faa70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fa9440fac00"/>
        <function-ref name="receive" scoped="" ref="0x7fa9440fad90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fa9440f9020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fa9440f91b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fa9440f9340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa9440f94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa9440f1020" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa9440f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa9440f1e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9440f0800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9440f0340"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9440f0cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fa9440f85b0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fa9440f85b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa9440f8950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa9440f8ae0"/>
        <function-ref name="request" scoped="" ref="0x7fa9440f8c70"/>
        <function-ref name="granted" scoped="" ref="0x7fa9440f8e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa9440f7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa9440fb020" loc="43:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa9440fb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa9440fb3c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa9440fb550"/>
        <function-ref name="request" scoped="" ref="0x7fa9440fb6e0"/>
        <function-ref name="granted" scoped="" ref="0x7fa9440fb870"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa9440fba00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fa9440f25b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fa9440f25b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa9440f2950"/>
        <function-ref name="txDone" scoped="" ref="0x7fa9440f2ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa9440ee120" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa9440ee120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa9440ee4a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa9440ee630"/>
        <function-ref name="led1On" scoped="" ref="0x7fa9440ee7c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa9440ee950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa9440eeae0"/>
        <function-ref name="get" scoped="" ref="0x7fa9440eec70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa9440eee00"/>
        <function-ref name="led2On" scoped="" ref="0x7fa9440ed4d0"/>
        <function-ref name="set" scoped="" ref="0x7fa9440ed1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa9440ed020"/>
        <function-ref name="led0On" scoped="" ref="0x7fa9440ed340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7fa9440e0bd0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa9440e0bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9440df020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fa9440e16d0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa9440e16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa9440e1a50"/>
        <function-ref name="txDone" scoped="" ref="0x7fa9440e1be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fa9440e8b60" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa9440e8b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa9440e5020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa9440e51b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa9440e5340"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa9440e54d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa9440e5660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa9440e57f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa9440e5980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa9440e5b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa9440e5ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa9440e5e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa9440e4020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa9440e41b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa9440e4340"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa9440e45d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa9440e4760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa9440e48f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa9440e4a80"/>
        <function-ref name="isUart" scoped="" ref="0x7fa9440e4c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa9440e4da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa9440e3020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa9440e31b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa9440e3340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa9440e34d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa9440e3660"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9440e37f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa9440e3b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa9440e3d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa9440e2020"/>
        <function-ref name="tx" scoped="" ref="0x7fa9440e21b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa9440e2340"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa9440e24d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa9440e2660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa9440e27f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa9440e2980"/>
        <function-ref name="rx" scoped="" ref="0x7fa9440e2b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa9440e2ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa9440e2e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa9440e1020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa9440e11b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa9440e1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fa944099800" loc="82:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fa944099800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944099b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944099d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944098020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440981b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944098340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440984d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944098660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440987f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944098980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944098b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944098ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944098e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944097020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440972b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944097440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fa9440d7020" loc="76:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fa9440d7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa9440d73a0"/>
        <function-ref name="txDone" scoped="" ref="0x7fa9440d7530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7fa944097800" loc="83:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7fa944097800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944097b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944097d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944096020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440961b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944096340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440964d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944096660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440967f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944096980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944096b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944096ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944096e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944095020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440952b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944095440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7fa944095800" loc="84:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7fa944095800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944095b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944095d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944094020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440941b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944094340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440944d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944094660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440947f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944094980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944094b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944094ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944094e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944093020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440932b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944093440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7fa9440dc360" loc="75:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fa9440dc360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa9440dc6e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa9440dc870"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa9440dca00"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa9440dcb90"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa9440dcd20"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa9440db020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa9440db1b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa9440db340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa9440db4d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa9440db660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa9440db7f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa9440db980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa9440dbb10"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa9440dbda0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa9440da020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa9440da1b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa9440da340"/>
        <function-ref name="isUart" scoped="" ref="0x7fa9440da4d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa9440da660"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa9440da7f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa9440da980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa9440dab10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa9440daca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa9440dae30"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9440d9020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa9440d93b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa9440d9540"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa9440d96d0"/>
        <function-ref name="tx" scoped="" ref="0x7fa9440d9860"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa9440d99f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa9440d9b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa9440d9d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa9440d8020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa9440d81b0"/>
        <function-ref name="rx" scoped="" ref="0x7fa9440d8340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa9440d84d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa9440d8660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa9440d87f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa9440d8980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa9440d8b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa944093700" loc="86:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa944093700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa944093a80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa944093c10"/>
        <function-ref name="led1On" scoped="" ref="0x7fa944093da0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa944092020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa9440921b0"/>
        <function-ref name="get" scoped="" ref="0x7fa944092340"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa9440924d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa944092b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944092660"/>
        <function-ref name="led0On" scoped="" ref="0x7fa9440927f0"/>
        <function-ref name="led2On" scoped="" ref="0x7fa944092980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7fa9440adbc0" loc="79:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fa9440adbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa9440d5020"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa9440d51b0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa9440d5340"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa9440d54d0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa9440d5660"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa9440d57f0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa9440d5980"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa9440d5b10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa9440d5ca0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa9440d5e30"/>
        <function-ref name="getData" scoped="" ref="0x7fa9440d4020"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa9440d41b0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa9440d4340"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa9440d45d0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa9440d4760"/>
        <function-ref name="getIV" scoped="" ref="0x7fa9440d48f0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa9440d4a80"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa9440d4c10"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa9440d4da0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa9440ac020"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa9440ac1b0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa9440ac340"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa9440ac4d0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa9440ac660"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa9440ac7f0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa9440acb80"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa9440acd10"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa9440ab020"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa9440ab1b0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa9440ab340"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa9440ab4d0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa9440ab660"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa9440ab7f0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa9440ab980"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa9440abb10"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa9440abca0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa9440abe30"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa9440aa020"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa9440aa1b0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa9440aa340"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa9440aa4d0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa9440aa660"/>
        <function-ref name="setData" scoped="" ref="0x7fa9440aa7f0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa9440aa980"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa9440aab10"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa9440aaca0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa9440aae30"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa9440a9020"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa9440a91b0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa9440a9740"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa9440a98d0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa9440a9a60"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa9440a9bf0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa9440a9d80"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa9440a8020"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa9440a81b0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa9440a8340"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa9440a84d0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa9440a8660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7fa9440a6800" loc="81:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7fa9440a6800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa9440a6b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa9440a6d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa94409a020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa94409a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa94409a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa94409a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa94409a660"/>
        <function-ref name="get" scoped="" ref="0x7fa94409a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa94409a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa94409ab10"/>
        <function-ref name="set" scoped="" ref="0x7fa94409aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa94409ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944099020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440992b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944099440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fa9440d7970" loc="77:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa9440d7970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9440d7cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fa94409c860" loc="80:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fa94409c860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa94409cbe0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa94409cd70"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa9440a7020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440a71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa9440a7340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440a74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa9440a7660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440a77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa9440a7980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa9440a7b10"/>
        <function-ref name="set" scoped="" ref="0x7fa9440a7ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa9440a7e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa9440a6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440a62b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa9440a6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7fa94400f810" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7fa94400f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa94400fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa94400fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa94400e020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa94400e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa94400e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa94400e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa94400e660"/>
        <function-ref name="get" scoped="" ref="0x7fa94400e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa94400e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa94400eb10"/>
        <function-ref name="set" scoped="" ref="0x7fa94400eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa94400ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa94400d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa94400d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa94400d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7fa943ffa810" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7fa943ffa810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ffab90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ffad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ff9020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ff91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ff9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ff94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ff9660"/>
        <function-ref name="get" scoped="" ref="0x7fa943ff97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ff9980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ff9b10"/>
        <function-ref name="set" scoped="" ref="0x7fa943ff9ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ff9e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ff8020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ff82b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ff8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7fa943fb1ca0" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7fa943fb1ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fb00a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fb0230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fb03c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fb0550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fb06e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fb0870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fb0a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943fb0b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fb0d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943faf020"/>
        <function-ref name="set" scoped="" ref="0x7fa943faf1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943faf340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943faf4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943faf760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943faf8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7fa943f8ccb0" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7fa943f8ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f8b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f8b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f8b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f8b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f8b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f8b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f8ba00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f8bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f8bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f8a020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f8a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f8a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f8a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f8a760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f8a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7fa943fafcc0" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7fa943fafcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fae0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fae230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fae3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fae550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fae6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fae870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943faea00"/>
        <function-ref name="get" scoped="" ref="0x7fa943faeb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943faed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fad020"/>
        <function-ref name="set" scoped="" ref="0x7fa943fad1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fad340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fad4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fad760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fad8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7fa943ff6810" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7fa943ff6810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ff6b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ff6d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ff5020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ff51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ff5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ff54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ff5660"/>
        <function-ref name="get" scoped="" ref="0x7fa943ff57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ff5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ff5b10"/>
        <function-ref name="set" scoped="" ref="0x7fa943ff5ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ff5e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ff4020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ff42b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ff4440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7fa943fe29a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7fa943fe29a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fe2d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fe1020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fe11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fe1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fe14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fe1660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fe17f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fe1980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fe1b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fe1ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fe1e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fe0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fe01b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fe0440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fe05d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7fa943fcd9a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7fa943fcd9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fcdd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fcc020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fcc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fcc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fcc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fcc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fcc7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fcc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fccb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fccca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fcce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fcb020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fcb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fcb440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fcb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7fa943fbd9a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7fa943fbd9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fbdd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fbc020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fbc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fbc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fbc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fbc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fbc7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fbc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fbcb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fbcca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fbce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fbb020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fbb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fbb440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fbb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7fa943fa9cc0" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7fa943fa9cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fa80a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fa8230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fa83c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fa8550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fa86e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fa8870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fa8a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943fa8b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fa8d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fa7020"/>
        <function-ref name="set" scoped="" ref="0x7fa943fa71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fa7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fa74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fa7760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fa78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7fa943f98cb0" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7fa943f98cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f970a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f97230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f973c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f97550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f976e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f97870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f97a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f97b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f97d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f96020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f961b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f96340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f964d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f96760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f968f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7fa943f84cc0" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7fa943f84cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f830a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f83230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f833c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f83550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f836e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f83870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f83a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f83b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f83d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f82020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f821b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f82340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f824d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f82760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f828f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7fa944009810" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7fa944009810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944009b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944009d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944008020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440081b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944008340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440084d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944008660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440087f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944008980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944008b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944008ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944008e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944007020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440072b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944007440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7fa943fa7cc0" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7fa943fa7cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fa60a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fa6230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fa63c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fa6550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fa66e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fa6870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fa6a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943fa6b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fa6d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fa5020"/>
        <function-ref name="set" scoped="" ref="0x7fa943fa51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fa5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fa54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fa5760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fa58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7fa944005810" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7fa944005810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944005b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944005d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944004020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440041b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944004340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440044d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944004660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440047f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944004980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944004b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944004ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944004e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944003020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440032b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944003440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7fa943ff0810" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7fa943ff0810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ff0b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ff0d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fef020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fef1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fef340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fef4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fef660"/>
        <function-ref name="get" scoped="" ref="0x7fa943fef7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fef980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fefb10"/>
        <function-ref name="set" scoped="" ref="0x7fa943fefca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fefe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fee020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fee2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fee440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7fa943fdc9a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7fa943fdc9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fdcd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fdb020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fdb1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fdb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fdb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fdb660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fdb7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fdb980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fdbb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fdbca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fdbe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fda020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fda1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fda440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fda5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7fa943fc79a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7fa943fc79a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fc7d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fc6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fc61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fc6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fc64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fc6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fc67f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fc6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fc6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fc6ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fc6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fc5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fc51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fc5440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fc55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7fa943fb79a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7fa943fb79a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fb7d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fb6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fb61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fb6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fb64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fb6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fb67f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fb6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fb6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fb6ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fb6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fb5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fb51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fb5440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fb55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7fa944013810" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7fa944013810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944013b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944013d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944012020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440121b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944012340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440124d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944012660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440127f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944012980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944012b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944012ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944012e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944011020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440112b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944011440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7fa943fff810" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7fa943fff810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fffc90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fffe20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ffd020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ffd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ffd340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ffd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ffd660"/>
        <function-ref name="get" scoped="" ref="0x7fa943ffd7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ffd980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ffdb10"/>
        <function-ref name="set" scoped="" ref="0x7fa943ffdca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ffde30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ffc020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ffc2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ffc440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7fa943fea810" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7fa943fea810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943feab90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fead20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fe9020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fe91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fe9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fe94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fe9660"/>
        <function-ref name="get" scoped="" ref="0x7fa943fe97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fe9980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fe9b10"/>
        <function-ref name="set" scoped="" ref="0x7fa943fe9ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fe9e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fe8020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fe82b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fe8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7fa943fb3cc0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7fa943fb3cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fb20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fb2230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fb23c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fb2550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fb26e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fb2870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fb2a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943fb2b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fb2d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fb1020"/>
        <function-ref name="set" scoped="" ref="0x7fa943fb11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fb1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fb14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fb1760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fb18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7fa943f92cb0" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7fa943f92cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f910a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f91230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f913c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f91550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f916e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f91870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f91a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f91b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f91d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f90020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f901b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f90340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f904d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f90760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f908f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7fa943f86cb0" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7fa943f86cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f850a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f85230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f853c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f85550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f856e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f85870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f85a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f85b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f85d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f84020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f841b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f84340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f844d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f84760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f848f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7fa943f9ecc0" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7fa943f9ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f9d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f9d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f9d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f9d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f9d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f9d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f9da00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f9db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f9dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f9c020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f9c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f9c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f9c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f9c760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f9c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7fa943fe6810" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7fa943fe6810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fe6d90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fe5020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fe51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fe5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fe54d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fe5660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fe57f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fe5980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fe5b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fe5ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fe5e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fe4020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fe41b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fe4440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fe45d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7fa943fd29a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7fa943fd29a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fd2d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fd1020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fd11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fd1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fd14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fd1660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fd17f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fd1980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fd1b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fd1ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fd1e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fd0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fd01b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fd0440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fd05d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7fa943fc19a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7fa943fc19a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fc1d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fc0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fc01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fc0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fc04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fc0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fc07f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fc0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fc0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fc0ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fc0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fbf020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fbf1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fbf440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fbf5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7fa943f90cb0" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7fa943f90cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f8f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f8f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f8f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f8f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f8f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f8f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f8fa00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f8fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f8fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f8e020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f8e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f8e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f8e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f8e760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f8e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7fa943fa5cb0" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7fa943fa5cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fa40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fa4230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fa43c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fa4550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fa46e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fa4870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fa4a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943fa4b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fa4d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fa3020"/>
        <function-ref name="set" scoped="" ref="0x7fa943fa31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fa3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fa34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fa3760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fa38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7fa94400d810" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7fa94400d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa94400db90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa94400dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa94400c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa94400c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa94400c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa94400c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa94400c660"/>
        <function-ref name="get" scoped="" ref="0x7fa94400c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa94400c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa94400cb10"/>
        <function-ref name="set" scoped="" ref="0x7fa94400cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa94400ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa94400b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa94400b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa94400b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7fa943ff8810" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7fa943ff8810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ff8b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ff8d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ff7020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ff71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ff7340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ff74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ff7660"/>
        <function-ref name="get" scoped="" ref="0x7fa943ff77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ff7980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ff7b10"/>
        <function-ref name="set" scoped="" ref="0x7fa943ff7ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ff7e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ff6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ff62b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ff6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7fa943fc59a0" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7fa943fc59a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fc5d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fc4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fc41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fc4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fc44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fc4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fc47f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fc4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fc4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fc4ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fc4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fc3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fc31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fc3440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fc35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7fa943ff4810" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7fa943ff4810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ff4b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ff4d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ff3020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ff31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ff3340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ff34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ff3660"/>
        <function-ref name="get" scoped="" ref="0x7fa943ff37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ff3980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ff3b10"/>
        <function-ref name="set" scoped="" ref="0x7fa943ff3ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ff3e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ff2020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ff22b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ff2440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7fa943fe09a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7fa943fe09a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fe0d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fdf020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fdf1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fdf340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fdf4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fdf660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fdf7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fdf980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fdfb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fdfca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fdfe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fde020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fde1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fde440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fde5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7fa943fcb9a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7fa943fcb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fcbd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fca020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fca1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fca340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fca4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fca660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fca7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fca980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fcab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fcaca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fcae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fc9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fc91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fc9440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fc95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7fa943fbb9a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7fa943fbb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fbbd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fba020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fba1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fba340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fba4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fba660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fba7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fba980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fbab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fbaca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fbae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fb9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fb91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fb9440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fb95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7fa943fa1cc0" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7fa943fa1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f9f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f9f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f9f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f9f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f9f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f9f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f9fa00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f9fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f9fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f9e020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f9e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f9e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f9e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f9e760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f9e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7fa944019800" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7fa944019800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944019b80"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944019d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944016020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440161b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944016340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440164d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944016660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440167f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944016980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944016b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944016ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944016e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944015020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440152b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944015440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7fa944003810" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7fa944003810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944003b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944003d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944002020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440021b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944002340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440024d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944002660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440027f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944002980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944002b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944002ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944002e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944001020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440012b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944001440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7fa943fee810" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7fa943fee810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943feeb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943feed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fed020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fed1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fed340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fed4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fed660"/>
        <function-ref name="get" scoped="" ref="0x7fa943fed7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fed980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fedb10"/>
        <function-ref name="set" scoped="" ref="0x7fa943fedca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fede30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fec020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fec2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fec440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7fa943fda9a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7fa943fda9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fdad20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fd9020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fd91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fd9340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fd94d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fd9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fd97f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fd9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fd9b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fd9ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fd9e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fd8020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fd81b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fd8440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fd85d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7fa943f9ccc0" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7fa943f9ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f9b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f9b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f9b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f9b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f9b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f9b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f9ba00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f9bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f9bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f9a020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f9a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f9a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f9a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f9a760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f9a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7fa943f96cb0" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7fa943f96cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f950a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f95230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f953c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f95550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f956e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f95870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f95a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f95b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f95d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f94020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f941b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f94340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f944d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f94760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f948f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7fa943f8acb0" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7fa943f8acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f890a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f89230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f893c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f89550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f896e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f89870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f89a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f89b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f89d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f88020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f881b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f88340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f884d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f88760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f888f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7fa943fd69a0" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7fa943fd69a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fd6d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fd5020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fd51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fd5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fd54d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fd5660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fd57f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fd5980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fd5b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fd5ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fd5e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fd4020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fd41b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fd4440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fd45d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7fa943f9acc0" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7fa943f9acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f990a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f99230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f993c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f99550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f996e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f99870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f99a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f99b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f99d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f98020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f981b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f98340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f984d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f98760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f988f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7fa944011810" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7fa944011810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944011b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944011d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944010020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440101b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944010340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440104d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944010660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440107f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944010980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944010b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944010ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944010e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa94400f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa94400f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa94400f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7fa943ffc810" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7fa943ffc810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ffcb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ffcd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ffb020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ffb1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ffb340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ffb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ffb660"/>
        <function-ref name="get" scoped="" ref="0x7fa943ffb7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ffb980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ffbb10"/>
        <function-ref name="set" scoped="" ref="0x7fa943ffbca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ffbe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ffa020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ffa2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ffa440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7fa943fe8810" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7fa943fe8810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fe8b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fe8d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fe7020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fe71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fe7340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fe74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fe7660"/>
        <function-ref name="get" scoped="" ref="0x7fa943fe77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fe7980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fe7b10"/>
        <function-ref name="set" scoped="" ref="0x7fa943fe7ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fe7e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fe6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fe62b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fe6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7fa943fa3cc0" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7fa943fa3cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fa20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fa2230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fa23c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fa2550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fa26e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fa2870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fa2a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943fa2b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fa2d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fa1020"/>
        <function-ref name="set" scoped="" ref="0x7fa943fa11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fa1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fa14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fa1760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fa18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7fa943f8ecb0" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7fa943f8ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f8d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f8d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f8d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f8d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f8d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f8d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f8da00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f8db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f8dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f8c020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f8c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f8c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f8c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f8c760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f8c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7fa943fe49a0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7fa943fe49a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fe4d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fe3020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fe31b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fe3340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fe34d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fe3660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fe37f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fe3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fe3b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fe3ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fe3e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fe2020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fe21b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fe2440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fe25d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7fa943fd09a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7fa943fd09a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fd0d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fce020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fce1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fce340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fce4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fce660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fce7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fce980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fceb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fceca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fcee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fcd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fcd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fcd440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fcd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7fa943fbf9a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7fa943fbf9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fbfd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fbe020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fbe1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fbe340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fbe4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fbe660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fbe7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fbe980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fbeb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fbeca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fbee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fbd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fbd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fbd440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fbd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7fa94400b810" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7fa94400b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa94400bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa94400bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa94400a020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa94400a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa94400a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa94400a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa94400a660"/>
        <function-ref name="get" scoped="" ref="0x7fa94400a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa94400a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa94400ab10"/>
        <function-ref name="set" scoped="" ref="0x7fa94400aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa94400ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944009020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440092b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944009440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7fa943fc39a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7fa943fc39a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fc3d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fc2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fc21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fc2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fc24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fc2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fc27f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fc2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fc2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fc2ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fc2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fc1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fc11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fc1440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fc15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7fa944007810" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7fa944007810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944007b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944007d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944006020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440061b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944006340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440064d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944006660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440067f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944006980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944006b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944006ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944006e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944005020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440052b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944005440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7fa943ff2810" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7fa943ff2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ff2b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ff2d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ff1020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ff11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ff1340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ff14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ff1660"/>
        <function-ref name="get" scoped="" ref="0x7fa943ff17f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ff1980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ff1b10"/>
        <function-ref name="set" scoped="" ref="0x7fa943ff1ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ff1e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ff0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ff02b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ff0440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7fa943fde9a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7fa943fde9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fded20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fdd020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fdd1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fdd340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fdd4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fdd660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fdd7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fdd980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fddb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fddca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fdde30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fdc020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fdc1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fdc440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fdc5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7fa943fc99a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7fa943fc99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fc9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fc8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fc81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fc8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fc84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fc8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fc87f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fc8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fc8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fc8ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fc8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fc7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fc71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fc7440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fc75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7fa943fb99a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7fa943fb99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fb9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fb8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fb81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fb8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fb84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fb8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fb87f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fb8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fb8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fb8ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fb8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fb7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fb71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fb7440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fb75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7fa944015810" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7fa944015810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944015b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944015d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944014020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440141b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944014340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440144d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944014660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440147f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944014980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944014b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944014ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944014e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa944013020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa9440132b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa944013440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7fa944001810" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7fa944001810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa944001b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa944001d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa944000020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa9440001b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa944000340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa9440004d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa944000660"/>
        <function-ref name="get" scoped="" ref="0x7fa9440007f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa944000980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa944000b10"/>
        <function-ref name="set" scoped="" ref="0x7fa944000ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa944000e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fff020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fff2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fff440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7fa943fec810" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7fa943fec810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fecb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fecd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943feb020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943feb1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943feb340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943feb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943feb660"/>
        <function-ref name="get" scoped="" ref="0x7fa943feb7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943feb980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943febb10"/>
        <function-ref name="set" scoped="" ref="0x7fa943febca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943febe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fea020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fea2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fea440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7fa943fd89a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7fa943fd89a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fd8d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fd7020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fd71b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fd7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fd74d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fd7660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fd77f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fd7980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fd7b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fd7ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fd7e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fd6020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fd61b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fd6440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fd65d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7fa943fabca0" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7fa943fabca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943faa0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943faa230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943faa3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943faa550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943faa6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943faa870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943faaa00"/>
        <function-ref name="get" scoped="" ref="0x7fa943faab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943faad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fa9020"/>
        <function-ref name="set" scoped="" ref="0x7fa943fa91b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fa9340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fa94d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fa9760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fa98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7fa943f94cb0" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7fa943f94cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f930a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f93230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f933c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f93550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f936e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f93870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f93a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f93b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f93d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f92020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f921b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f92340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f924d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f92760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f928f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7fa943fadcc0" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7fa943fadcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fac0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fac230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fac3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fac550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fac6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fac870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943faca00"/>
        <function-ref name="get" scoped="" ref="0x7fa943facb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943facd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fab020"/>
        <function-ref name="set" scoped="" ref="0x7fa943fab1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fab340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fab4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fab760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fab8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7fa943fd49a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7fa943fd49a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fd4d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fd3020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fd31b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fd3340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fd34d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fd3660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fd37f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943fd3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fd3b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fd3ca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943fd3e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fd2020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fd21b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fd2440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fd25d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7fa943f88cb0" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7fa943f88cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f870a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f87230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f873c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f87550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f876e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f87870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f87a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f87b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f87d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f86020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f861b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f86340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f864d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f86760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f868f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7fa943f82cc0" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7fa943f82cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f810a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f81230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f813c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f81550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f816e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f81870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f81a00"/>
        <function-ref name="get" scoped="" ref="0x7fa943f81b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f81d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f80020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f801b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f80340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f804d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f80760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f808f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7fa943fb59f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7fa943fb59f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943fb41c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943fb4350"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943fb44e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943fb4670"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943fb4800"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943fb4990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943fb4b20"/>
        <function-ref name="get" scoped="" ref="0x7fa943fb4cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943fb4e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943fb3020"/>
        <function-ref name="set" scoped="" ref="0x7fa943fb31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943fb3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943fb34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943fb3760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943fb38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f7dd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f7dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f560e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f56270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f56400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f56590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f56720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f568b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f56a40"/>
        <function-ref name="get" scoped="" ref="0x7fa943f56bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f56d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f55020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f551b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f55340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f554d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f55760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f558f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f52740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f52740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f52ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f52c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f52de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f50020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f501b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f50340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f504d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f50660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f507f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f50980"/>
        <function-ref name="set" scoped="" ref="0x7fa943f50b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f50ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f50e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f4f120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f4f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f4c100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f4c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f4c480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f4c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f4c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f4c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f4cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f4cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f4cde0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f4b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f4b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f4b340"/>
        <function-ref name="set" scoped="" ref="0x7fa943f4b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f4b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f4b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f4ba80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f4bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f48d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f48d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f470e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f47270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f47400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f47590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f47720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f478b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f47a40"/>
        <function-ref name="get" scoped="" ref="0x7fa943f47bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f47d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f46020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f461b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f46340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f464d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f46760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f468f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f43740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f43740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f43ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f43c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f43de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f42020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f421b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f42340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f424d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f42660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f427f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f42980"/>
        <function-ref name="set" scoped="" ref="0x7fa943f42b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f42ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f42e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f41120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f412b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f3e100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f3e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f3e480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f3e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f3e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f3e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f3eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f3ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f3ede0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f3d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f3d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f3d340"/>
        <function-ref name="set" scoped="" ref="0x7fa943f3d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f3d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f3d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f3da80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f3dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f3ad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f3ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f390e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f39270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f39400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f39590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f39720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f398b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f39a40"/>
        <function-ref name="get" scoped="" ref="0x7fa943f39bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f39d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f38020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f381b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f38340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f384d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f38760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f388f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f35740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f35740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f35ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f35c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f35de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f34020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f341b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f34340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f344d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f34660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f347f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f34980"/>
        <function-ref name="set" scoped="" ref="0x7fa943f34b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f34ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f34e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f33120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f332b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f30100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f30100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f30480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f30610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f307a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f30930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f30ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f30c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f30de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f2f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f2f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f2f340"/>
        <function-ref name="set" scoped="" ref="0x7fa943f2f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f2f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f2f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f2fa80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f2fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f2cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f2cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f2a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f2a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f2a400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f2a590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f2a720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f2a8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f2aa40"/>
        <function-ref name="get" scoped="" ref="0x7fa943f2abd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f2ad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f29020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f291b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f29340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f294d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f29760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f298f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f26740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f26740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f26ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f26c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f26de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f25020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f251b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f25340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f254d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f25660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f257f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f25980"/>
        <function-ref name="set" scoped="" ref="0x7fa943f25b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f25ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f25e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f24120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f242b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f21100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f21100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f21480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f21610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f217a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f21930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f21ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f21c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f21de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f20020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f201b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f20340"/>
        <function-ref name="set" scoped="" ref="0x7fa943f204d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f20660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f207f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f20a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f20c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f1dd80" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f1dd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f1c180"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f1c310"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f1c4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f1c630"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f1c7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f1c950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f1cae0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f1cc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f1ce00"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f1b020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f1b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f1b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f1b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f1b760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f1b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f18740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f18740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f18ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f18c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f18de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f17020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f171b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f17340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f174d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f17660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f177f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f17980"/>
        <function-ref name="set" scoped="" ref="0x7fa943f17b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f17ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f17e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f16120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f162b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f13100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f13100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f13480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f13610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f137a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f13930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f13ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f13c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f13de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f12020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f121b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f12340"/>
        <function-ref name="set" scoped="" ref="0x7fa943f124d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f12660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f127f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f12a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f12c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f0fd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f0fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f0e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f0e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f0e400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f0e590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f0e720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f0e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f0ea40"/>
        <function-ref name="get" scoped="" ref="0x7fa943f0ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f0ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f0d020"/>
        <function-ref name="set" scoped="" ref="0x7fa943f0d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f0d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f0d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f0d760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f0d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f0a740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f0a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f0aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f0ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f0ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f09020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f091b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f09340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f094d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f09660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f097f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f09980"/>
        <function-ref name="set" scoped="" ref="0x7fa943f09b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f09ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f09e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f08120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f082b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f04100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f04100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943f04480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943f04610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943f047a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943f04930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943f04ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943f04c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943f04de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943f03020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943f031b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943f03340"/>
        <function-ref name="set" scoped="" ref="0x7fa943f034d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943f03660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943f037f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943f03a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943f03c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943f00d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943f00d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943eff0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943eff270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943eff400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943eff590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943eff720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943eff8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943effa40"/>
        <function-ref name="get" scoped="" ref="0x7fa943effbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943effd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943efe020"/>
        <function-ref name="set" scoped="" ref="0x7fa943efe1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943efe340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943efe4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943efe760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943efe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943efb740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943efb740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943efbac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943efbc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943efbde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943efa020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943efa1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943efa340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943efa4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943efa660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943efa7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943efa980"/>
        <function-ref name="set" scoped="" ref="0x7fa943efab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943efaca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943efae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ef9120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ef92b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ef6100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ef6100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ef6480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ef6610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ef67a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ef6930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ef6ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ef6c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ef6de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943ef5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ef51b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ef5340"/>
        <function-ref name="set" scoped="" ref="0x7fa943ef54d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ef5660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ef57f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ef5a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ef5c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ef2d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ef2d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ef10e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ef1270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ef1400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ef1590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ef1720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ef18b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ef1a40"/>
        <function-ref name="get" scoped="" ref="0x7fa943ef1bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ef1d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ef0020"/>
        <function-ref name="set" scoped="" ref="0x7fa943ef01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ef0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ef04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ef0760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ef08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943eed740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943eed740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943eedac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943eedc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943eedde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943eec020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943eec1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943eec340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943eec4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943eec660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943eec7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943eec980"/>
        <function-ref name="set" scoped="" ref="0x7fa943eecb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943eecca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943eece30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943eeb120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943eeb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ee8100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ee8100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ee8480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ee8610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ee87a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ee8930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ee8ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ee8c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ee8de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943ee7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ee71b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ee7340"/>
        <function-ref name="set" scoped="" ref="0x7fa943ee74d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ee7660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ee77f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ee7a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ee7c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ee4e60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ee4e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ee2210"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ee23a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ee2530"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ee26c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ee2850"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ee29e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ee2b70"/>
        <function-ref name="get" scoped="" ref="0x7fa943ee2d00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ee1020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ee11b0"/>
        <function-ref name="set" scoped="" ref="0x7fa943ee1340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ee14d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ee1660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ee18f0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ee1a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ede9f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ede9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943eded70"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943edd020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943edd1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943edd340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943edd4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943edd660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943edd7f0"/>
        <function-ref name="get" scoped="" ref="0x7fa943edd980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943eddb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943eddca0"/>
        <function-ref name="set" scoped="" ref="0x7fa943edde30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943edc020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943edc1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943edc440"/>
        <function-ref name="clr" scoped="" ref="0x7fa943edc5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ed9460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ed9460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ed97e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ed9970"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ed9b00"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ed9c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ed9e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ed8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ed81b0"/>
        <function-ref name="get" scoped="" ref="0x7fa943ed8340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ed84d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ed8660"/>
        <function-ref name="set" scoped="" ref="0x7fa943ed87f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ed8980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ed8b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ed8da0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ed7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ed5e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ed5e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ed41c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ed4350"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ed44e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ed4670"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ed4800"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ed4990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ed4b20"/>
        <function-ref name="get" scoped="" ref="0x7fa943ed4cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ed4e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ed3020"/>
        <function-ref name="set" scoped="" ref="0x7fa943ed31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ed3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ed34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ed3760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ed38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ed0740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ed0740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ed0ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ed0c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ed0de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ecf020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ecf1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ecf340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ecf4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943ecf660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ecf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ecf980"/>
        <function-ref name="set" scoped="" ref="0x7fa943ecfb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ecfca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ecfe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ece120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ece2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ecb100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ecb100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ecb480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ecb610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ecb7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ecb930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ecbac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ecbc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ecbde0"/>
        <function-ref name="get" scoped="" ref="0x7fa943eca020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943eca1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943eca340"/>
        <function-ref name="set" scoped="" ref="0x7fa943eca4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943eca660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943eca7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ecaa80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ecac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ec7d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ec7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ec60e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ec6270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ec6400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ec6590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ec6720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ec68b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ec6a40"/>
        <function-ref name="get" scoped="" ref="0x7fa943ec6bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ec6d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ec5020"/>
        <function-ref name="set" scoped="" ref="0x7fa943ec51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ec5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ec54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ec5760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ec58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ec2740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ec2740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ec2ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ec2c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ec2de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ec1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ec11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ec1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ec14d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943ec1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ec17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ec1980"/>
        <function-ref name="set" scoped="" ref="0x7fa943ec1b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ec1ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ec1e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ec0120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ec02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ebd100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ebd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ebd480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ebd610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ebd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ebd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ebdac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ebdc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ebdde0"/>
        <function-ref name="get" scoped="" ref="0x7fa943ebb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ebb1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ebb340"/>
        <function-ref name="set" scoped="" ref="0x7fa943ebb4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ebb660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ebb7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ebba80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ebbc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943eb8d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943eb8d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943eb70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943eb7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943eb7400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943eb7590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943eb7720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943eb78b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943eb7a40"/>
        <function-ref name="get" scoped="" ref="0x7fa943eb7bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943eb7d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943eb6020"/>
        <function-ref name="set" scoped="" ref="0x7fa943eb61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943eb6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943eb64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943eb6760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943eb68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943eb3740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943eb3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943eb3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943eb3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943eb3de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943eb2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943eb21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943eb2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943eb24d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943eb2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943eb27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943eb2980"/>
        <function-ref name="set" scoped="" ref="0x7fa943eb2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943eb2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943eb2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943eb1120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943eb12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943eae100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943eae100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943eae480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943eae610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943eae7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943eae930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943eaeac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943eaec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943eaede0"/>
        <function-ref name="get" scoped="" ref="0x7fa943ead020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ead1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ead340"/>
        <function-ref name="set" scoped="" ref="0x7fa943ead4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ead660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ead7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943eada80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943eadc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943eaad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943eaad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ea90e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ea9270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ea9400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ea9590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ea9720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ea98b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ea9a40"/>
        <function-ref name="get" scoped="" ref="0x7fa943ea9bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ea9d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ea8020"/>
        <function-ref name="set" scoped="" ref="0x7fa943ea81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ea8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ea84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ea8760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ea88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ea5740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ea5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ea5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ea5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ea5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ea4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ea41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ea4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ea44d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943ea4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943ea47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943ea4980"/>
        <function-ref name="set" scoped="" ref="0x7fa943ea4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943ea4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943ea4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943ea3120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ea32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943ea0100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943ea0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ea0480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ea0610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943ea07a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ea0930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ea0ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943ea0c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943ea0de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943e9f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e9f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e9f340"/>
        <function-ref name="set" scoped="" ref="0x7fa943e9f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e9f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e9f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e9fa80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e9fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943e9cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943e9cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943e9b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943e9b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943e9b400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943e9b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943e9b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943e9b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943e9ba40"/>
        <function-ref name="get" scoped="" ref="0x7fa943e9bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e9bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e9a020"/>
        <function-ref name="set" scoped="" ref="0x7fa943e9a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e9a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e9a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e9a760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e9a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943e96740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943e96740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943e96ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943e96c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943e96de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943e95020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943e951b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943e95340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943e954d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943e95660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e957f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e95980"/>
        <function-ref name="set" scoped="" ref="0x7fa943e95b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e95ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e95e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e94120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e942b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943e91100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943e91100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943e91480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943e91610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943e917a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943e91930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943e91ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943e91c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943e91de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943e90020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e901b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e90340"/>
        <function-ref name="set" scoped="" ref="0x7fa943e904d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e90660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e907f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e90a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e90c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943e8dd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943e8dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943e8c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943e8c270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943e8c400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943e8c590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943e8c720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943e8c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943e8ca40"/>
        <function-ref name="get" scoped="" ref="0x7fa943e8cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e8cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e8b020"/>
        <function-ref name="set" scoped="" ref="0x7fa943e8b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e8b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e8b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e8b760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e8b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943e88740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943e88740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943e88ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943e88c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943e88de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943e87020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943e871b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943e87340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943e874d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943e87660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e877f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e87980"/>
        <function-ref name="set" scoped="" ref="0x7fa943e87b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e87ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e87e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e86120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e862b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943e83100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943e83100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943e83480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943e83610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943e837a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943e83930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943e83ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943e83c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943e83de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943e82020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e821b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e82340"/>
        <function-ref name="set" scoped="" ref="0x7fa943e824d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e82660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e827f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e82a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e82c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943e7fd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943e7fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943e7e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943e7e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943e7e400"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943e7e590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943e7e720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943e7e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943e7ea40"/>
        <function-ref name="get" scoped="" ref="0x7fa943e7ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e7ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e7d020"/>
        <function-ref name="set" scoped="" ref="0x7fa943e7d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e7d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e7d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e7d760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e7d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943e7a740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943e7a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943e7aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943e7ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943e7ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943e79020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943e791b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943e79340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943e794d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943e79660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e797f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e79980"/>
        <function-ref name="set" scoped="" ref="0x7fa943e79b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e79ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e79e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e78120"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e782b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fa943e75100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fa943e75100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943e75480"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943e75610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943e757a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943e75930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943e75ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943e75c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943e75de0"/>
        <function-ref name="get" scoped="" ref="0x7fa943e73020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943e731b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943e73340"/>
        <function-ref name="set" scoped="" ref="0x7fa943e734d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943e73660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943e737f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943e73a80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943e73c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa943e06d20" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa943e06d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa943e03b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943e02550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943e02090"/>
        <function-ref name="overflow" scoped="" ref="0x7fa943e02a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7fa943e01d90" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fa943e01d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa943dfebc0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943dfc590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943dfc0d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa943dfca50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fa943de8020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943de8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa943de83a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa943de8530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa943de86c0"/>
        <function-ref name="get" scoped="" ref="0x7fa943de8850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa943de89e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943de8b70"/>
        <function-ref name="getMode" scoped="" ref="0x7fa943de8d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943de7020"/>
        <function-ref name="overflow" scoped="" ref="0x7fa943de71b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa943de7340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa943de74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa943dfae50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa943dfae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa943df9ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943de9670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943de91b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa943de9b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fa943de4020" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa943de4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa943de43a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa943de4530"/>
        <function-ref name="led1On" scoped="" ref="0x7fa943de46c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa943de4850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa943de49e0"/>
        <function-ref name="get" scoped="" ref="0x7fa943de4b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa943de4d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa943de34d0"/>
        <function-ref name="set" scoped="" ref="0x7fa943de3020"/>
        <function-ref name="led0On" scoped="" ref="0x7fa943de31b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fa943de3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7fa943ddd060" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fa943ddd060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ddd3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ddd570"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ddd700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ddd890"/>
        <function-ref name="get" scoped="" ref="0x7fa943ddda20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943dddbb0"/>
        <function-ref name="set" scoped="" ref="0x7fa943dddd40"/>
        <function-ref name="clr" scoped="" ref="0x7fa943ddc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa943de0470" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa943de0470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa943de07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7fa943ddc340" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fa943ddc340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943ddc6c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943ddc850"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943ddc9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943ddcb70"/>
        <function-ref name="get" scoped="" ref="0x7fa943ddcd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943dd7020"/>
        <function-ref name="set" scoped="" ref="0x7fa943dd71b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943dd7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fa943de0a70" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa943de0a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa943de0df0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa943ddf020"/>
        <function-ref name="led1On" scoped="" ref="0x7fa943ddf1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa943ddf340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa943ddf4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943ddf660"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa943ddf7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa943ddfe30"/>
        <function-ref name="set" scoped="" ref="0x7fa943ddf980"/>
        <function-ref name="led0On" scoped="" ref="0x7fa943ddfb10"/>
        <function-ref name="led2On" scoped="" ref="0x7fa943ddfca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7fa943dd7660" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fa943dd7660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943dd79e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943dd7b70"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943dd7d00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943dd6020"/>
        <function-ref name="get" scoped="" ref="0x7fa943dd61b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943dd6340"/>
        <function-ref name="set" scoped="" ref="0x7fa943dd64d0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943dd6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7fa943de1b10" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fa943de1b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943dba020"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943dba1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943dba340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943dba4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943dba660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943dba7f0"/>
        <function-ref name="set" scoped="" ref="0x7fa943dba980"/>
        <function-ref name="clr" scoped="" ref="0x7fa943dbab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7fa943dbae70" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fa943dbae70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943db9220"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943db93b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943db9540"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943db96d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943db9860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943db99f0"/>
        <function-ref name="set" scoped="" ref="0x7fa943db9b80"/>
        <function-ref name="clr" scoped="" ref="0x7fa943db9d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7fa943db72e0" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa943db72e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa943db7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7fa943db80f0" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fa943db80f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943db8470"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943db8600"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943db8790"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943db8920"/>
        <function-ref name="get" scoped="" ref="0x7fa943db8ab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943db8c40"/>
        <function-ref name="set" scoped="" ref="0x7fa943db8dd0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943db7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fa943da32f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa943da32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943da3670"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943da3800"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943da3990"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943da3b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943da3cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943da3e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943da2020"/>
        <function-ref name="get" scoped="" ref="0x7fa943da21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943da2340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943da24d0"/>
        <function-ref name="set" scoped="" ref="0x7fa943da2660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943da27f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943da2980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943da2c10"/>
        <function-ref name="clr" scoped="" ref="0x7fa943da2da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa943db4020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa943db4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943db43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943db4530"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943db46c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943db4850"/>
        <function-ref name="get" scoped="" ref="0x7fa943db49e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943db4b70"/>
        <function-ref name="set" scoped="" ref="0x7fa943db4d00"/>
        <function-ref name="clr" scoped="" ref="0x7fa943da3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fa943d9fde0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa943d9fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943d9e180"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943d9e310"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943d9e4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943d9e630"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943d9e7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943d9e950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943d9eae0"/>
        <function-ref name="get" scoped="" ref="0x7fa943d9ec70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943d9ee00"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943d9d020"/>
        <function-ref name="set" scoped="" ref="0x7fa943d9d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943d9d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943d9d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943d9d760"/>
        <function-ref name="clr" scoped="" ref="0x7fa943d9d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa943da0b90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa943da0b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943d9f020"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943d9f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943d9f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943d9f4d0"/>
        <function-ref name="get" scoped="" ref="0x7fa943d9f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943d9f7f0"/>
        <function-ref name="set" scoped="" ref="0x7fa943d9f980"/>
        <function-ref name="clr" scoped="" ref="0x7fa943d9fb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fa943d99930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fa943d99930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943d99cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943d99e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943d98020"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943d981b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943d98340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943d984d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943d98660"/>
        <function-ref name="get" scoped="" ref="0x7fa943d987f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943d98980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943d98b10"/>
        <function-ref name="set" scoped="" ref="0x7fa943d98ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943d98e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943d97020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943d972b0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943d97440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fa943d9b710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fa943d9b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943d9ba90"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943d9bc20"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943d9bdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943d99020"/>
        <function-ref name="get" scoped="" ref="0x7fa943d991b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943d99340"/>
        <function-ref name="set" scoped="" ref="0x7fa943d994d0"/>
        <function-ref name="clr" scoped="" ref="0x7fa943d99660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa943777020" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943777020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa9437773a0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa943777530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7fa943770440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fa943770440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa9437707c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fa943769760" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa943769760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa943769ae0"/>
        <function-ref name="configure" scoped="" ref="0x7fa943769c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7fa943770a50" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa943770a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa943770dd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa94376f020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa94376f1b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa94376f340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa94376f4d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa94376f660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa94376f7f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa94376f980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa94376fb10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa94376fca0"/>
        <function-ref name="getData" scoped="" ref="0x7fa94376fe30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa94376e020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa94376e1b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa94376e440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa94376e5d0"/>
        <function-ref name="getIV" scoped="" ref="0x7fa94376e760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa94376e8f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa94376ea80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa94376ec10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa94376eda0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa94376d020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa94376d1b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa94376d340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa94376d4d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa94376d660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa94376d9f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa94376db80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa94376dd10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa94376c020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa94376c1b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa94376c340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa94376c4d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa94376c660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa94376c7f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa94376c980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa94376cb10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa94376cca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa94376ce30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa94376b020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa94376b1b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa94376b340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa94376b4d0"/>
        <function-ref name="setData" scoped="" ref="0x7fa94376b660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa94376b7f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa94376b980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa94376bb10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa94376bca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa94376be30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa94376a020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa94376a5b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa94376a740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa94376a8d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa94376aa60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa94376abf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa94376ad80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa943769020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa9437691b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa943769340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa9437694d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fa943771c10" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fa943771c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa943770020"/>
        <function-ref name="txDone" scoped="" ref="0x7fa9437701b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa943778340" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa943778340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa9437786c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa943778850"/>
        <function-ref name="request" scoped="" ref="0x7fa9437789e0"/>
        <function-ref name="granted" scoped="" ref="0x7fa943778b70"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa943778d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fa943776020" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fa943776020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa9437763a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa943776530"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa9437766c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa943776850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa9437769e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa943776b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa943776d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa943774020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa9437741b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa943774340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa9437744d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa943774660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa9437747f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa943774a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa943774c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa943774da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa943773020"/>
        <function-ref name="isUart" scoped="" ref="0x7fa9437731b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa943773340"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa9437734d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa943773660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa9437737f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa943773980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa943773b10"/>
        <function-ref name="getMode" scoped="" ref="0x7fa943773ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa943772220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa9437723b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa943772540"/>
        <function-ref name="tx" scoped="" ref="0x7fa9437726d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa943772860"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa9437729f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa943772b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa943772d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa943771020"/>
        <function-ref name="rx" scoped="" ref="0x7fa9437711b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa943771340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa9437714d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa943771660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa9437717f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa943771980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fa9437777c0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa9437777c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa943777b40"/>
        <function-ref name="userId" scoped="" ref="0x7fa943777cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa943d6a2c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943d6a2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa943d6a640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa943d6a7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fa943d698a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa943d698a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa943d69c20"/>
        <function-ref name="configure" scoped="" ref="0x7fa943d69db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fa943d6e4d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fa943d6e4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa943d6e850"/>
        <function-ref name="txDone" scoped="" ref="0x7fa943d6e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa943d6b020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa943d6b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa943d6b3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa943d6b530"/>
        <function-ref name="request" scoped="" ref="0x7fa943d6b6c0"/>
        <function-ref name="granted" scoped="" ref="0x7fa943d6b850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa943d6b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fa943d6d3f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa943d6d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa943d6d770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fa943d6aad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa943d6aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa943d6ae50"/>
        <function-ref name="userId" scoped="" ref="0x7fa943d69020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7fa943d54bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa943d54bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa943d53020"/>
        <function-ref name="userId" scoped="" ref="0x7fa943d531b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fa943d67d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fa943d67d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa943d66180"/>
        <function-ref name="txDone" scoped="" ref="0x7fa943d66310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7fa943d545e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7fa943d545e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa943d54960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fa943d66710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fa943d66710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fa943d66ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7fa943d66d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7fa943d66d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fa943d54180"/>
        <function-ref name="txDone" scoped="" ref="0x7fa943d54310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa943cda020" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa943cda020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa943cda3c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa943cda550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fa943cd9cd0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa943cd9cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa943cd80a0"/>
        <function-ref name="configure" scoped="" ref="0x7fa943cd8230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fa943cda7a0" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fa943cda7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa943cdab20"/>
        <function-ref name="requested" scoped="" ref="0x7fa943cdacb0"/>
        <function-ref name="granted" scoped="" ref="0x7fa943cdae40"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa943cd9020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa943cd91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa943cdb210" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa943cdb210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa943cdb5b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa943cdb740"/>
        <function-ref name="request" scoped="" ref="0x7fa943cdb8d0"/>
        <function-ref name="granted" scoped="" ref="0x7fa943cdba60"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa943cdbbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fa943cd9400" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa943cd9400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa943cd9780"/>
        <function-ref name="userId" scoped="" ref="0x7fa943cd9910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa9433a1e50" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa9433a1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa9433a0210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7fa9433a04a0" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7fa9433a04a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fa9433a0820"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fa9433a09b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fa9433a0b40"/>
        <function-ref name="dequeue" scoped="" ref="0x7fa9433a0cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fa94339c530" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fa94339c530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fa94339c8d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa94339ca60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fa94339a270" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fa94339a270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fa94339a610"/>
        <function-ref name="configure" scoped="" ref="0x7fa94339a7a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fa94339aa30" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fa94339aa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fa94339adb0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fa943399020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fa9433991b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fa943399340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fa94339ccb0" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fa94339ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa94339b0a0"/>
        <function-ref name="requested" scoped="" ref="0x7fa94339b230"/>
        <function-ref name="granted" scoped="" ref="0x7fa94339b3c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa94339b550"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fa94339b6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa943399590" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa943399590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa943399910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa943399aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7fa943399c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa943399dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa943398020"/>
        <function-ref name="get" scoped="" ref="0x7fa9433981b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa943398340"/>
        <function-ref name="led0On" scoped="" ref="0x7fa943398980"/>
        <function-ref name="set" scoped="" ref="0x7fa943398660"/>
        <function-ref name="led2On" scoped="" ref="0x7fa9433984d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa9433987f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fa94339d740" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa94339d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa94339dae0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa94339dc70"/>
        <function-ref name="request" scoped="" ref="0x7fa94339de00"/>
        <function-ref name="granted" scoped="" ref="0x7fa94339c020"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa94339c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fa94339b930" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fa94339b930"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fa94339bcb0"/>
        <function-ref name="userId" scoped="" ref="0x7fa94339be40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fa943398c50" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7fa943398c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa943397020"/>
        <function-ref name="runTask" scoped="" ref="0x7fa9433971b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7fa943cd1d70" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fa943cd1d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa943cce180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa943cce310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa943cce4a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa943cce630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa943cce7c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa943cce950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa943cceae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa943ccec70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa943ccee00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa943ccd020"/>
        <function-ref name="getData" scoped="" ref="0x7fa943ccd1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa943ccd340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa943ccd4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa943ccd760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa943ccd8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7fa943ccda80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa943ccdc10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa943ccdda0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa943ccc020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa943ccc1b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa943ccc340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa943ccc4d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa943ccc660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa943ccc7f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa943ccc980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa943cccd10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa943ccb020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa943ccb1b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa943ccb340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa943ccb4d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa943ccb660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa943ccb7f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa943ccb980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa943ccbb10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa943ccbca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa943ccbe30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa943cca020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa943cca1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa943cca340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa943cca4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa943cca660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa943cca7f0"/>
        <function-ref name="setData" scoped="" ref="0x7fa943cca980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa943ccab10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa943ccaca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa943ccae30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa943cc9020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa943cc91b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa943cc9340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa943cc98d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa943cc9a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa943cc9bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa943cc9d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa943cc8020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa943cc81b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa943cc8340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa943cc84d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa943cc8660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa943cc87f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7fa943cbe700" loc="41:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7fa943cbe700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fa943cbea80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fa943cbec10"/>
        <function-ref name="setUctl" scoped="" ref="0x7fa943cbeda0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fa943cbd020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fa943cbd1b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fa943cbd340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fa943cbd4d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fa943cbd660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fa943cbd7f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fa943cbd980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fa943cbdb10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fa943cbdca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fa943cbde30"/>
        <function-ref name="getUbr" scoped="" ref="0x7fa943cbc120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fa943cbc2b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fa943cbc440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fa943cbc5d0"/>
        <function-ref name="isUart" scoped="" ref="0x7fa943cbc760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fa943cbc8f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fa943cbca80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fa943cbcc10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fa943cbcda0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fa943cbb020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fa943cbb1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa943cbb340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fa943cbb6d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fa943cbb860"/>
        <function-ref name="setUbr" scoped="" ref="0x7fa943cbb9f0"/>
        <function-ref name="tx" scoped="" ref="0x7fa943cbbb80"/>
        <function-ref name="getUctl" scoped="" ref="0x7fa943cbbd10"/>
        <function-ref name="disableUart" scoped="" ref="0x7fa943cba020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fa943cba1b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fa943cba340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fa943cba4d0"/>
        <function-ref name="rx" scoped="" ref="0x7fa943cba660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fa943cba7f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fa943cba980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fa943cbab10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fa943cbaca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fa943cbae30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fa943cb71f0" loc="43:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fa943cb71f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943cb7570"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943cb7700"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943cb7890"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943cb7a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943cb7bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943cb7d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943cb6020"/>
        <function-ref name="get" scoped="" ref="0x7fa943cb61b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943cb6340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943cb64d0"/>
        <function-ref name="set" scoped="" ref="0x7fa943cb6660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943cb67f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943cb6980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943cb6c10"/>
        <function-ref name="clr" scoped="" ref="0x7fa943cb6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7fa943cc7940" loc="39:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fa943cc7940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fa943cc7cc0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fa943cc7e50"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fa943cc4020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fa943cc41b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fa943cc4340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fa943cc44d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fa943cc4660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fa943cc47f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa943cc4980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fa943cc4b10"/>
        <function-ref name="getData" scoped="" ref="0x7fa943cc4ca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fa943cc4e30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fa943cc3020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fa943cc32b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fa943cc3440"/>
        <function-ref name="getIV" scoped="" ref="0x7fa943cc35d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fa943cc3760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fa943cc38f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fa943cc3a80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fa943cc3c10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fa943cc3da0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fa943cc2020"/>
        <function-ref name="isI2C" scoped="" ref="0x7fa943cc21b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fa943cc2340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fa943cc24d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fa943cc2860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fa943cc29f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fa943cc2b80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fa943cc2d10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fa943cc1020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fa943cc11b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fa943cc1340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fa943cc14d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fa943cc1660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fa943cc17f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fa943cc1980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fa943cc1b10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fa943cc1ca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fa943cc1e30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fa943cc0020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fa943cc01b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fa943cc0340"/>
        <function-ref name="setData" scoped="" ref="0x7fa943cc04d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fa943cc0660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fa943cc07f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fa943cc0980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fa943cc0b10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fa943cc0ca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fa943cc0e30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fa943cbf420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fa943cbf5b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fa943cbf740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fa943cbf8d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fa943cbfa60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fa943cbfbf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fa943cbfd80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fa943cbe020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fa943cbe1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fa943cbe340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fa943cb9250" loc="42:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fa943cb9250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fa943cb95d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fa943cb9760"/>
        <function-ref name="setResistor" scoped="" ref="0x7fa943cb98f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fa943cb9a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fa943cb9c10"/>
        <function-ref name="getResistor" scoped="" ref="0x7fa943cb9da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fa943cb8020"/>
        <function-ref name="get" scoped="" ref="0x7fa943cb81b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fa943cb8340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fa943cb84d0"/>
        <function-ref name="set" scoped="" ref="0x7fa943cb8660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fa943cb87f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fa943cb8980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fa943cb8c10"/>
        <function-ref name="clr" scoped="" ref="0x7fa943cb8da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7fa943c07920" loc="37:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fa943c07920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fa943c07ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fa943c06020" loc="38:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fa943c06020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fa943c063a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fa943c06530"/>
        <function-ref name="request" scoped="" ref="0x7fa943c066c0"/>
        <function-ref name="granted" scoped="" ref="0x7fa943c06850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fa943c069e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fa943c070c0" loc="36:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fa943c070c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fa943c07440"/>
        <function-ref name="stop" scoped="" ref="0x7fa943c075d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7fa943bf2a30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7fa943bf2a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fa943bf2db0"/>
        <function-ref name="offset" scoped="" ref="0x7fa943bef020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fa943bef1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7fa943bd4bf0" loc="43:../../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fa943bd4bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fa943bafae0"/>
        <function-ref name="enqueue" scoped="" ref="0x7fa943bae880"/>
        <function-ref name="element" scoped="" ref="0x7fa943bac020"/>
        <function-ref name="full" scoped="" ref="0x7fa943bb0ce0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fa943baf660"/>
        <function-ref name="dequeue" scoped="" ref="0x7fa943bae1d0"/>
        <function-ref name="empty" scoped="" ref="0x7fa943bb0860"/>
        <function-ref name="size" scoped="" ref="0x7fa943baf1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fa943ba4a20" loc="93:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fa943ba4a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7fa943ba5920"/>
        <function-ref name="enqueue" scoped="" ref="0x7fa943ba26d0"/>
        <function-ref name="element" scoped="" ref="0x7fa943ba2d40"/>
        <function-ref name="full" scoped="" ref="0x7fa943ba6af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7fa943ba54a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fa943ba2020"/>
        <function-ref name="empty" scoped="" ref="0x7fa943ba6670"/>
        <function-ref name="size" scoped="" ref="0x7fa943ba5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fa943ba1440" loc="94:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fa943ba1440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fa943ba17c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa943ba1950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa943ba1ae0"/>
        <function-ref name="cancel" scoped="" ref="0x7fa943ba1c70"/>
        <function-ref name="sendDone" scoped="" ref="0x7fa943ba1e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7fa943ba00c0" loc="95:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fa943ba00c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa943ba0440"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fa943ba05d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fa943ba0760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fa943ba08f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fa943ba0a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7fa943b9a500" loc="114:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="retrySend" scoped="" ref="0x7fa943b9a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa943b9a880"/>
        <function-ref name="runTask" scoped="" ref="0x7fa943b9aa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa943baba60" loc="89:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa943baba60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa943babde0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa943ba0d00" loc="96:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa943ba0d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa943b9f0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa943b9f230"/>
        <function-ref name="led1On" scoped="" ref="0x7fa943b9f3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa943b9f550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa943b9f6e0"/>
        <function-ref name="get" scoped="" ref="0x7fa943b9f870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa943b9fa00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa943b9e1b0"/>
        <function-ref name="set" scoped="" ref="0x7fa943b9fb90"/>
        <function-ref name="led0On" scoped="" ref="0x7fa943b9fd20"/>
        <function-ref name="led2On" scoped="" ref="0x7fa943b9e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7fa943ba41a0" loc="90:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7fa943ba41a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fa943ba4520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7fa943b83be0" loc="43:../../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7fa943b83be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fa943b80020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa943b7d020" loc="94:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa943b7d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa943b7d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7fa943b7d680" loc="95:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7fa943b7d680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7fa943b7da00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fa943b82c80" loc="48:TestPrintfC.nc">
      <component-ref qname="TestPrintfC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fa943b82c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fa943b770a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fa943b680f0" loc="50:TestPrintfC.nc">
      <component-ref qname="TestPrintfC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fa943b680f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fa943b68470"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fa943b68600"/>
        <function-ref name="led1On" scoped="" ref="0x7fa943b68790"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fa943b68920"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fa943b68ab0"/>
        <function-ref name="get" scoped="" ref="0x7fa943b68c40"/>
        <function-ref name="led1Off" scoped="" ref="0x7fa943b68dd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fa943b674d0"/>
        <function-ref name="set" scoped="" ref="0x7fa943b67020"/>
        <function-ref name="led0On" scoped="" ref="0x7fa943b671b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fa943b67340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fa943b6dda0" loc="49:TestPrintfC.nc">
      <component-ref qname="TestPrintfC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa943b6dda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa943b6a390"/>
        <function-ref name="fired" scoped="" ref="0x7fa943b75970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa943b6b720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa943b6b2a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fa943b6ac90"/>
        <function-ref name="gett0" scoped="" ref="0x7fa943b6a810"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa943b75df0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa943b769d0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa943b6bd30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa943b75020"/>
        <function-ref name="stop" scoped="" ref="0x7fa943b754f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7fa943b5cd50" loc="39:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fa943b5cd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fa943b59100"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fa943b594a0" loc="40:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7fa943b594a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fa943b59820"/>
        <function-ref name="stopDone" scoped="" ref="0x7fa943b599b0"/>
        <function-ref name="start" scoped="" ref="0x7fa943b59b40"/>
        <function-ref name="stop" scoped="" ref="0x7fa943b59cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa9439c3370" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TestPrintfAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa9439c3370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa9439c0870"/>
        <function-ref name="fired" scoped="" ref="0x7fa9439c2e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa9439c1c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa9439c1780"/>
        <function-ref name="getdt" scoped="" ref="0x7fa9439be1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fa9439c0cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa9439c1300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa9439c2020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa9439c0260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa9439c24f0"/>
        <function-ref name="stop" scoped="" ref="0x7fa9439c29c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fa943b491d0" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fa943b491d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa943b46630"/>
        <function-ref name="fired" scoped="" ref="0x7fa943b48c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa943b479d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa943b47550"/>
        <function-ref name="getdt" scoped="" ref="0x7fa943b44020"/>
        <function-ref name="gett0" scoped="" ref="0x7fa943b46ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa943b470d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa943b49dc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa943b46020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa943b482e0"/>
        <function-ref name="stop" scoped="" ref="0x7fa943b487b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fa943b41c30" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fa943b41c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa943b3c110"/>
        <function-ref name="fired" scoped="" ref="0x7fa943b3e6a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa943b3d4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa943b3d020"/>
        <function-ref name="getdt" scoped="" ref="0x7fa943b3ca10"/>
        <function-ref name="gett0" scoped="" ref="0x7fa943b3c590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa943b3eb20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa943b40860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa943b3dab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa943b40d30"/>
        <function-ref name="stop" scoped="" ref="0x7fa943b3e220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fa943b37500" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fa943b37500"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa943b39170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa943b44e50" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa943b44e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa943b41210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa943a5f870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa943a5f870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa943a5c090"/>
        <function-ref name="fired" scoped="" ref="0x7fa943a5d090"/>
        <function-ref name="startAt" scoped="" ref="0x7fa943a5da10"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa943a5d550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa943a5c550"/>
        <function-ref name="start" scoped="" ref="0x7fa943a5e6a0"/>
        <function-ref name="stop" scoped="" ref="0x7fa943a5ebb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa943a5f020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa943a5f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa943a5f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa94334da00" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa94334da00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa94334a2a0"/>
        <function-ref name="fired" scoped="" ref="0x7fa94334b2a0"/>
        <function-ref name="startAt" scoped="" ref="0x7fa94334bc20"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa94334b760"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa94334a760"/>
        <function-ref name="start" scoped="" ref="0x7fa94334c890"/>
        <function-ref name="stop" scoped="" ref="0x7fa94334cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa94334d1b0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa94334d1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa94334d530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fa943335da0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943335da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa943334180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa943334310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa9433344a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa943334630"/>
        <function-ref name="fired" scoped="" ref="0x7fa9433347c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fa943337450" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943337450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa9433377d0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa943337960"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa943337af0"/>
        <function-ref name="get" scoped="" ref="0x7fa943337c80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa943337e10"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943336020"/>
        <function-ref name="getMode" scoped="" ref="0x7fa9433361b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943336340"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9433364d0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa943336660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa9433367f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fa943336a80" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943336a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa943336e00"/>
        <function-ref name="getControl" scoped="" ref="0x7fa943335020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa9433351b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa943335340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa9433354d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa943335660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa9433357f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa943335980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa943335b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fa943b143f0" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa943b143f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa943b14770"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa943b14900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa943b14a90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa943b14c20"/>
        <function-ref name="fired" scoped="" ref="0x7fa943b14db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fa943b1bcd0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa943b1bcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa943b180a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa943b18230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa943b183c0"/>
        <function-ref name="get" scoped="" ref="0x7fa943b18550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa943b186e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943b18870"/>
        <function-ref name="getMode" scoped="" ref="0x7fa943b18a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943b18b90"/>
        <function-ref name="overflow" scoped="" ref="0x7fa943b18d20"/>
        <function-ref name="setMode" scoped="" ref="0x7fa943b17020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa943b171b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fa943b17a40" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa943b17a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa943b17dc0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa943b16020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa943b161b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa943b16340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa943b164d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa943b16660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa943b167f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa943b16980"/>
        <function-ref name="setControl" scoped="" ref="0x7fa943b16b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7fa94332ba80" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fa94332ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fa94332be00"/>
        <function-ref name="setEvent" scoped="" ref="0x7fa94332a020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fa94332a1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fa94332a340"/>
        <function-ref name="fired" scoped="" ref="0x7fa94332a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fa94332d190" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fa94332d190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fa94332d510"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fa94332d6a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa94332d830"/>
        <function-ref name="get" scoped="" ref="0x7fa94332d9c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa94332db50"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa94332dce0"/>
        <function-ref name="getMode" scoped="" ref="0x7fa94332de70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa94332c030"/>
        <function-ref name="overflow" scoped="" ref="0x7fa94332c1c0"/>
        <function-ref name="setMode" scoped="" ref="0x7fa94332c350"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fa94332c4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa943331020" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa943331020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa94332e870"/>
        <function-ref name="fired" scoped="" ref="0x7fa943330840"/>
        <function-ref name="startAt" scoped="" ref="0x7fa94332e220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa943330d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa94332ed30"/>
        <function-ref name="start" scoped="" ref="0x7fa943331e30"/>
        <function-ref name="stop" scoped="" ref="0x7fa943330380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fa943332660" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fa943332660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fa9433329e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7fa94332c770" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fa94332c770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fa94332caf0"/>
        <function-ref name="getControl" scoped="" ref="0x7fa94332cc80"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fa94332ce10"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fa94332b020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fa94332b1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fa94332b340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fa94332b4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fa94332b660"/>
        <function-ref name="setControl" scoped="" ref="0x7fa94332b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa943ac3b70" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa943ac3b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa943ac09b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943abf360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943ac0e70"/>
        <function-ref name="overflow" scoped="" ref="0x7fa943abf820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fa943a9e0f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7fa943a9e0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa943a9c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943a9c9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943a9c4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fa943a9ce60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fa943abbcf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa943abbcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa943aa0b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943a9f550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943a9f090"/>
        <function-ref name="overflow" scoped="" ref="0x7fa943a9fa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fa943348c90" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa943348c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa9433444e0"/>
        <function-ref name="fired" scoped="" ref="0x7fa9433464e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fa943346e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa9433469a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa9433449a0"/>
        <function-ref name="start" scoped="" ref="0x7fa943347ac0"/>
        <function-ref name="stop" scoped="" ref="0x7fa943346020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fa943341410" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7fa943341410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa944184950"/>
            <typename><typedef-ref name="T32khz" ref="0x7fa944184cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa94333ec20"/>
        <function-ref name="fired" scoped="" ref="0x7fa94333fc20"/>
        <function-ref name="startAt" scoped="" ref="0x7fa94333e5d0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa94333e110"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa94333d110"/>
        <function-ref name="start" scoped="" ref="0x7fa94333f250"/>
        <function-ref name="stop" scoped="" ref="0x7fa94333f760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa943343060" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa943343060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa943343e70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa943342820"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa943342360"/>
        <function-ref name="overflow" scoped="" ref="0x7fa943342ce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7fa943a2a9c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7fa943a2a9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa943a2ad40"/>
        <function-ref name="runTask" scoped="" ref="0x7fa943a29020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fa943a2e850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fa943a2e850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa943a2a090"/>
        <function-ref name="fired" scoped="" ref="0x7fa943a2c090"/>
        <function-ref name="startAt" scoped="" ref="0x7fa943a2ca10"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa943a2c550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fa943a2a550"/>
        <function-ref name="start" scoped="" ref="0x7fa943a2d6a0"/>
        <function-ref name="stop" scoped="" ref="0x7fa943a2dbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa943a332f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa943a332f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa943a2f870"/>
        <function-ref name="fired" scoped="" ref="0x7fa943a32e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa943a31c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa943a31780"/>
        <function-ref name="getdt" scoped="" ref="0x7fa943a2e1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fa943a2fcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa943a31300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa943a32020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa943a2f260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa943a324f0"/>
        <function-ref name="stop" scoped="" ref="0x7fa943a329c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7fa9439d9a00" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7fa9439d9a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fa9439d9d80"/>
        <function-ref name="runTask" scoped="" ref="0x7fa9439d8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7fa9439de640" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7fa9439de640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa9439dac40"/>
        <function-ref name="fired" scoped="" ref="0x7fa9439db1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa9439da020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa9439dbae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fa9439d9590"/>
        <function-ref name="gett0" scoped="" ref="0x7fa9439d9110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa9439db660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa9439dd390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa9439da630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa9439dd860"/>
        <function-ref name="stop" scoped="" ref="0x7fa9439ddd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fa9439e4150" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fa9439e4150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fa9439e0700"/>
        <function-ref name="fired" scoped="" ref="0x7fa9439e3c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fa9439e1a50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fa9439e15b0"/>
        <function-ref name="getdt" scoped="" ref="0x7fa9439de090"/>
        <function-ref name="gett0" scoped="" ref="0x7fa9439e0ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fa9439e1110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fa9439e4d60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fa9439e00d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fa9439e32a0"/>
        <function-ref name="stop" scoped="" ref="0x7fa9439e3790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fa9439d6790" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fa9439d6790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa9439d53f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fa9439d5a60" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fa9439d5a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fa9441841a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7fa944184510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fa9439ca890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fa9439c9260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fa9439cad50"/>
        <function-ref name="overflow" scoped="" ref="0x7fa9439c9720"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fa94466ddc0" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7fa94466ea10" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7fa944625740" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7fa944628990" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7fa944625020" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7fa9446282b0" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7fa944627120" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7fa9446294d0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7fa944629bb0" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7fa944627840" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7fa9449ab020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7fa944c6c3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7fa9445d4500" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fa9445d4280" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7fa9445d99c0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fa94461d5a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fa94461c020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fa9445d4d70" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7fa9445d2c80" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7fa9445d5b00" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fa9445d24f0" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7fa9445d6190" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7fa9445d6920" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7fa9445d5390" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fa94461d5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fa94461c020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fa9445d5110" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fa94461d5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fa94461c020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fa9445c6560" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7fa9445c4ca0" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7fa9445c4a20" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fa9445c29d0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fa9445c2750" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fa9445c4270" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fa9445c5940" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7fa9445c5020" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fa9445c6c90" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fa9445cf890" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7fa9445cc2a0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fa9445cc020" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7fa9445ccc80" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fa9445cca00" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7fa9445cb6a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fa9445cb420" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fa9445cbd90" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fa9445dc120" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fa9445dba10" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7fa9445db790" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fa9445dc850" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fa9445e0350" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fa9445db020" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fa9445df270" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fa9445de9e0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fa9445e0ae0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fa9445df980" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7fa9445de2e0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fa9445de060" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7fa9445da450" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7fa9445da1d0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fa94459d1f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7fa9446fd7f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7fa9446fa020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fa9446fd020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7fa944b85810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fa944d2b020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7fa944d2a020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7fa944d2b790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7fa944d1f270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7fa944d1fac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fa944485bb0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa944685d10"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fa944485260" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa944685d10"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fa9444855e0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa944485910" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fa944480620" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944480020" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa944480350" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fa94447f6d0" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fa9444832a0" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944483020" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fa9444827f0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944482210" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fa944482560" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fa94447b020" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944487c60" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7fa94447a110" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa94447be10" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fa944476490" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944477e50" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa9444761c0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fa944477560" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7fa9444785e0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944478020" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa944478350" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7fa944465d30" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fa944685930"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa944465ab0" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7fa944470a10" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fa944685d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa944470790" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7fa944486e50" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fa944685d10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fa944472950" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fa944685d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa9444726d0" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fa94446d3a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa944685d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa944471d70" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fa94446d110" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa944685d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fa94446fe50" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa944685d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa94446f870" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fa94446fbc0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fa944685d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7fa94446a810" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa94446a590" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7fa944467b90" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa9444675e0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7fa944467900" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fa944685550"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fa94446c600" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa94446c380" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7fa9444642f0" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fa944685930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fa944466cf0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fa944464060" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fa944685930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7fa944463190" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fa944685930"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7fa944460ad0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944460850" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7fa94445ecd0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa94445ea50" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7fa94445c020" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa94445fce0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fa9444565e0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944456020" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa944456350" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fa944451bb0" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa9444515b0" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa9444518e0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fa944453d20" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fa944454900" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944454680" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fa944452e00" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944452820" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fa944452b70" loc="100:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7fa9443e5ab0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fa9443e5830" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7fa9443e3020" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fa9443e4d30" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fa9443e8d60" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fa9443e4350" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7fa9443df410" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
              <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa9443e2a80" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7fa9443e2dd0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa9443df130" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7fa9443d5270" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7fa9443d5a20" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7fa9443d4270" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7fa9443d31f0" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7fa9443d1940" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fa9443d0190" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7fa9443d4a00" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fa9443d0d00" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7fa9443d0a80" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7fa9443d6a60" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7fa9443d39d0" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7fa9443d1190" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7fa944367020" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa944368960" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7fa944368ce0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7fa94436a020" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7fa944368020" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fa94436a8b0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fa944675720"/>
                <typename><typedef-ref name="message_t" ref="0x7fa944674d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7fa94436ac20" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fa94434da40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fa94434a270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7fa944348070" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7fa94434c8e0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7fa94435db20" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7fa944351020" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7fa944350c20" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa9443509a0" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7fa9443518a0" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7fa9443526d0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa944352450" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7fa94434f4b0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7fa944350190" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7fa94435a0e0" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7fa94435aa10" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7fa94435c720" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7fa94435c4a0" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7fa9443595c0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fa944359340" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7fa9443577a0" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7fa944356400" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa944356180" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7fa944354020" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fa944356c50" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fa944222dd0" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fa944222800" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa944222b40" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7fa94421bac0" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fa94421b840" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fa94421a930" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fa94421a360" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa94421a6a0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7fa94421c740" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7fa9442172c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fa944218920" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa944218c60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fa944217020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7fa94421b070" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fa94421e720" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fa94421fdb0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fa94421e130" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fa94421e480" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fa9441f75b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fa9441f7330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7fa9441f7df0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fa9441f6cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fa9441f6700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7fa9441f6a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7fa9441f4b50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7fa9441a1ae0" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fa94419a4e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7fa944197890" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa9441c0e70"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fa9441bf2b0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fa94419e350" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7fa94419f350" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fa9441a2980" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fa94419fb40" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fa94419edb0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7fa94418f020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fa944190750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7fa944188d70" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa944188af0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7fa944188350" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7fa94415f390" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7fa94416a020" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7fa94417ade0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa9441efc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fa9441ee4f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fa94417ab60" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa9441efc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fa9441ee4f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7fa94416d0e0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7fa9441742a0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa9441eac30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fa9441e94f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fa944174020" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa9441eac30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fa9441e94f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7fa944164750" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7fa944161cf0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7fa944176830" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa9441edb60"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7fa9441eb390"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7fa944174a90" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa9441eac30"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7fa9441e94f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7fa944171830" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7fa9441715b0" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7fa944172e40" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7fa944164020" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7fa944176040" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa9441edb60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fa9441eb390"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fa944177da0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa9441edb60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fa9441eb390"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7fa944173c80" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7fa944164e80" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7fa944172690" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7fa944172410" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7fa94416e190" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7fa94416e910" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7fa944165070" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7fa944168020" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7fa94416c070" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7fa9441657b0" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7fa94416a800" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7fa9441635c0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fa94416f070" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fa9441f8320"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7fa9441f0320"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7fa944163d60" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7fa944160bd0" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7fa9441734d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7fa944173250" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7fa94415fd30" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa94415fab0" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7fa944177600" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fa9441efc50"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7fa9441ee4f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7fa94416d850" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7fa944169020" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7fa944166800" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa9441c0e70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fa9441bf2b0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fa944166580" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa9441c0e70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fa9441bf2b0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7fa944168af0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fa9441d2020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fa9441d2440"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fa944168870" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fa9441d2020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fa9441d2440"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7fa94415e730" loc="231:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7fa944161570" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7fa94416f880" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7fa944160480" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7fa944169790" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7fa94416c850" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa944159ce0" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa944159ce0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fa944156020" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa944156020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fa944156940" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa944156020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fa944155a50" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fa9441551f0" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fa9441541f0" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fa9440e0930" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fa9440a2a50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fa9440a11f0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7fa94409db10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fa94409d890" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fa9440a32d0" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fa94409f0e0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7fa94409c490" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fa9440a1930" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fa9440a22b0" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7fa94409e7c0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7fa9440a3a70" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fa9440a5420" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7fa94409f860" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7fa94409d020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7fa94409e070" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fa9440a5b50" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7fa9440b6780" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7fa9440c9c90" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7fa9440bc020" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fa9440bdca0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7fa9440d0390" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7fa9440b97a0" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7fa9440c1020" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7fa9440cada0" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7fa9440c7b70" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fa9440cbd40" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7fa9440cbac0" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7fa9440cc270" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7fa9440c5900" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7fa9440bb020" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7fa9440b6020" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7fa9440bd560" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7fa9440b11f0" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7fa9440ad880" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7fa9440cf270" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7fa9440c5190" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7fa9440c3a90" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7fa9440ca650" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7fa9440d2190" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7fa9440bed40" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fa9440beac0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7fa9440d69f0" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7fa9440b9020" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7fa9440b4020" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7fa9440af9a0" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7fa9440ad120" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7fa9440b8790" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7fa9440b4750" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7fa9440bc7b0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7fa9440b21f0" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7fa9440cf990" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7fa9440c01f0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7fa9440b3630" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7fa9440b7790" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7fa9440c2760" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7fa9440c24e0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7fa9440ae190" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7fa9440be390" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7fa9440b8020" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7fa9440d2c10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa9441acb90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7fa9441aa020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fa9440d2990" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fa9441acb90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7fa9441aa020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7fa9440c6a00" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7fa9440cea80" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fa9440ce800" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7fa9440c32a0" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fa9440c3020" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7fa9440b29c0" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7fa9440cb3b0" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7fa9440ce120" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7fa9440c0bb0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7fa9440c0930" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fa945705520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7fa9440d0ac0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7fa9440b4e70" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7fa9440b7020" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7fa9440bb790" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7fa9440c19f0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7fa9440c1770" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7fa9440c62b0" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7fa9440c9530" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7fa9440ae900" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7fa9440ccbf0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fa9440cc970" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7fa9440b19b0" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7fa9440c7420" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7fa9440af1f0" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fa943dd9730" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fa943dd9e60" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fa943ddb880" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fa943dd8cf0" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fa943dd9020" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fa943dd85b0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fa943ddea90" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fa943ddb190" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7fa943d7e020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7fa943d7e880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fa943d49e00" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7fa943d47020" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fa943d49570" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fa943d486d0" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fa943d47950" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7fa943d3b020" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fa943d42090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fa943d3dd20" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fa943d42090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7fa943d3e020" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7fa943d3eb20" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fa943d42090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fa943d3e8a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fa943d42090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fa943d3d470" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7fa943d42090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7fa943bd2ad0" loc="43:../../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa943bd2ad0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7fa943bcd270" loc="80:../../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa943bd2ad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7fa943bcbcb0" loc="97:../../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fa944d26c20"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa943bd2ad0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7fa943bcba30" loc="97:../../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa943bd2ad0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7fa94570bc30"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:2"><attribute-ref name="one" ref="0x7fa94570bc30"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7fa943bc9c70" loc="108:../../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa943bd2ad0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7fa943bc99f0" loc="108:../../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7fa943bcfb20" loc="57:../../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7fa943bcead0" loc="72:../../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fa943bcde50" loc="88:../../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7fa943bd2ad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7fa943bcf3b0" loc="50:../../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7fa943bce2d0" loc="65:../../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fa945705160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7fa943ba7dd0" loc="49:../../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7fa943ba7b50" loc="49:../../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa943b77a90" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa943b77a90"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fa943b6e7c0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fa943b72070" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7fa943b70df0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fa943b70820" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fa943b70b60" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7fa943b70070" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7fa943b6d8a0" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7fa943b6d020" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fa943b72850" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7fa943b74640" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fa943b743c0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7fa943b6fdc0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fa943b6f7f0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fa943b6fb30" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7fa943b73120" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fa943b74e80" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fa943b73920" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa943b3a6d0" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa943b3a6d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fa943b37020" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fa945705920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fa943b32070" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fa943b32070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fa943b322b0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa943b322b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fa943b2ee00" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa943b322b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fa943b30e40" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7fa943b2e460" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa943b322b0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa943b322b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fa943b2fe60" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa943b322b0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7fa943b2e1d0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa943b322b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fa943b2f640" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fa944d2f090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7fa943b2d620" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa943b322b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fa943b32e10" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa943b322b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fa943b32b90" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fa943b322b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fa943b30680" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
