<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="51:TestCryptAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f5d7eceec80"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f5d7f7dade0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f5d7f7dade0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f5d7f603590"/></to>
    </wire>
    <wire loc="54:TestCryptAppC.nc">
      <from><interface-ref name="CRYPTO" scoped="" ref="0x7f5d7ec9b580"/></from>
      <to><interface-ref name="CRYPTO" scoped="" ref="0x7f5d7ec93a80"/></to>
    </wire>
    <wire loc="6:../../../tos/platforms/shimmer2r/CRYPTOC.nc">
      <from><interface-ref name="CRYPTO" scoped="" ref="0x7f5d7ec93a80"/></from>
      <to><interface-ref name="CRYPTO" scoped="" ref="0x7f5d7ec83680"/></to>
    </wire>
    <wire loc="57:TestCryptAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7ecd9da0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7e924640"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7e924640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f5d7e91b610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d7f7d6320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7e913400"/></to>
    </wire>
    <wire loc="49:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d7f7d6320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7ece9020"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d7f7d6320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7e16ee50"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d7f7d6320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7f4de540"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d7f7d6320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7ed17a60"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f5d7f603c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f5d7fe963a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f5d7fe963a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f5d7f86ec30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f5d7f6026c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7f7d82f0"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d7f7d82f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7f7d2110"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d7f602dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d7f7d6320"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d7f7d2820"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d7f7d3500"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d7f7d3500"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7f79b440"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f5d7f7d1020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7f7c2080"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f5d7f7d1700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7ef232e0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d7f79b440"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7f7813c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f5d7f7919e0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f5d7f781a70"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f5d7fb174c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f5d7f780cc0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f5d7f73da50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f67b6d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f5d7f72b410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f673b30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f5d7f734d10"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f680160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f5d7f717020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f65acb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f5d7f739020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f681480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f5d7f71f570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f65a020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f5d7f714020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f642cb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f5d7f726a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f653220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f5d7f744020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f6d09d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f5d7f719020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f6692f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f5d7f721890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f66a610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f5d7f72a8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f66b220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f5d7f733c70"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f6797a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f5d7f716020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f6512f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f5d7f728020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f6636d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f5d7f739da0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f67aac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f5d7f7467b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6de540"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f5d7f71e3e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f652610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f5d7f7435a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f682020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f5d7f724020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f64c6d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f5d7f72edc0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f689a90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f5d7f718020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f6617a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f5d7f73a140"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f68ade0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f5d7f720700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f662ac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f5d7f715020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f64a7a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f5d7f7275a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f65cb30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6d73e0"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f5d7f71d1f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f64bac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f5d7f71a020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f5d7f671cb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f5d7f71c020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f642020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f5d7f722a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f5d7f671020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f5d7f7235a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f5d7f644b30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f5d7f6dc450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6ddd80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f5d7f6dcaa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f5d7f63da90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f5d7f6db120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f5d7f63a260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f688930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6de540"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f685020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6ddd80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f67f020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6de540"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f67e7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6ddd80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f678610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6de540"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f676c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6ddd80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f5d7f6d52f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6d6bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f5d7f6d5940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f5d7f63a9f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f5d7f6d4020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f5d7f639240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f670b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6d73e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f66e2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6d6bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f668160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6d73e0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f6677a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6d6bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f660610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6d73e0"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f65fc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6d6bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f659b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6d73e0"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f6572f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6d6bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f650160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6d73e0"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f64f7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6d6bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f649610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6d73e0"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f648c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6d6bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f5d7f641b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7f6d73e0"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f5d7f63f2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f5d7f6d6bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7f86db70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f5d7f8662c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f5d7fe883b0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f5d7ed10a20"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f5d7ed40bf0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d7ed0d440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d7ed47020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d7ed47020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d7e604020"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d7ed0c0c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d7ed47c30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d7ed47c30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d7f54c7e0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f5d7ecefbe0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f5d7ed101a0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d7f54c7e0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d7f4e4d60"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d7ed458b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d7f54a470"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d7f54a470"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d7f4e56c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f5d7ed43020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d7f548b20"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d7f548b20"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d7f4e2a10"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d7e604c90"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d7f5aace0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d7e602930"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d7f54a470"/></to>
    </wire>
    <wire loc="54:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d7f5aace0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d7f55e580"/></to>
    </wire>
    <wire loc="55:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d7f55d400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d7f5533f0"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f5d7f5533f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f5d7f53a300"/></to>
    </wire>
    <wire loc="56:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f5d7f55c060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f5d7f54a470"/></to>
    </wire>
    <wire loc="57:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f5d7f55b720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f5d7f54c7e0"/></to>
    </wire>
    <wire loc="169:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f5d7f55a480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f5d7f55ac60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f5d7f54f3b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d7f4deb90"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f5d7f4deb90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d7f4ccc40"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d7f54c1d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d7f4e50d0"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d7f4de540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7f4cc5f0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d7f4d82b0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d7f53b330"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f5d7f4e14a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d7f4da790"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f5d7f4e0120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d7f4dbc60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f5d7f4d3970"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f5d7ed5ea30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f5d7f4da790"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f5d7f39ade0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f5d7f4dbc60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f5d7f39a6c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f5d7f399c20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f5d7f4d3970"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d7f4c4760"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d7f4d82b0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d7f397920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d7f4d82b0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d7f38dcc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d7f4d82b0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f5d7f398590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f5d7f4c0530"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f5d7f398e80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f5d7f4c5a40"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f5d7f4bb7e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f5d7f393e00"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f5d7f4b6780"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f5d7f3670c0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f5d7f3670c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f5d7ed730c0"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f5d7f383d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f5d7f3678d0"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f5d7f3678d0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f5d7ed79440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f5d7f4636e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f5d7f49b4f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f5d7f467c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f5d7f460a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f5d7f395020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f5d7f395800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f5d7f365020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f5d7ed78440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f5d7ed78440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f5d7f2fdd00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f5d7ed79440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f5d7f2fe670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7ed77020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7ed73920"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d7ed72020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d7ed7a020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d7ed7a020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d7f304c80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7ed7ac70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7e546a90"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7e546a90"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7eed62c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7f2f71d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7ed77020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7e538020"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7f2fb8e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f5d7f2f9e50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d7e548e00"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d7e548e00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d7eed7020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d7f2f3710"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d7e540440"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d7e540440"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f5d7eeda4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7f2fb8e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7f267dc0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f5d7f2fdd00"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f5d7f265890"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f5d7f2fe670"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f5d7f2666d0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d7f304c80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d7f267020"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7f2633e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7f2f71d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f5d7f2645b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f5d7f2f9e50"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d7f25e5b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d7f2f3710"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f5d7f263a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d7f254b60"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d7f254b60"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f5d7f248360"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d7f25d020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d7ef72d20"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d7ef72d20"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f5d7ef6dd90"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d7f25a120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d7ef50020"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f5d7ef50020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f5d7ef4ca70"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d7f24cbd0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d7f243970"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d7f24d6d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f5d7f243020"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f5d7f208860"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f5d7f11fcc0"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f5d7f11fcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f070100"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f5d7f212800"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f5d7f11bcc0"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f5d7f11bcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f06cd10"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f5d7f205800"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f5d7f119cc0"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f5d7f119cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f067740"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f5d7f203800"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f5d7f113cc0"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f5d7f113cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f05ed10"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f5d7f201800"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f5d7f115cc0"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f5d7f115cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f062100"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f5d7f219bc0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f5d7ee33940"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f5d7f17b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f0af740"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f5d7f166810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f07f100"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f5d7f11dca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f070100"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f5d7f0f8cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efe6740"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f5d7f162810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f076740"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f5d7f14e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f045460"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f5d7f1399a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f016d10"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f5d7f1299a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efef100"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f5d7f104cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f002740"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f5d7f0f0cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efe1100"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f5d7f175810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f0a1740"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f5d7f171810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f098d10"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f5d7f15c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f067740"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f5d7f1489a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f037100"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f5d7f1339a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f008d10"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f5d7f1239a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efe1100"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f5d7f17f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f0b8100"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f5d7f16b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f089d80"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f5d7f156810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f059740"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f5d7f0fecb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7eff4740"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f5d7f0f2cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efe1100"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f5d7f10acc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f01a100"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f5d7f152810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f050e60"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f5d7f13e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f01f740"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f5d7f12d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7eff9d10"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f5d7f0fccb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efef100"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f5d7f111cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f029100"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f5d7f179810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f0aa100"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f5d7f164810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f07bd10"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f5d7f1319a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f002740"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f5d7f160810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f070100"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f5d7f14c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f041e00"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f5d7f1379a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f011740"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f5d7f1279a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efebd10"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f5d7f10dcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f01f740"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f5d7f185800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f0e9d10"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f5d7f16f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f092740"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f5d7f15a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f062100"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f5d7f1469a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f033d10"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f5d7f108cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f059740"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f5d7f102cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7effd100"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f5d7f0f6cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efe1100"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f5d7f1429a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f029100"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f5d7f106cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f054100"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f5d7f17d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f0b4d10"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f5d7f168810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f084740"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f5d7f154810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f054100"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f5d7f10fcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f024d10"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f5d7f0facb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efebd10"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f5d7f1509a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f04a9f0"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f5d7f13c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f01a100"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f5d7f12b9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7eff4740"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f5d7f177810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f0a6d10"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f5d7f12f9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7effd100"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f5d7f173810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f09c100"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f5d7f15e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f06cd10"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f5d7f14a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f03c740"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f5d7f1359a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f00c100"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f5d7f1259a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efe6740"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f5d7f181810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f0be740"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f5d7f16d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f08d100"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f5d7f158810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f05ed10"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f5d7f1449a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f02e740"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f5d7f117ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f067740"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f5d7f100cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7eff9d10"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f5d7f1409a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f024d10"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f5d7f0f4cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7efe6740"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f5d7f0eecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f008d10"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f5d7f1219f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f5d7f076740"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f5d7ef6dd90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d7ef66e50"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7ef54020"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d7ef232e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7ef4c470"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f5d7ef49060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f5d7ef4db10"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f5d7ef4db10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d7ef20020"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f5d7ef48340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f5d7ef26e70"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f5d7ef26e70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d7ef0cb90"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f5d7ef43660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f5d7ef240f0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f5d7ef240f0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f5d7ef07710"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d7ef0f2f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7f5d7f152810"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d7ef0bde0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f5d7f14e9a0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d7ef05930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7f5d7f14c9a0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d7e540be0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d7eed93f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d7e53f2b0"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d7ee3dd70"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d7ee3dd70"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f5d7ee33940"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d7e545a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d7f254b60"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7e5452b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7eed6ad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7eed6ad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7ee45400"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7eed58a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7e538020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7eed62c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7ee46020"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7ee46020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7e169530"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f5d7eeda4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f5d7eed3d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d7eed7020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d7ee47210"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f5d7ee47210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f5d7e16a740"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d7eed93f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d7eed2710"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7ee45400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7e168930"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7ee45cd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7eed58a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7eec0bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7ee45400"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f5d7eed2d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d7f24d6d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f5d7eec05e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d7f24cbd0"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d7ee467a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d7e169cb0"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7e167270"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7ee45cd0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f5d7e167a30"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f5d7e16c4a0"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f5d7e164c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f5d7ee2a700"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f5d7f248360"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f5d7ee25250"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f5d7f11fcc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f5d7ee231f0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f5d7f119cc0"/></to>
    </wire>
    <wire loc="114:../../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7f5d7ed06500"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f5d7ece9680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f5d7ecefbe0"/></to>
    </wire>
    <wire loc="44:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f5d7ec8e220"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f5d7f7dade0"/></to>
    </wire>
    <wire loc="47:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f5d7ec8e940"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f5d7f54f3b0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f5d7e91b610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f5d7e9111d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f5d7e9111d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7e7b6690"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d7e913400"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7e831760"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f5d7e909a80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f5d7e7a7cf0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d7e831760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7e11b860"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f5d7e7b0c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f5d7e805cf0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f5d7e7ff1d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d7e830020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f5d7e830020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d7e1145f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d7e79c020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d7e892020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d7e892020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d7e88c5f0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f5d7e11b860"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f5d7e0ff360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f5d7e10ed20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d7e11a140"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f5d7e11a140"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f5d7e0ffbf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f5d7e1119b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f5d7e892020"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e0fbdd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e104020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e104020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e8ea4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e0f9440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e103760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e103760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e8e7280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e0f8760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e102a80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e102a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e8e6ba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e8ea4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e8e7280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f5d7f72b410"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e8e6ba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f5d7f722a20"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e8ea4d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e8e7280"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f5d7f72a8c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e8e6ba0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7f5d7f721890"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e8ea4d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e8e7280"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f5d7f728020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e8e6ba0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f5d7f720700"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e8ea4d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e8e7280"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f5d7f7275a0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e8e6ba0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f5d7f71f570"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e8ea4d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e8e7280"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f5d7f726a50"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e8e6ba0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f5d7f71e3e0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e8ea4d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e8e7280"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f5d7f724020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e8e6ba0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f5d7f71d1f0"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e8ea4d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e8e7280"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f5d7f7235a0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e8e6ba0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f5d7f71c020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f5d7e86f950"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f5d7ef6dd90"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f5d7e7fb490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f5d7e7abe80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="37:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P.UartP" loc="41(Msp430Uart0P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.2 $ $Date: 2010/07/29 13:19:06 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="39(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2013/04/09 14:28:58 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ShimmerSerialP" loc="35:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../../tos/system/QueueC.nc">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../../tos/lib/printf/PutcharP.nc">
      <documentation loc="64:../../../tos/lib/printf/PutcharP.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Kevin Klues &#60;klueska@cs.stanford.edu>&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestCryptC" loc="46:TestCryptC.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../../tos/lib/serial/SerialStartP.nc">
      <documentation loc="33:../../../tos/lib/serial/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CRYPTOC" loc="1:../../../tos/platforms/shimmer2r/CRYPTOC.nc">
      <configuration/>
    </component>
    <component qname="CRYPTOP" loc="3:../../../tos/platforms/shimmer2r/CRYPTOP.nc" safe="">
      <module/>
    </component>
    <component qname="TestCryptAppC.TimerMilliC" loc="44(TestCryptAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f5d7f710970" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f5d7f710d10" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f5d7f70f110" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f5d7f70f490" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f5d7f70f810" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f5d7f70fb80" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f5d7f70e020" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f5d7f70e3b0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f5d7f70e780" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f5d7f6d2e70" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f5d7f6cf270" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f5d7f5f53c0" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f5d7f5c60d0" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f5d7f5a30d0" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart0C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f5d7f0e8190" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f5d7f0e8540" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f5d7f0e88f0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f5d7f0e8ca0" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f5d7f0e7060" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f5d7ef67e60" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f5d7ef67e60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f5d7eebb5b0" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f5d7eeae5b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f5d7ee95d80" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f5d7ed41490" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f5d7ed41490"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f5d7ed41810" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f5d7e8c79c0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f5d7e8c79c0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f5d7e88eba0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f5d7e88eba0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f5d7e88b3b0" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f5d7e88b3b0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f5d7e88b7a0" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f5d7e88b7a0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f5d7e88a020" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f5d7e88a020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f5d7e88a3f0" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f5d7e88abf0" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f5d7e88abf0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f5d7e868020" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f5d7e868020"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f5d7e8687f0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f5d7e8687f0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f5d7e868be0" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f5d7e868be0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f5d7e867400" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f5d7e867400"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f5d7e8677d0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d7e8294f0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d7e8294f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d7e7f9d70" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d7e7f9d70"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f5d7e7f50d0" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d7e7a51f0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d7e7a51f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f5d7f7d6320" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d7f7d6320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f7d66a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f5d7f7dade0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f5d7f7dade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f5d7f7d9180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7f7d82f0" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7f7d82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f7d8670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f5d7f7d1020" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f5d7f7d1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f7d13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7f7d2110" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7f7d2110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f7d2490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f5d7f7d2820" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d7f7d2820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f7d2ba0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f5d7f7d1700" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f5d7f7d1700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f7d1a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7f7c2080" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7f7c2080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f7c2400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f5d7f7d3500" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f5d7f7d3500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f7d3880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f5d7f7919e0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f5d7f7919e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f5d7f797980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f5d7f797020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f5d7f7971b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f5d7f797340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f5d7f791d60"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f5d7f7974d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f5d7f797660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f5d7f7977f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7f79b440" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7f79b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f79b7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f5d7f781a70" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f5d7f781a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f5d7f780980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f5d7f780020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f5d7f7801b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f5d7f780340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f5d7f781df0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f5d7f7804d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f5d7f780660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f5d7f7807f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f5d7f780cc0" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f5d7f780cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f5d7f77f0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7f7813c0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7f7813c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f781740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f5d7f73da50" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f5d7f73da50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f73ddd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f73c020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f73c1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f73c340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f73c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f73c660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f73c7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f73c980"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f73cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f5d7f72b410" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f5d7f72b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f72b790"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f72b920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f72bab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f72bc40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f72bdd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f72a020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f72a1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f72a340"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f72a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f5d7f734d10" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f5d7f734d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f7330e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f733270"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f733400"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f733590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f733720"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f7338b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f5d7f717020" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f5d7f717020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f7173a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f717530"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f7176c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f717850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f7179e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f717b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f5d7f739020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f5d7f739020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f7393a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f739530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f7396c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f739850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f7399e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f5d7f71f570" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f5d7f71f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f71f8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f71fa80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f71fc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f71fda0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f71e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f5d7f714020" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f5d7f714020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f7143a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f714530"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f7146c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f714850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f7149e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f714b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f5d7f726a50" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f5d7f726a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f726dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f725020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f7251b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f725340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f7254d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f725660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f7257f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f725980"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f725b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f5d7f744020" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f5d7f744020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f7443a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f744530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f7446c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f744850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f7449e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f744b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f744d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f743020"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f7431b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f5d7f719020" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f5d7f719020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f7193a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f719530"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f7196c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f719850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f7199e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f719b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f5d7f721890" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f5d7f721890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f721c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f721da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f720020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f7201b0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f720340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f5d7f72a8c0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f5d7f72a8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f72ad40"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f729020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f7291b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f729340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f7294d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f729660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f7297f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f729980"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f729b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f5d7f733c70" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f5d7f733c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f72d020"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f72d1b0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f72d340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f72d4d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f72d660"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f72d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f5d7f716020" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f5d7f716020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f7163a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f716530"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f7166c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f716850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f7169e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f716b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f5d7f728020" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f5d7f728020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f7283a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f728530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f7286c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f728850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f7289e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f728b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f728d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f727020"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f7271b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f5d7f739da0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f5d7f739da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f735180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f735310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f7354a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f735630"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f7357c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f5d7f7467b0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f5d7f7467b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f746b30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f746cc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f746e50"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f74e020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f74e1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f74e340"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f74e4d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f74e660"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f74e7f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f74e980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f74eb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f5d7f71e3e0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f5d7f71e3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f71e760"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f71e8f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f71ea80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f71ec10"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f71eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f5d7f7435a0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f5d7f7435a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f743920"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f743ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f743c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f743dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f73d020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f73d1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f73d340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f73d4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f73d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f5d7f724020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f5d7f724020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f7243a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f724530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f7246c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f724850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f7249e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f724b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f724d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f723020"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f7231b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f5d7f72edc0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f5d7f72edc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f734180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f734310"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f7344a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f734630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f7347c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f734950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f5d7f718020" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f5d7f718020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f7183a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f718530"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f7186c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f718850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f7189e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f718b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f5d7f73a140" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f5d7f73a140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f73a4c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f73a650"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f73a7e0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f73a970"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f73ab00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f5d7f720700" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f5d7f720700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f720a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f720c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f720da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f71f020"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f71f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f5d7f715020" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f5d7f715020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f7153a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f715530"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f7156c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f715850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f7159e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f715b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f5d7f7275a0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f5d7f7275a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f727920"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f727ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f727c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f727dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f726020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f7261b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f726340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f7264d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f726660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f5d7f72db70" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f5d7f72db70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f72c020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f72c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f72c340"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f72c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f72c660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f72c7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f72c980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f72cb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f72cca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f72ce30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f72b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f5d7f71d1f0" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f5d7f71d1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f71d570"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f71d700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f71d890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f71da20"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f71dbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f5d7f71a020" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f5d7f71a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f71a3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f71a530"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f71a6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f71a850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f71a9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f71ab70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f5d7f71c020" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f5d7f71c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f71c5a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f71c730"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f71c8c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f71ca50"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f71cbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f5d7f722a20" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f5d7f722a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f722da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f721020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f7211b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f721340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f7214d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f5d7f7235a0" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f5d7f7235a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f723920"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f723ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f723c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f723dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f722020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f7221b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f722340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f7224d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f722660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f5d7f6dcaa0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f5d7f6dcaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6dce20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f5d7f6dc450" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f5d7f6dc450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6dc7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f5d7f6db120" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f5d7f6db120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6db4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f5d7f6ddd80" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f6ddd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6dc180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d7f6de540" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f6de540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f6de8c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f6dea50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f6debe0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f6ded70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f6dd020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f6dd1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f6dd340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6dd4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f6dd660"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f6dd7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f6dd980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f5d7f6d5940" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f5d7f6d5940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6d5cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f5d7f6d52f0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f5d7f6d52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6d5670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f5d7f6d4020" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f5d7f6d4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6d43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f5d7f6d6bf0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f6d6bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6d5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d7f6d73e0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f6d73e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f6d7760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f6d78f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f6d7a80"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f6d7c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f6d7da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f6d6020"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f6d61b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6d6340"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f6d64d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f6d6660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f6d67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f689a90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f689a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f689e10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f688020"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f6881b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f688340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6884d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f688660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f6d09d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f6d09d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f6d0d50"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f68a020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f68a1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f68a340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f68a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f68a660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f68a7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f68a980"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f68ab10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f685020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f685020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6853a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f68ade0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f68ade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f689180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f689310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f6894a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f689630"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6897c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f688930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f688930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f688cb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f688e40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f686020"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f6861b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f686340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f6864d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f686660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6867f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f686980"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f686b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f686ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f680160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f680160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f6804e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f680670"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f680800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f680990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f680b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f680cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f682020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f682020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f6823a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f682530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f6826c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f682850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f6829e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f682b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f682d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f681020"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f6811b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f67e7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f67e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f67eb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f681480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f681480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f681800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f681990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f681b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f681cb0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f681e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f67f020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f67f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f67f3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f67f530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f67f6c0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f67f850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f67f9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f67fb70"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f67fd00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f67e020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f67e1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f67e340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f67e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f6797a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f6797a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f679b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f679cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f679e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f678020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6781b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f678340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f67b6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f67b6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f67ba50"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f67bbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f67bd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f67a020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f67a1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f67a340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f67a4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f67a660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f67a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f676c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f676c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f675020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f67aac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f67aac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f67ae40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f679020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f6791b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f679340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6794d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f678610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f678610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f678990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f678b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f678cb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f678e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f676020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f6761b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f676340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6764d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f676660"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f6767f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f676980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f671cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f671cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f6700a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f670230"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f6703c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f670550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6706e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f670870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f673b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f673b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f672020"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f6721b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f672340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f6724d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f672660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f6727f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f672980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f672b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f672ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f66e2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f66e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f66e670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f671020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f671020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f6713a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f671530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f6716c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f671850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6719e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f670b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f670b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f66f020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f66f1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f66f340"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f66f4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f66f660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f66f7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f66f980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f66fb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f66fca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f66fe30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f66e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f6692f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f6692f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f669670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f669800"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f669990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f669b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f669cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f669e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f66b220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f66b220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f66b5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f66b730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f66b8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f66ba50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f66bbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f66bd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f66a020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f66a1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f66a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f6677a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f6677a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f667b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f66a610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f66a610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f66a990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f66ab20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f66acb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f66ae40"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f669020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f668160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f668160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f6684e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f668670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f668800"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f668990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f668b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f668cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f668e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f667020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f6671b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f667340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f6674d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f6617a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f6617a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f661b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f661cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f661e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f660020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6601b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f660340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f6636d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f6636d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f663a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f663be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f663d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f662020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f6621b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f662340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f6624d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f662660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f6627f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f65fc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f65fc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f65e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f662ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f662ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f662e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f661020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f6611b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f661340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6614d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f660610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f660610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f660990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f660b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f660cb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f660e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f65f020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f65f1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f65f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f65f4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f65f660"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f65f7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f65f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f65acb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f65acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f6590a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f659230"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f6593c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f659550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6596e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f659870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f65cb30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f65cb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f65b020"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f65b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f65b340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f65b4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f65b660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f65b7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f65b980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f65bb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f65bca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f6572f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f6572f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f657670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f65a020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f65a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f65a3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f65a530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f65a6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f65a850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f65a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f659b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f659b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f658020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f6581b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f658340"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f6584d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f658660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f6587f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f658980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f658b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f658ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f658e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f657020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f6512f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f6512f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f651670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f651800"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f651990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f651b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f651cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f651e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f653220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f653220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f6535a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f653730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f6538c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f653a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f653be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f653d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f652020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f6521b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f652340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f64f7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f64f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f64fb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f652610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f652610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f652990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f652b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f652cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f652e40"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f651020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f650160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f650160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f6504e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f650670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f650800"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f650990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f650b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f650cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f650e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f64f020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f64f1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f64f340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f64f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f64a7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f64a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f64ab20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f64acb0"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f64ae40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f649020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6491b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f649340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f64c6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f64c6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f64ca50"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f64cbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f64cd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f64b020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f64b1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f64b340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f64b4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f64b660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f64b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f648c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f648c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f647020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f64bac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f64bac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f64be40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f64a020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f64a1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f64a340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f64a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f649610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f649610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f649990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f649b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f649cb0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f649e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f648020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f6481b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f648340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6484d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f648660"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f6487f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f648980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f5d7f642cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f5d7f642cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f6410a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f5d7f641230"/>
        <function-ref name="captured" scoped="" ref="0x7f5d7f6413c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f641550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f6416e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f5d7f641870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f5d7f644b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f5d7f644b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7f643020"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7f6431b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f643340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7f6434d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7f643660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f6437f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7f643980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7f643b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7f643ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f5d7f63f2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f5d7f63f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f63f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f5d7f642020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f5d7f642020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7f6423a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7f642530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7f6426c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7f642850"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6429e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7f641b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7f641b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f640020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f6401b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7f640340"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f6404d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7f640660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f6407f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f640980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f640b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f640ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7f640e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7f63f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f5d7f639240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f5d7f639240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f6395c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f5d7f63da90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f5d7f63da90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f63de10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f5d7f63a260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f5d7f63a260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f63a5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f5d7f63a9f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f5d7f63a9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f63ad70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f5d7fb174c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f5d7fb174c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f5d7fb17840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f5d7fe883b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f5d7fe883b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f5d7fe88730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f5d7fe888c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f5d7fe88a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f5d7fcf1bc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f5d7fcf1bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f5d7fe2d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f5d7f602dc0" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f5d7f602dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f601180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f5d7f603590" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f5d7f603590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f5d7f603910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f5d7f6026c0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f5d7f6026c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f602a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f5d7f603c00" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f5d7f603c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f602020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f5d7f6021b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f5d7f602340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f5d7ff05410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7ff05410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7ff05790"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7ff05920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f5d7fe963a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f5d7fe963a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7fe96720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f5d7fe968b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f5d7fe96a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f5d7f86db70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f5d7f86db70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7f86c020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7f86c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f5d7f8662c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f5d7f8662c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f5d7f866640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f5d7f8667d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f5d7f866960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f5d7f86ec30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f5d7f86ec30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f86d020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f5d7f86d1b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f5d7f86d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d7ed47020" loc="49:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d7ed47020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7ed473a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7ed47530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7ed476c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7ed47850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7ed479e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d7ed47c30" loc="50:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d7ed47c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7ed45020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d7ed451b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7ed45340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7ed454d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d7ed45660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d7ed458b0" loc="51:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d7ed458b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d7ed45c30"/>
        <function-ref name="source" scoped="" ref="0x7f5d7ed45dc0"/>
        <function-ref name="address" scoped="" ref="0x7f5d7ed44020"/>
        <function-ref name="destination" scoped="" ref="0x7f5d7ed441b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d7ed44340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d7ed444d0"/>
        <function-ref name="type" scoped="" ref="0x7f5d7ed44660"/>
        <function-ref name="setType" scoped="" ref="0x7f5d7ed447f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d7ed44980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d7ed44b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d7ed44ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f5d7ed43020" loc="52:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f5d7ed43020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d7ed433a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d7ed43530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d7ed436c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d7e604020" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d7e604020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7e6043a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7e604530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7e6046c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7e604850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7e6049e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f5d7e604c90" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d7e604c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7e6020a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7e602230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7e6023c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7e602550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7e6026e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f5d7e602930" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d7e602930"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d7e602cb0"/>
        <function-ref name="source" scoped="" ref="0x7f5d7e602e40"/>
        <function-ref name="address" scoped="" ref="0x7f5d7e601020"/>
        <function-ref name="destination" scoped="" ref="0x7f5d7e6011b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d7e601340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d7e6014d0"/>
        <function-ref name="type" scoped="" ref="0x7f5d7e601660"/>
        <function-ref name="setType" scoped="" ref="0x7f5d7e6017f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d7e601980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d7e601b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d7e601ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d7f5aace0" loc="44:../../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d7f5aace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f5a70a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f5a7230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f5a73c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7f5a7550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f5a76e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f5d7f55d400" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d7f55d400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f55d7a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f55d930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f55dac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7f55dc50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f55dde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d7f55e580" loc="46:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d7f55e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f55e920"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f55eab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f55ec40"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7f55edd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f55d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f5d7f55b720" loc="50:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d7f55b720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f55baa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d7f55bc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f55bdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f55a020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d7f55a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f5d7f55a480" loc="169:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f5d7f55a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7f55a800"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7f55a990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f5d7f55ac60" loc="126:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f5d7f55ac60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7f558020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7f5581b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f5d7f55c060" loc="49:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d7f55c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d7f55c3e0"/>
        <function-ref name="source" scoped="" ref="0x7f5d7f55c570"/>
        <function-ref name="address" scoped="" ref="0x7f5d7f55c700"/>
        <function-ref name="destination" scoped="" ref="0x7f5d7f55c890"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d7f55ca20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d7f55cbb0"/>
        <function-ref name="type" scoped="" ref="0x7f5d7f55cd40"/>
        <function-ref name="setType" scoped="" ref="0x7f5d7f55b020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d7f55b1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d7f55b340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d7f55b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d7f54f3b0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d7f54f3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d7f54f730"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d7f54f8c0"/>
        <function-ref name="start" scoped="" ref="0x7f5d7f54fa50"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7f54fbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d7f5533f0" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d7f5533f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f553770"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f553900"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f553a90"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7f553c20"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f553db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d7f54c7e0" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d7f54c7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f54cb60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d7f54ccf0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f54ce80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f54a030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d7f54a1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d7f54c1d0" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d7f54c1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d7f54c550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d7f53b330" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7f53b330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7f53b6b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7f53b840"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7f53b9d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7f53bb60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7f53bcf0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f53be80"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7f546030"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7f546670"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f5461c0"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7f546350"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7f5464e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f5d7f548b20" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d7f548b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d7f547020"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d7f5471b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d7f547340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d7f54a470" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d7f54a470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d7f54a7f0"/>
        <function-ref name="source" scoped="" ref="0x7f5d7f54a980"/>
        <function-ref name="address" scoped="" ref="0x7f5d7f54ab10"/>
        <function-ref name="destination" scoped="" ref="0x7f5d7f54aca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d7f54ae30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d7f548020"/>
        <function-ref name="type" scoped="" ref="0x7f5d7f5481b0"/>
        <function-ref name="setType" scoped="" ref="0x7f5d7f548340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d7f5484d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d7f548660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d7f5487f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f5d7f4e14a0" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f5d7f4e14a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f4e1820"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f4e19b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f4e1b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7f4e1cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f4e1e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f5d7f4e0120" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f5d7f4e0120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d7f4e04a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f5d7f53a300" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d7f53a300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f53a6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f53a830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f53a9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7f53ab50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f53ace0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f5d7f4e4d60" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d7f4e4d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7f4e2180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d7f4e2310"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f4e24a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f4e2630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d7f4e27c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d7f4e50d0" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d7f4e50d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d7f4e5470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f5d7f4e2a10" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f5d7f4e2a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f5d7f4e2d90"/>
        <function-ref name="noAck" scoped="" ref="0x7f5d7f4e1020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f5d7f4e11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f5d7f4e56c0" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f5d7f4e56c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f5d7f4e5a40"/>
        <function-ref name="source" scoped="" ref="0x7f5d7f4e5bd0"/>
        <function-ref name="address" scoped="" ref="0x7f5d7f4e5d60"/>
        <function-ref name="destination" scoped="" ref="0x7f5d7f4e4020"/>
        <function-ref name="setSource" scoped="" ref="0x7f5d7f4e41b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f5d7f4e4340"/>
        <function-ref name="type" scoped="" ref="0x7f5d7f4e44d0"/>
        <function-ref name="setType" scoped="" ref="0x7f5d7f4e4660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f5d7f4e47f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f5d7f4e4980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f5d7f4e4b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d7f4deb90" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d7f4deb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d7f4db020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d7f4db1b0"/>
        <function-ref name="start" scoped="" ref="0x7f5d7f4db340"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7f4db4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d7f4da790" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d7f4da790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d7f7ee0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f4dab10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f4daca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f4dae30"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7f4d9020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f4d91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7f4de540" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7f4de540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f4de8c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d7f4dbc60" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d7f4dbc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d7f7ee0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d7f4da020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d7f4d82b0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7f4d82b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7f4d8630"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7f4d87c0"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7f4d8950"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7f4d8ae0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7f4d8c70"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f4d8e00"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7f4d7020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7f4d7660"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f4d71b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7f4d7340"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7f4d74d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f5d7f4d3970" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f5d7f4d3970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d7f7ee0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f5d7f4d3cf0"/>
        <function-ref name="offset" scoped="" ref="0x7f5d7f4d3e80"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f5d7f4d8030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f5d7f4ccc40" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f5d7f4ccc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d7f4cb020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d7f4cb1b0"/>
        <function-ref name="start" scoped="" ref="0x7f5d7f4cb340"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7f4cb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f5d7f4636e0" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f5d7f4636e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7f463a60"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7f463bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f5d7f4b6780" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f5d7f4b6780"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d7f4b6b00"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7f4b6c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f5d7f49b4f0" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f5d7f49b4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7f49b870"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7f49ba00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7f4cc5f0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7f4cc5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7f4cc970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f5d7f4b4360" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f5d7f4b4360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f5d7f4b46e0"/>
        <function-ref name="flush" scoped="" ref="0x7f5d7f4b4870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f5d7f467c70" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f5d7f467c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7f466020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7f4661b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f5d7f4bb7e0" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f5d7f4bb7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f5d7f4bbb60"/>
        <function-ref name="resetSend" scoped="" ref="0x7f5d7f4bbcf0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f5d7f4bbe80"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f5d7f4c4030"/>
        <function-ref name="putData" scoped="" ref="0x7f5d7f4c41c0"/>
        <function-ref name="putDone" scoped="" ref="0x7f5d7f4c4350"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f5d7f4c44e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d7f4c4760" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7f4c4760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7f4c4ae0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7f4c4c70"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7f4c4e00"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7f4bf020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7f4bf1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f4bf340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7f4bf4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7f4bfb10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f4bf660"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7f4bf7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7f4bf980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f5d7f460a00" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f5d7f460a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7f460d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7f45f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f5d7f4c5a40" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f5d7f4c5a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f5d7f4c5dc0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f5d7f4ca020"/>
        <function-ref name="startSend" scoped="" ref="0x7f5d7f4ca1b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f5d7f4ca340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f5d7f4c0530" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f5d7f4c0530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f5d7f4c08b0"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f5d7f4c0a40"/>
        <function-ref name="endPacket" scoped="" ref="0x7f5d7f4c0bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f5d7f395020" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f5d7f395020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7f3953a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7f395530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f5d7f39ade0" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f5d7f39ade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d7f7ee0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f3991c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7f399350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7f3994e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7f399670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f399800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f5d7f395800" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f5d7f395800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7f395b80"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7f395d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f5d7f39a6c0" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f5d7f39a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d7f7ee0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f5d7f39aa60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f5d7f399c20" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f5d7f399c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f5d7f7ee0d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f5d7f398020"/>
        <function-ref name="offset" scoped="" ref="0x7f5d7f3981b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f5d7f398340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d7f397920" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7f397920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7f397ca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7f397e30"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7f396020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7f3961b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7f396340"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f3964d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7f396660"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7f396ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f396980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7f3967f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7f396b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f5d7f398e80" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f5d7f398e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f5d7f397220"/>
        <function-ref name="nextByte" scoped="" ref="0x7f5d7f3973b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f5d7f397540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f5d7f3976d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f5d7f398590" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f5d7f398590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f5d7f398910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f5d7f398aa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f5d7f398c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f5d7f383d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d7f383d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f38d0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d7f38d270"/>
        <function-ref name="receive" scoped="" ref="0x7f5d7f38d400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d7f38d590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d7f38d720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d7f38d8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f38da40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f5d7f393e00" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f5d7f393e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f5d7f38f1c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f5d7f38f350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f5d7f38f4e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f5d7f38f670"/>
        <function-ref name="putData" scoped="" ref="0x7f5d7f38f800"/>
        <function-ref name="putDone" scoped="" ref="0x7f5d7f38f990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f5d7f38fb20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d7f38dcc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7f38dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7f38c0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7f38c230"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7f38c3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7f38c550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7f38c6e0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f38c870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7f38ca00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7f3821b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f38cb90"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7f38cd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7f382020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f5d7f365020" loc="40:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f5d7f365020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f3653a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f5d7f365530"/>
        <function-ref name="receive" scoped="" ref="0x7f5d7f3656c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f5d7f365850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f5d7f3678d0" loc="39:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d7f3678d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f367c50"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d7f367de0"/>
        <function-ref name="receive" scoped="" ref="0x7f5d7f366020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d7f3661b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d7f366340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d7f3664d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f366660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f5d7f3670c0" loc="38:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f5d7f3670c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d7f367440"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7f3675d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d7ed7ac70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7ed7ac70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d7ed79020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d7ed791b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f5d7ed78440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f5d7ed78440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7ed787c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f5d7ed78950"/>
        <function-ref name="receive" scoped="" ref="0x7f5d7ed78ae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f5d7ed78c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f5d7ed77020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7ed77020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d7ed773a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f5d7ed79440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d7ed79440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7ed797c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d7ed79950"/>
        <function-ref name="receive" scoped="" ref="0x7f5d7ed79ae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d7ed79c70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d7ed79e00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d7ed78020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7ed781b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d7ed7a020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d7ed7a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7ed7a3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7ed7a530"/>
        <function-ref name="request" scoped="" ref="0x7f5d7ed7a6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7ed7a850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7ed7a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f5d7f2fb8e0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7f2fb8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d7f2fbc60"/>
        <function-ref name="configure" scoped="" ref="0x7f5d7f2fbdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f5d7f2fdd00" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f5d7f2fdd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f2f90a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f5d7f2f9230"/>
        <function-ref name="receive" scoped="" ref="0x7f5d7f2f93c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f5d7f2f9550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f5d7f2f71d0" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7f2f71d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d7f2f7550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f5d7f2fe670" loc="43:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d7f2fe670"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f2fe9f0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d7f2feb80"/>
        <function-ref name="receive" scoped="" ref="0x7f5d7f2fed10"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d7f2fd020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d7f2fd1b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d7f2fd340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f2fd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f5d7f2f9e50" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f5d7f2f9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7f2f8210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7f2f83a0"/>
        <function-ref name="request" scoped="" ref="0x7f5d7f2f8530"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7f2f86c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7f2f8850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d7f304c80" loc="41:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d7f304c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7f3000a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7f300230"/>
        <function-ref name="request" scoped="" ref="0x7f5d7f3003c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7f300550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7f3006e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f5d7f2f3710" loc="48:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d7f2f3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d7f2f3a90"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d7f2f3c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f5d7f267dc0" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7f267dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d7f266180"/>
        <function-ref name="configure" scoped="" ref="0x7f5d7f266310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f5d7f265890" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f5d7f265890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f265c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f5d7f265dc0"/>
        <function-ref name="receive" scoped="" ref="0x7f5d7f264020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f5d7f2641b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f5d7f2633e0" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7f2633e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d7f263780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f5d7f263a50" loc="50:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f5d7f263a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d7f263dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d7f262020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d7f2621b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d7f262340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d7f2624d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d7f262660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d7f2627f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d7f262980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d7f262b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d7f262ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d7f262e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d7f261020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d7f2611b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d7f261440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d7f2615d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d7f261760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d7f2618f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d7f261a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d7f261c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d7f261da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d7f260020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d7f2601b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d7f260340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d7f2604d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f260660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d7f2609f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d7f260b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d7f260d10"/>
        <function-ref name="tx" scoped="" ref="0x7f5d7f25f020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d7f25f1b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d7f25f340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d7f25f4d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d7f25f660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d7f25f7f0"/>
        <function-ref name="rx" scoped="" ref="0x7f5d7f25f980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d7f25fb10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d7f25fca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d7f25fe30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d7f25e020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d7f25e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f5d7f2666d0" loc="45:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f5d7f2666d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7f266a70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f5d7f266c00"/>
        <function-ref name="receive" scoped="" ref="0x7f5d7f266d90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f5d7f265020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f5d7f2651b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f5d7f265340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7f2654d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f5d7f25d020" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d7f25d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7f25de30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7f25c800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7f25c340"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7f25ccc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f5d7f2645b0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f5d7f2645b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7f264950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7f264ae0"/>
        <function-ref name="request" scoped="" ref="0x7f5d7f264c70"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7f264e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7f263020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d7f267020" loc="43:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d7f267020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7f2673c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7f267550"/>
        <function-ref name="request" scoped="" ref="0x7f5d7f2676e0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7f267870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7f267a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f5d7f25e5b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f5d7f25e5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d7f25e950"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d7f25eae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d7f25a120" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7f25a120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7f25a4a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7f25a630"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7f25a7c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7f25a950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7f25aae0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f25ac70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7f25ae00"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7f2594d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f2591b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7f259020"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7f259340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f5d7f24cbd0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d7f24cbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f24b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f5d7f24d6d0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d7f24d6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d7f24da50"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d7f24dbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f5d7f254b60" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d7f254b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d7f251020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d7f2511b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d7f251340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d7f2514d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d7f251660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d7f2517f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d7f251980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d7f251b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d7f251ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d7f251e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d7f250020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d7f2501b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d7f250340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d7f2505d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d7f250760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d7f2508f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d7f250a80"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d7f250c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d7f250da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d7f24f020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d7f24f1b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d7f24f340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d7f24f4d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d7f24f660"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f24f7f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d7f24fb80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d7f24fd10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d7f24e020"/>
        <function-ref name="tx" scoped="" ref="0x7f5d7f24e1b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d7f24e340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d7f24e4d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d7f24e660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d7f24e7f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d7f24e980"/>
        <function-ref name="rx" scoped="" ref="0x7f5d7f24eb10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d7f24eca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d7f24ee30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d7f24d020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d7f24d1b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d7f24d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f5d7f205800" loc="82:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f5d7f205800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f205b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f205d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f204020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f2041b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f204340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f2044d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f204660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f2047f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f204980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f204b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f204ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f204e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f203020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f2032b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f203440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f5d7f243020" loc="76:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f5d7f243020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d7f2433a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d7f243530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f5d7f203800" loc="83:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f5d7f203800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f203b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f203d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f202020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f2021b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f202340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f2024d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f202660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f2027f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f202980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f202b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f202ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f202e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f201020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f2012b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f201440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f5d7f201800" loc="84:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f5d7f201800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f201b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f201d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f200020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f2001b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f200340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f2004d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f200660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f2007f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f200980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f200b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f200ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f200e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1ff020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1ff2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1ff440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f5d7f248360" loc="75:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f5d7f248360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d7f2486e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d7f248870"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d7f248a00"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d7f248b90"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d7f248d20"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d7f247020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d7f2471b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d7f247340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d7f2474d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d7f247660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d7f2477f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d7f247980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d7f247b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d7f247da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d7f246020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d7f2461b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d7f246340"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d7f2464d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d7f246660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d7f2467f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d7f246980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d7f246b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d7f246ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d7f246e30"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7f245020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d7f2453b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d7f245540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d7f2456d0"/>
        <function-ref name="tx" scoped="" ref="0x7f5d7f245860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d7f2459f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d7f245b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d7f245d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d7f244020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d7f2441b0"/>
        <function-ref name="rx" scoped="" ref="0x7f5d7f244340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d7f2444d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d7f244660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d7f2447f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d7f244980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d7f244b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d7f1ff700" loc="86:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7f1ff700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7f1ffa80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7f1ffc10"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7f1ffda0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7f1fe020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7f1fe1b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1fe340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7f1fe4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7f1feb10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1fe660"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7f1fe7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7f1fe980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f5d7f219bc0" loc="79:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f5d7f219bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f5d7f241020"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f5d7f2411b0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f5d7f241340"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f5d7f2414d0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f5d7f241660"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f5d7f2417f0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f5d7f241980"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f5d7f241b10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7f241ca0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f5d7f241e30"/>
        <function-ref name="getData" scoped="" ref="0x7f5d7f240020"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f5d7f2401b0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f5d7f240340"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f5d7f2405d0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f5d7f240760"/>
        <function-ref name="getIV" scoped="" ref="0x7f5d7f2408f0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f5d7f240a80"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f5d7f240c10"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f5d7f240da0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f5d7f218020"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f5d7f2181b0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f5d7f218340"/>
        <function-ref name="isI2C" scoped="" ref="0x7f5d7f2184d0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f5d7f218660"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f5d7f2187f0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f5d7f218b80"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f5d7f218d10"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f5d7f217020"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f5d7f2171b0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f5d7f217340"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f5d7f2174d0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f5d7f217660"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f5d7f2177f0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f5d7f217980"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f5d7f217b10"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f5d7f217ca0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f5d7f217e30"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f5d7f216020"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f5d7f2161b0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f5d7f216340"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f5d7f2164d0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f5d7f216660"/>
        <function-ref name="setData" scoped="" ref="0x7f5d7f2167f0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f5d7f216980"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f5d7f216b10"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f5d7f216ca0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f5d7f216e30"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f5d7f215020"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f5d7f2151b0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f5d7f215740"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f5d7f2158d0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f5d7f215a60"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f5d7f215bf0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f5d7f215d80"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f5d7f214020"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f5d7f2141b0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f5d7f214340"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f5d7f2144d0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f5d7f214660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f5d7f212800" loc="81:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f5d7f212800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f212b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f212d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f206020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f2061b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f206340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f2064d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f206660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f2067f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f206980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f206b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f206ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f206e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f205020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f2052b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f205440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f5d7f243970" loc="77:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d7f243970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7f243cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f5d7f208860" loc="80:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f5d7f208860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f208be0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f208d70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f213020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f2131b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f213340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f2134d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f213660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f2137f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f213980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f213b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f213ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f213e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f212020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f2122b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f212440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f5d7f17b810" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f5d7f17b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f17bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f17bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f17a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f17a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f17a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f17a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f17a660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f17a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f17a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f17ab10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f17aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f17ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f179020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1792b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f179440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f5d7f166810" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f5d7f166810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f166b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f166d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f165020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1651b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f165340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1654d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f165660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1657f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f165980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f165b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f165ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f165e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f164020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1642b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f164440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f5d7f11dca0" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f5d7f11dca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f11c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f11c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f11c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f11c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f11c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f11c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f11ca00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f11cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f11cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f11b020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f11b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f11b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f11b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f11b760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f11b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f5d7f0f8cb0" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f5d7f0f8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0f70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0f7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0f73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0f7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0f76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0f7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0f7a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0f7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0f7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0f6020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0f61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0f6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0f64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0f6760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0f68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f5d7f11bcc0" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f5d7f11bcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f11a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f11a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f11a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f11a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f11a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f11a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f11aa00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f11ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f11ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f119020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1191b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f119340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1194d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f119760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1198f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f5d7f162810" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f5d7f162810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f162b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f162d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f161020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1611b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f161340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1614d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f161660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1617f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f161980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f161b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f161ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f161e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f160020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1602b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f160440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f5d7f14e9a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f5d7f14e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f14ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f14d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f14d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f14d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f14d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f14d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f14d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f14d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f14db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f14dca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f14de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f14c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f14c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f14c440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f14c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f5d7f1399a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f5d7f1399a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f139d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f138020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1381b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f138340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1384d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f138660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1387f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f138980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f138b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f138ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f138e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f137020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1371b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f137440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1375d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f5d7f1299a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f5d7f1299a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f129d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f128020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1281b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f128340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1284d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f128660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1287f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f128980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f128b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f128ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f128e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f127020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1271b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f127440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1275d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f5d7f115cc0" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f5d7f115cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1140a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f114230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1143c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f114550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1146e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f114870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f114a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f114b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f114d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f113020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1131b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f113340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1134d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f113760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1138f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f5d7f104cb0" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f5d7f104cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1030a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f103230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1033c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f103550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1036e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f103870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f103a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f103b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f103d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f102020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1021b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f102340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1024d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f102760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1028f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f5d7f0f0cc0" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f5d7f0f0cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0ef0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0ef230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0ef3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0ef550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0ef6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0ef870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0efa00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0efb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0efd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0ee020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0ee1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0ee340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0ee4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0ee760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0ee8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f5d7f175810" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f5d7f175810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f175b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f175d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f174020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1741b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f174340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1744d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f174660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1747f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f174980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f174b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f174ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f174e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f173020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1732b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f173440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f5d7f113cc0" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f5d7f113cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1120a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f112230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1123c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f112550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1126e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f112870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f112a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f112b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f112d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f111020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1111b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f111340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1114d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f111760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1118f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f5d7f171810" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f5d7f171810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f171b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f171d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f170020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1701b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f170340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1704d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f170660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1707f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f170980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f170b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f170ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f170e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f16f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f16f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f16f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f5d7f15c810" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f5d7f15c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f15cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f15cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f15b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f15b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f15b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f15b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f15b660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f15b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f15b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f15bb10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f15bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f15be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f15a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f15a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f15a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f5d7f1489a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f5d7f1489a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f148d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f147020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1471b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f147340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1474d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f147660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1477f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f147980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f147b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f147ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f147e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f146020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1461b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f146440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1465d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f5d7f1339a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f5d7f1339a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f133d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f132020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1321b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f132340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1324d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f132660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1327f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f132980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f132b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f132ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f132e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f131020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1311b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f131440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1315d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f5d7f1239a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f5d7f1239a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f123d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f122020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1221b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f122340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1224d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f122660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1227f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f122980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f122b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f122ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f122e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f121020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1211b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f121440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1215d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f5d7f17f810" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f5d7f17f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f17fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f17fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f17e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f17e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f17e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f17e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f17e660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f17e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f17e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f17eb10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f17eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f17ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f17d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f17d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f17d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f5d7f16b810" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f5d7f16b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f16bc90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f16be20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f169020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1691b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f169340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1694d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f169660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1697f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f169980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f169b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f169ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f169e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f168020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1682b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f168440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f5d7f156810" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f5d7f156810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f156b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f156d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f155020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1551b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f155340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1554d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f155660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1557f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f155980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f155b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f155ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f155e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f154020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1542b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f154440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f5d7f11fcc0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f5d7f11fcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f11e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f11e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f11e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f11e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f11e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f11e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f11ea00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f11eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f11ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f11d020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f11d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f11d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f11d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f11d760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f11d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f5d7f0fecb0" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f5d7f0fecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0fd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0fd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0fd3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0fd550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0fd6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0fd870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0fda00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0fdb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0fdd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0fc020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0fc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0fc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0fc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0fc760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0fc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f5d7f0f2cb0" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f5d7f0f2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0f10a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0f1230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0f13c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0f1550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0f16e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0f1870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0f1a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0f1b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0f1d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0f0020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0f01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0f0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0f04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0f0760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0f08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f5d7f10acc0" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f5d7f10acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1090a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f109230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1093c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f109550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1096e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f109870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f109a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f109b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f109d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f108020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1081b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f108340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1084d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f108760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1088f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f5d7f152810" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f5d7f152810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f152d90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f151020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1511b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f151340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1514d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f151660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1517f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f151980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f151b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f151ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f151e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f150020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1501b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f150440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1505d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f5d7f13e9a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f5d7f13e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f13ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f13d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f13d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f13d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f13d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f13d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f13d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f13d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f13db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f13dca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f13de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f13c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f13c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f13c440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f13c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f5d7f12d9a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f5d7f12d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f12dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f12c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f12c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f12c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f12c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f12c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f12c7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f12c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f12cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f12cca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f12ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f12b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f12b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f12b440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f12b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f5d7f0fccb0" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f5d7f0fccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0fb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0fb230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0fb3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0fb550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0fb6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0fb870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0fba00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0fbb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0fbd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0fa020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0fa1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0fa340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0fa4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0fa760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0fa8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f5d7f111cb0" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f5d7f111cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1100a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f110230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1103c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f110550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1106e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f110870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f110a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f110b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f110d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f10f020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f10f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f10f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f10f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f10f760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f10f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f5d7f179810" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f5d7f179810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f179b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f179d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f178020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1781b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f178340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1784d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f178660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1787f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f178980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f178b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f178ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f178e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f177020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1772b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f177440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f5d7f164810" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f5d7f164810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f164b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f164d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f163020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1631b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f163340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1634d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f163660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1637f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f163980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f163b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f163ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f163e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f162020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1622b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f162440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f5d7f1319a0" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f5d7f1319a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f131d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f130020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1301b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f130340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1304d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f130660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1307f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f130980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f130b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f130ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f130e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f12f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f12f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f12f440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f12f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f5d7f160810" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f5d7f160810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f160b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f160d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f15f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f15f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f15f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f15f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f15f660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f15f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f15f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f15fb10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f15fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f15fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f15e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f15e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f15e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f5d7f14c9a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f5d7f14c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f14cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f14b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f14b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f14b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f14b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f14b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f14b7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f14b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f14bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f14bca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f14be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f14a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f14a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f14a440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f14a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f5d7f1379a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f5d7f1379a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f137d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f136020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1361b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f136340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1364d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f136660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1367f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f136980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f136b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f136ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f136e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f135020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1351b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f135440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1355d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f5d7f1279a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f5d7f1279a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f127d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f126020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1261b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f126340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1264d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f126660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1267f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f126980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f126b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f126ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f126e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f125020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1251b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f125440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1255d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f5d7f10dcc0" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f5d7f10dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f10b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f10b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f10b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f10b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f10b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f10b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f10ba00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f10bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f10bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f10a020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f10a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f10a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f10a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f10a760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f10a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f5d7f185800" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f5d7f185800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f185b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f185d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f182020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1821b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f182340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1824d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f182660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1827f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f182980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f182b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f182ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f182e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f181020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1812b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f181440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f5d7f16f810" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f5d7f16f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f16fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f16fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f16e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f16e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f16e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f16e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f16e660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f16e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f16e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f16eb10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f16eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f16ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f16d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f16d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f16d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f5d7f15a810" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f5d7f15a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f15ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f15ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f159020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1591b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f159340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1594d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f159660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1597f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f159980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f159b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f159ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f159e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f158020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1582b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f158440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f5d7f1469a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f5d7f1469a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f146d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f145020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1451b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f145340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1454d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f145660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1457f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f145980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f145b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f145ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f145e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f144020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1441b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f144440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1445d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f5d7f108cc0" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f5d7f108cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1070a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f107230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1073c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f107550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1076e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f107870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f107a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f107b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f107d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f106020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1061b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f106340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1064d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f106760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1068f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f5d7f102cb0" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f5d7f102cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1010a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f101230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1013c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f101550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1016e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f101870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f101a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f101b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f101d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f100020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1001b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f100340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1004d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f100760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1008f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f5d7f0f6cb0" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f5d7f0f6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0f50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0f5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0f53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0f5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0f56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0f5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0f5a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0f5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0f5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0f4020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0f41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0f4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0f44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0f4760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0f48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f5d7f1429a0" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f5d7f1429a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f142d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f141020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1411b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f141340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1414d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f141660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1417f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f141980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f141b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f141ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f141e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f140020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1401b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f140440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1405d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f5d7f106cc0" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f5d7f106cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1050a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f105230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1053c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f105550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1056e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f105870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f105a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f105b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f105d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f104020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1041b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f104340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1044d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f104760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1048f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f5d7f17d810" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f5d7f17d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f17db90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f17dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f17c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f17c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f17c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f17c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f17c660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f17c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f17c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f17cb10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f17cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f17ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f17b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f17b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f17b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f5d7f168810" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f5d7f168810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f168b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f168d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f167020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1671b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f167340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1674d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f167660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1677f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f167980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f167b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f167ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f167e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f166020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1662b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f166440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f5d7f154810" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f5d7f154810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f154b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f154d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f153020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1531b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f153340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1534d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f153660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1537f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f153980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f153b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f153ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f153e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f152020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1522b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f152440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f5d7f10fcc0" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f5d7f10fcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f10e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f10e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f10e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f10e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f10e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f10e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f10ea00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f10eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f10ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f10d020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f10d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f10d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f10d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f10d760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f10d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f5d7f0facb0" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f5d7f0facb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0f90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0f9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0f93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0f9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0f96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0f9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0f9a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0f9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0f9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0f8020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0f81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0f8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0f84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0f8760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0f88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f5d7f1509a0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f5d7f1509a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f150d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f14f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f14f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f14f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f14f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f14f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f14f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f14f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f14fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f14fca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f14fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f14e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f14e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f14e440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f14e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f5d7f13c9a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f5d7f13c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f13cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f13a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f13a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f13a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f13a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f13a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f13a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f13a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f13ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f13aca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f13ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f139020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1391b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f139440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1395d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f5d7f12b9a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f5d7f12b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f12bd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f12a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f12a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f12a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f12a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f12a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f12a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f12a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f12ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f12aca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f12ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f129020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1291b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f129440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1295d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f5d7f177810" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f5d7f177810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f177b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f177d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f176020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1761b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f176340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1764d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f176660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1767f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f176980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f176b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f176ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f176e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f175020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1752b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f175440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f5d7f12f9a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f5d7f12f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f12fd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f12e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f12e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f12e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f12e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f12e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f12e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f12e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f12eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f12eca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f12ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f12d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f12d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f12d440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f12d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f5d7f173810" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f5d7f173810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f173b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f173d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f172020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1721b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f172340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1724d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f172660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1727f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f172980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f172b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f172ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f172e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f171020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1712b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f171440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f5d7f15e810" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f5d7f15e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f15eb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f15ed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f15d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f15d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f15d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f15d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f15d660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f15d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f15d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f15db10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f15dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f15de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f15c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f15c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f15c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f5d7f14a9a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f5d7f14a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f14ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f149020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1491b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f149340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1494d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f149660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1497f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f149980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f149b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f149ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f149e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f148020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1481b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f148440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1485d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f5d7f1359a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f5d7f1359a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f135d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f134020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1341b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f134340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1344d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f134660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1347f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f134980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f134b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f134ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f134e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f133020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1331b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f133440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1335d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f5d7f1259a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f5d7f1259a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f125d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f124020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1241b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f124340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1244d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f124660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1247f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f124980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f124b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f124ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f124e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f123020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1231b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f123440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1235d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f5d7f181810" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f5d7f181810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f181b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f181d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f180020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1801b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f180340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1804d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f180660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1807f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f180980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f180b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f180ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f180e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f17f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f17f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f17f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f5d7f16d810" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f5d7f16d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f16db90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f16dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f16c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f16c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f16c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f16c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f16c660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f16c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f16c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f16cb10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f16cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f16ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f16b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f16b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f16b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f5d7f158810" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f5d7f158810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f158b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f158d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f157020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f1571b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f157340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f1574d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f157660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f1577f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f157980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f157b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f157ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f157e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f156020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f1562b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f156440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f5d7f1449a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f5d7f1449a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f144d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f143020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1431b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f143340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1434d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f143660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f1437f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f143980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f143b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f143ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f143e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f142020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1421b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f142440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1425d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f5d7f117ca0" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f5d7f117ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1160a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f116230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1163c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f116550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1166e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f116870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f116a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f116b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f116d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f115020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1151b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f115340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1154d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f115760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1158f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f5d7f100cb0" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f5d7f100cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0ff0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0ff230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0ff3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0ff550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0ff6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0ff870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0ffa00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0ffb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0ffd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0fe020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0fe1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0fe340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0fe4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0fe760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0fe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f5d7f119cc0" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f5d7f119cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1180a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f118230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1183c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f118550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f1186e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f118870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f118a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f118b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f118d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f117020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f1171b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f117340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f1174d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f117760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f1178f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f5d7f1409a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f5d7f1409a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f140d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f13f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f13f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f13f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f13f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f13f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f13f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f13f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f13fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f13fca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f13fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f13e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f13e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f13e440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f13e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f5d7f0f4cb0" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f5d7f0f4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0f30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0f3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0f33c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0f3550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0f36e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0f3870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0f3a00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0f3b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0f3d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0f2020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0f21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0f2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0f24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0f2760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0f28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f5d7f0eecc0" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f5d7f0eecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0ed0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0ed230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0ed3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0ed550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0ed6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0ed870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0eda00"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0edb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0edd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0ec020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0ec1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0ec340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0ec4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0ec760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0ec8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f5d7f1219f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f5d7f1219f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f1201c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f120350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f1204e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f120670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f120800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f120990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f120b20"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f120cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f120e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f11f020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f11f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f11f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f11f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f11f760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f11f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f0e9d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f0e9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0c20e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0c2270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0c2400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0c2590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0c2720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0c28b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0c2a40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0c2bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0c2d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0c1020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0c11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0c1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0c14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0c1760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0c18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f0be740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f0be740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0beac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0bec50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0bede0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0bc020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0bc1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0bc340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0bc4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0bc660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0bc7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0bc980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0bcb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0bcca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0bce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0bb120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0bb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f0b8100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f0b8100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0b8480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0b8610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0b87a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0b8930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0b8ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0b8c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0b8de0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0b7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0b71b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0b7340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0b74d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0b7660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0b77f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0b7a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0b7c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f0b4d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f0b4d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0b30e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0b3270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0b3400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0b3590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0b3720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0b38b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0b3a40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0b3bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0b3d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0b2020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0b21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0b2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0b24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0b2760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0b28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f0af740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f0af740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0afac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0afc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0afde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0ae020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0ae1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0ae340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0ae4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0ae660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0ae7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0ae980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0aeb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0aeca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0aee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0ad120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0ad2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f0aa100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f0aa100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0aa480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0aa610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0aa7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0aa930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0aaac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0aac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0aade0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0a9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0a91b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0a9340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0a94d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0a9660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0a97f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0a9a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0a9c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f0a6d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f0a6d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0a50e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0a5270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0a5400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0a5590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0a5720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0a58b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0a5a40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0a5bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0a5d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0a4020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0a41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0a4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0a44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f0a4760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0a48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f0a1740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f0a1740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0a1ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f0a1c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0a1de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f0a0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0a01b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0a0340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0a04d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f0a0660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0a07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f0a0980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0a0b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f0a0ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0a0e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f09f120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f09f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f09c100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f09c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f09c480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f09c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f09c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f09c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f09cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f09cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f09cde0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f09b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f09b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f09b340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f09b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f09b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f09b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f09ba80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f09bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f098d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f098d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0960e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f096270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f096400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f096590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f096720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0968b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f096a40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f096bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f096d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f095020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0951b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f095340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0954d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f095760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0958f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f092740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f092740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f092ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f092c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f092de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f091020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0911b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f091340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0914d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f091660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0917f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f091980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f091b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f091ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f091e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f090120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0902b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f08d100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f08d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f08d480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f08d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f08d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f08d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f08dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f08dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f08dde0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f08c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f08c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f08c340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f08c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f08c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f08c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f08ca80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f08cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f089d80" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f089d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f088180"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f088310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0884a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f088630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0887c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f088950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f088ae0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f088c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f088e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f087020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0871b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f087340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0874d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f087760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0878f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f084740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f084740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f084ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f084c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f084de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f083020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0831b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f083340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0834d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f083660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0837f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f083980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f083b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f083ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f083e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f082120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0822b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f07f100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f07f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f07f480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f07f610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f07f7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f07f930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f07fac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f07fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f07fde0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f07e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f07e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f07e340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f07e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f07e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f07e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f07ea80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f07ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f07bd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f07bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f07a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f07a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f07a400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f07a590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f07a720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f07a8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f07aa40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f07abd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f07ad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f079020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0791b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f079340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0794d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f079760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0798f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f076740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f076740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f076ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f076c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f076de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f075020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0751b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f075340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0754d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f075660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0757f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f075980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f075b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f075ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f075e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f074120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0742b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f070100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f070100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f070480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f070610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0707a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f070930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f070ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f070c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f070de0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f06f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f06f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f06f340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f06f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f06f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f06f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f06fa80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f06fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f06cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f06cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f06b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f06b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f06b400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f06b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f06b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f06b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f06ba40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f06bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f06bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f06a020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f06a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f06a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f06a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f06a760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f06a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f067740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f067740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f067ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f067c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f067de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f066020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0661b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f066340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0664d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f066660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0667f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f066980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f066b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f066ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f066e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f065120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0652b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f062100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f062100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f062480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f062610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0627a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f062930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f062ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f062c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f062de0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f061020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0611b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f061340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0614d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f061660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0617f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f061a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f061c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f05ed10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f05ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f05d0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f05d270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f05d400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f05d590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f05d720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f05d8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f05da40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f05dbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f05dd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f05c020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f05c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f05c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f05c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f05c760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f05c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f059740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f059740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f059ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f059c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f059de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f058020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0581b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f058340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0584d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f058660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0587f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f058980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f058b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f058ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f058e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f057120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0572b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f054100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f054100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f054480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f054610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0547a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f054930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f054ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f054c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f054de0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f053020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0531b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f053340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0534d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f053660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0537f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f053a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f053c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f050e60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f050e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f04e210"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f04e3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f04e530"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f04e6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f04e850"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f04e9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f04eb70"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f04ed00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f04d020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f04d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f04d340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f04d4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f04d660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f04d8f0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f04da80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f04a9f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f04a9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f04ad70"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f049020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0491b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f049340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0494d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f049660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0497f0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f049980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f049b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f049ca0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f049e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f048020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0481b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f048440"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0485d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f045460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f045460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0457e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f045970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f045b00"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f045c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f045e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f044020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0441b0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f044340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0444d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f044660"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0447f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f044980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f044b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f044da0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f043020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f041e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f041e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0401c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f040350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0404e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f040670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f040800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f040990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f040b20"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f040cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f040e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f03f020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f03f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f03f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f03f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f03f760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f03f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f03c740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f03c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f03cac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f03cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f03cde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f03b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f03b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f03b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f03b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f03b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f03b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f03b980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f03bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f03bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f03be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f03a120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f03a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f037100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f037100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f037480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f037610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0377a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f037930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f037ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f037c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f037de0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f036020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0361b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f036340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0364d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f036660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0367f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f036a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f036c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f033d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f033d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0320e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f032270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f032400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f032590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f032720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0328b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f032a40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f032bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f032d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f031020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0311b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f031340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0314d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f031760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0318f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f02e740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f02e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f02eac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f02ec50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f02ede0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f02d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f02d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f02d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f02d4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f02d660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f02d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f02d980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f02db10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f02dca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f02de30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f02c120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f02c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f029100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f029100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f029480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f029610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f0297a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f029930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f029ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f029c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f029de0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f027020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0271b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f027340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0274d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f027660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0277f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f027a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f027c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f024d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f024d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0230e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f023270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f023400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f023590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f023720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0238b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f023a40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f023bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f023d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f022020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0221b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f022340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0224d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f022760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0228f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f01f740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f01f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f01fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f01fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f01fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f01e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f01e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f01e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f01e4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f01e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f01e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f01e980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f01eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f01eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f01ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f01d120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f01d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f01a100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f01a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f01a480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f01a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f01a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f01a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f01aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f01ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f01ade0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f019020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0191b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f019340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0194d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f019660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0197f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f019a80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f019c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f016d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f016d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0150e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f015270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f015400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f015590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f015720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0158b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f015a40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f015bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f015d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f014020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0141b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f014340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0144d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f014760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0148f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f011740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f011740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f011ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f011c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f011de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f010020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0101b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f010340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0104d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f010660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0107f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f010980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f010b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f010ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f010e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f00f120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f00f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f00c100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f00c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f00c480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f00c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f00c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f00c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f00cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f00cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f00cde0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f00b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f00b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f00b340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f00b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f00b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f00b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f00ba80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f00bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f008d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f008d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f0070e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f007270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f007400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f007590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f007720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f0078b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f007a40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f007bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f007d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f006020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f0061b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f006340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f0064d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f006760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0068f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7f002740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7f002740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7f002ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7f002c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7f002de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7f001020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7f0011b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7f001340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7f0014d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7f001660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7f0017f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7f001980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7f001b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7f001ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7f001e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7f000120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7f0002b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7effd100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7effd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7effd480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7effd610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7effd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7effd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7effdac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7effdc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7effdde0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7effc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7effc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7effc340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7effc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7effc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7effc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7effca80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7effcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7eff9d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7eff9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7eff80e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7eff8270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7eff8400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7eff8590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7eff8720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7eff88b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7eff8a40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7eff8bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7eff8d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7eff7020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7eff71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7eff7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7eff74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7eff7760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7eff78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7eff4740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7eff4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7eff4ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7eff4c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7eff4de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7eff3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7eff31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7eff3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7eff34d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7eff3660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7eff37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7eff3980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7eff3b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7eff3ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7eff3e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7eff2120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7eff22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7efef100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7efef100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7efef480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7efef610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7efef7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7efef930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7efefac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7efefc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7efefde0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7efee020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7efee1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7efee340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7efee4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7efee660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7efee7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7efeea80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7efeec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7efebd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7efebd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7efea0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7efea270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7efea400"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7efea590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7efea720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7efea8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7efeaa40"/>
        <function-ref name="get" scoped="" ref="0x7f5d7efeabd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7efead60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7efe9020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7efe91b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7efe9340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7efe94d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7efe9760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7efe98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7efe6740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7efe6740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7efe6ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7efe6c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7efe6de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7efe5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7efe51b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7efe5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7efe54d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7efe5660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7efe57f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7efe5980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7efe5b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7efe5ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7efe5e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7efe4120"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7efe42b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f5d7efe1100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f5d7efe1100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7efe1480"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7efe1610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7efe17a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7efe1930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7efe1ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7efe1c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7efe1de0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7efdf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7efdf1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7efdf340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7efdf4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7efdf660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7efdf7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7efdfa80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7efdfc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d7ef72d20" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d7ef72d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7ef6fb60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7ef6e550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7ef6e090"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7ef6ea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f5d7ef6dd90" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f5d7ef6dd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7ef6abc0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7ef68590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7ef680d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7ef68a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f5d7ef54020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7ef54020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7ef543a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7ef54530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7ef546c0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef54850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7ef549e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7ef54b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7ef54d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7ef53020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7ef531b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7ef53340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7ef534d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d7ef66e50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d7ef66e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7ef65ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7ef55670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7ef551b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7ef55b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f5d7ef50020" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7ef50020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7ef503a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7ef50530"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7ef506c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7ef50850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7ef509e0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef50b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7ef50d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7ef4f4d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef4f020"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7ef4f1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7ef4f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f5d7ef49060" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f5d7ef49060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef493e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef49570"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef49700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef49890"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef49a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef49bb0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef49d40"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef48020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7ef4c470" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7ef4c470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7ef4c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f5d7ef48340" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f5d7ef48340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef486c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef48850"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef489e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef48b70"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef48d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef43020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef431b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef43340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f5d7ef4ca70" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7ef4ca70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7ef4cdf0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7ef4b020"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7ef4b1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7ef4b340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7ef4b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef4b660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7ef4b7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7ef4be30"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef4b980"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7ef4bb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7ef4bca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f5d7ef43660" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f5d7ef43660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef439e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef43b70"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef43d00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef42020"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef421b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef42340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef424d0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef42660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f5d7ef4db10" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f5d7ef4db10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef26020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef261b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef26340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef264d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef26660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef267f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef26980"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef26b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f5d7ef26e70" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f5d7ef26e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef25220"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef253b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef25540"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef256d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef25860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef259f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef25b80"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef25d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f5d7ef232e0" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7ef232e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7ef23660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f5d7ef240f0" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f5d7ef240f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef24470"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef24600"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef24790"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef24920"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef24ab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef24c40"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef24dd0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef23020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d7ef0f2f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d7ef0f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef0f670"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef0f800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7ef0f990"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef0fb20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef0fcb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7ef0fe40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef0e020"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef0e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7ef0e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7ef0e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef0e660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7ef0e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7ef0e980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7ef0ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef0eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d7ef20020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d7ef20020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef203a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef20530"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef206c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef20850"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef209e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef20b70"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef20d00"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef0f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d7ef0bde0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d7ef0bde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef0a180"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef0a310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7ef0a4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef0a630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef0a7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7ef0a950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef0aae0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef0ac70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7ef0ae00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7ef09020"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef091b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7ef09340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7ef094d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7ef09760"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef098f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d7ef0cb90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d7ef0cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef0b020"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef0b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef0b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef0b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef0b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef0b7f0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef0b980"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef0bb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f5d7ef05930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f5d7ef05930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef05cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef05e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7ef04020"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef041b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef04340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7ef044d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef04660"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef047f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7ef04980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7ef04b10"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef04ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7ef04e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7ef03020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7ef032b0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef03440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f5d7ef07710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f5d7ef07710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ef07a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ef07c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ef07db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ef05020"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ef051b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ef05340"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ef054d0"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ef05660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d7e546a90" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7e546a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d7e546e10"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d7e545020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f5d7e540be0" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f5d7e540be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7e53f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d7e538020" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7e538020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d7e5383a0"/>
        <function-ref name="configure" scoped="" ref="0x7f5d7e538530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f5d7e53f2b0" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d7e53f2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f5d7e53f630"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f5d7e53f7c0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f5d7e53f950"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f5d7e53fae0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f5d7e53fc70"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f5d7e53fe00"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f5d7e53e020"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f5d7e53e1b0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7e53e340"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f5d7e53e4d0"/>
        <function-ref name="getData" scoped="" ref="0x7f5d7e53e660"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f5d7e53e7f0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f5d7e53e980"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f5d7e53ec10"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f5d7e53eda0"/>
        <function-ref name="getIV" scoped="" ref="0x7f5d7e53d020"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f5d7e53d1b0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f5d7e53d340"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f5d7e53d4d0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f5d7e53d660"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f5d7e53d7f0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f5d7e53d980"/>
        <function-ref name="isI2C" scoped="" ref="0x7f5d7e53db10"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f5d7e53dca0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f5d7e53de30"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f5d7e53c220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f5d7e53c3b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f5d7e53c540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f5d7e53c6d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f5d7e53c860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f5d7e53c9f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f5d7e53cb80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f5d7e53cd10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f5d7e53b020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f5d7e53b1b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f5d7e53b340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f5d7e53b4d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f5d7e53b660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f5d7e53b7f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f5d7e53b980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f5d7e53bb10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f5d7e53bca0"/>
        <function-ref name="setData" scoped="" ref="0x7f5d7e53be30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f5d7e53a020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f5d7e53a1b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f5d7e53a340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f5d7e53a4d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f5d7e53a660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f5d7e53a7f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f5d7e53ad80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f5d7e539020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f5d7e5391b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f5d7e539340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f5d7e5394d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f5d7e539660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f5d7e5397f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f5d7e539980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f5d7e539b10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f5d7e539ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f5d7e540440" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f5d7e540440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d7e5407c0"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d7e540950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d7e548e00" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d7e548e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7e5461c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7e546350"/>
        <function-ref name="request" scoped="" ref="0x7f5d7e5464e0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7e546670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7e546800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f5d7e545a50" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f5d7e545a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d7e545dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d7e544020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d7e5441b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d7e544340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d7e5444d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d7e544660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d7e5447f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d7e544980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d7e544b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d7e544ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d7e544e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d7e543020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d7e5431b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d7e543440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d7e5435d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d7e543760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d7e5438f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d7e543a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d7e543c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d7e543da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d7e542020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d7e5421b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d7e542340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d7e5424d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7e542660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d7e5429f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d7e542b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d7e542d10"/>
        <function-ref name="tx" scoped="" ref="0x7f5d7e541020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d7e5411b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d7e541340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d7e5414d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d7e541660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d7e5417f0"/>
        <function-ref name="rx" scoped="" ref="0x7f5d7e541980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d7e541b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d7e541ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d7e541e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d7e540020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d7e5401b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d7e5452b0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7e5452b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d7e545630"/>
        <function-ref name="userId" scoped="" ref="0x7f5d7e5457c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d7eed62c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7eed62c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d7eed6640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d7eed67d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d7eed58a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7eed58a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d7eed5c20"/>
        <function-ref name="configure" scoped="" ref="0x7f5d7eed5db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f5d7eeda4d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f5d7eeda4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d7eeda850"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d7eeda9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d7eed7020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d7eed7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7eed73a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7eed7530"/>
        <function-ref name="request" scoped="" ref="0x7f5d7eed76c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7eed7850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7eed79e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f5d7eed93f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d7eed93f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7eed9770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d7eed6ad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7eed6ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d7eed6e50"/>
        <function-ref name="userId" scoped="" ref="0x7f5d7eed5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f5d7eec0bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7eec0bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d7eebf020"/>
        <function-ref name="userId" scoped="" ref="0x7f5d7eebf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f5d7eed3d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f5d7eed3d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d7eed2180"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d7eed2310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f5d7eec05e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f5d7eec05e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7eec0960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f5d7eed2710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f5d7eed2710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f5d7eed2ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f5d7eed2d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f5d7eed2d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f5d7eec0180"/>
        <function-ref name="txDone" scoped="" ref="0x7f5d7eec0310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d7ee46020" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7ee46020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d7ee463c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d7ee46550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d7ee45cd0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7ee45cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d7ee440a0"/>
        <function-ref name="configure" scoped="" ref="0x7f5d7ee44230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f5d7ee467a0" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d7ee467a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7ee46b20"/>
        <function-ref name="requested" scoped="" ref="0x7f5d7ee46cb0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7ee46e40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7ee45020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d7ee451b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d7ee47210" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d7ee47210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7ee475b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7ee47740"/>
        <function-ref name="request" scoped="" ref="0x7f5d7ee478d0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7ee47a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7ee47bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d7ee45400" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7ee45400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d7ee45780"/>
        <function-ref name="userId" scoped="" ref="0x7f5d7ee45910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7e16ee50" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7e16ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7e16c210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f5d7e16c4a0" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f5d7e16c4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f5d7e16c820"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f5d7e16c9b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f5d7e16cb40"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d7e16ccd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f5d7e169530" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f5d7e169530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f5d7e1698d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d7e169a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f5d7e167270" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f5d7e167270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f5d7e167610"/>
        <function-ref name="configure" scoped="" ref="0x7f5d7e1677a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f5d7e167a30" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f5d7e167a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f5d7e167db0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f5d7e166020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f5d7e1661b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d7e166340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f5d7e169cb0" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f5d7e169cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7e1680a0"/>
        <function-ref name="requested" scoped="" ref="0x7f5d7e168230"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7e1683c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7e168550"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f5d7e1686e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d7e166590" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7e166590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7e166910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7e166aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7e166c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7e166dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7e164020"/>
        <function-ref name="get" scoped="" ref="0x7f5d7e1641b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7e164340"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7e164980"/>
        <function-ref name="set" scoped="" ref="0x7f5d7e164660"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7e1644d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7e1647f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f5d7e16a740" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d7e16a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7e16aae0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7e16ac70"/>
        <function-ref name="request" scoped="" ref="0x7f5d7e16ae00"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7e169020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7e1691b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f5d7e168930" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f5d7e168930"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f5d7e168cb0"/>
        <function-ref name="userId" scoped="" ref="0x7f5d7e168e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f5d7e164c50" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f5d7e164c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7e163020"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7e1631b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f5d7ee3dd70" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f5d7ee3dd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f5d7ee3a180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f5d7ee3a310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f5d7ee3a4a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f5d7ee3a630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f5d7ee3a7c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f5d7ee3a950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f5d7ee3aae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f5d7ee3ac70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7ee3ae00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f5d7ee39020"/>
        <function-ref name="getData" scoped="" ref="0x7f5d7ee391b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f5d7ee39340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f5d7ee394d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f5d7ee39760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f5d7ee398f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f5d7ee39a80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f5d7ee39c10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f5d7ee39da0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f5d7ee38020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f5d7ee381b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f5d7ee38340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f5d7ee384d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f5d7ee38660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f5d7ee387f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f5d7ee38980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f5d7ee38d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f5d7ee37020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f5d7ee371b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f5d7ee37340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f5d7ee374d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f5d7ee37660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f5d7ee377f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f5d7ee37980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f5d7ee37b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f5d7ee37ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f5d7ee37e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f5d7ee36020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f5d7ee361b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f5d7ee36340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f5d7ee364d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f5d7ee36660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f5d7ee367f0"/>
        <function-ref name="setData" scoped="" ref="0x7f5d7ee36980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f5d7ee36b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f5d7ee36ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f5d7ee36e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f5d7ee35020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f5d7ee351b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f5d7ee35340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f5d7ee358d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f5d7ee35a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f5d7ee35bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f5d7ee35d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f5d7ee34020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f5d7ee341b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f5d7ee34340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f5d7ee344d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f5d7ee34660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f5d7ee347f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f5d7ee2a700" loc="41:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f5d7ee2a700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f5d7ee2aa80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f5d7ee2ac10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f5d7ee2ada0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f5d7ee29020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f5d7ee291b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f5d7ee29340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f5d7ee294d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f5d7ee29660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f5d7ee297f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f5d7ee29980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f5d7ee29b10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f5d7ee29ca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f5d7ee29e30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f5d7ee28120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f5d7ee282b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f5d7ee28440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f5d7ee285d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f5d7ee28760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f5d7ee288f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f5d7ee28a80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f5d7ee28c10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f5d7ee28da0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f5d7ee27020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f5d7ee271b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7ee27340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f5d7ee276d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f5d7ee27860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f5d7ee279f0"/>
        <function-ref name="tx" scoped="" ref="0x7f5d7ee27b80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f5d7ee27d10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f5d7ee26020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f5d7ee261b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f5d7ee26340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f5d7ee264d0"/>
        <function-ref name="rx" scoped="" ref="0x7f5d7ee26660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f5d7ee267f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f5d7ee26980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f5d7ee26b10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f5d7ee26ca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f5d7ee26e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f5d7ee231f0" loc="43:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f5d7ee231f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ee23570"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ee23700"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7ee23890"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ee23a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ee23bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7ee23d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ee22020"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ee221b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7ee22340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7ee224d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ee22660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7ee227f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7ee22980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7ee22c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ee22da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f5d7ee33940" loc="39:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f5d7ee33940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f5d7ee33cc0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f5d7ee33e50"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f5d7ee30020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f5d7ee301b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f5d7ee30340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f5d7ee304d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f5d7ee30660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f5d7ee307f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7ee30980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f5d7ee30b10"/>
        <function-ref name="getData" scoped="" ref="0x7f5d7ee30ca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f5d7ee30e30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f5d7ee2f020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f5d7ee2f2b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f5d7ee2f440"/>
        <function-ref name="getIV" scoped="" ref="0x7f5d7ee2f5d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f5d7ee2f760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f5d7ee2f8f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f5d7ee2fa80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f5d7ee2fc10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f5d7ee2fda0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f5d7ee2e020"/>
        <function-ref name="isI2C" scoped="" ref="0x7f5d7ee2e1b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f5d7ee2e340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f5d7ee2e4d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f5d7ee2e860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f5d7ee2e9f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f5d7ee2eb80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f5d7ee2ed10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f5d7ee2d020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f5d7ee2d1b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f5d7ee2d340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f5d7ee2d4d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f5d7ee2d660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f5d7ee2d7f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f5d7ee2d980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f5d7ee2db10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f5d7ee2dca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f5d7ee2de30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f5d7ee2c020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f5d7ee2c1b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f5d7ee2c340"/>
        <function-ref name="setData" scoped="" ref="0x7f5d7ee2c4d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f5d7ee2c660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f5d7ee2c7f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f5d7ee2c980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f5d7ee2cb10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f5d7ee2cca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f5d7ee2ce30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f5d7ee2b420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f5d7ee2b5b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f5d7ee2b740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f5d7ee2b8d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f5d7ee2ba60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f5d7ee2bbf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f5d7ee2bd80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f5d7ee2a020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f5d7ee2a1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f5d7ee2a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f5d7ee25250" loc="42:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f5d7ee25250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f5d7ee255d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f5d7ee25760"/>
        <function-ref name="setResistor" scoped="" ref="0x7f5d7ee258f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f5d7ee25a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f5d7ee25c10"/>
        <function-ref name="getResistor" scoped="" ref="0x7f5d7ee25da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f5d7ee24020"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ee241b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f5d7ee24340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f5d7ee244d0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ee24660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f5d7ee247f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f5d7ee24980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f5d7ee24c10"/>
        <function-ref name="clr" scoped="" ref="0x7f5d7ee24da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f5d7ed73920" loc="37:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f5d7ed73920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f5d7ed73ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f5d7ed72020" loc="38:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f5d7ed72020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f5d7ed723a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f5d7ed72530"/>
        <function-ref name="request" scoped="" ref="0x7f5d7ed726c0"/>
        <function-ref name="granted" scoped="" ref="0x7f5d7ed72850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f5d7ed729e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f5d7ed730c0" loc="36:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f5d7ed730c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f5d7ed73440"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7ed735d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f5d7ed5ea30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f5d7ed5ea30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f5d7ed5edb0"/>
        <function-ref name="offset" scoped="" ref="0x7f5d7ed5b020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f5d7ed5b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f5d7ed40bf0" loc="43:../../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f5d7ed40bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f5d7ed1bae0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f5d7ed1a880"/>
        <function-ref name="element" scoped="" ref="0x7f5d7ed18020"/>
        <function-ref name="full" scoped="" ref="0x7f5d7ed1cce0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f5d7ed1b660"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d7ed1a1d0"/>
        <function-ref name="empty" scoped="" ref="0x7f5d7ed1c860"/>
        <function-ref name="size" scoped="" ref="0x7f5d7ed1b1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f5d7ed10a20" loc="93:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f5d7ed10a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f5d7ed11920"/>
        <function-ref name="enqueue" scoped="" ref="0x7f5d7ed0e6d0"/>
        <function-ref name="element" scoped="" ref="0x7f5d7ed0ed40"/>
        <function-ref name="full" scoped="" ref="0x7f5d7ed12af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f5d7ed114a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f5d7ed0e020"/>
        <function-ref name="empty" scoped="" ref="0x7f5d7ed12670"/>
        <function-ref name="size" scoped="" ref="0x7f5d7ed11020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f5d7ed0d440" loc="94:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f5d7ed0d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f5d7ed0d7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7ed0d950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7ed0dae0"/>
        <function-ref name="cancel" scoped="" ref="0x7f5d7ed0dc70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f5d7ed0de00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f5d7ed0c0c0" loc="95:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f5d7ed0c0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7ed0c440"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f5d7ed0c5d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f5d7ed0c760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f5d7ed0c8f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f5d7ed0ca80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7f5d7ed06500" loc="114:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="retrySend" scoped="" ref="0x7f5d7ed06500"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7ed06880"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7ed06a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7ed17a60" loc="89:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7ed17a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7ed17de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f5d7ed0cd00" loc="96:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f5d7ed0cd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f5d7ed0b0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f5d7ed0b230"/>
        <function-ref name="led1On" scoped="" ref="0x7f5d7ed0b3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f5d7ed0b550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f5d7ed0b6e0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7ed0b870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f5d7ed0ba00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f5d7ed0a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f5d7ed0bb90"/>
        <function-ref name="led0On" scoped="" ref="0x7f5d7ed0bd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f5d7ed0a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7f5d7ed101a0" loc="90:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f5d7ed101a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f5d7ed10520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f5d7ecefbe0" loc="43:../../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f5d7ecefbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f5d7ecec020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7ece9020" loc="94:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7ece9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7ece93a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f5d7ece9680" loc="95:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f5d7ece9680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f5d7ece9a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f5d7eceec80" loc="48:TestCryptC.nc">
      <component-ref qname="TestCryptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f5d7eceec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f5d7ece30a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CRYPTO" ref="0x7f5d7ec9b580" loc="50:TestCryptC.nc">
      <component-ref qname="TestCryptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CRYPTO" scoped="" ref="0x7f5d7ec9b580"/></type-interface>
      <instance>
        <interfacedef-ref qname="CRYPTO"/>
      </instance>
      <interface-functions>
        <function-ref name="xtea_decrypt" scoped="" ref="0x7f5d7ec9b900"/>
        <function-ref name="kasumi_decrypt" scoped="" ref="0x7f5d7ec9ba90"/>
        <function-ref name="blowfish_encrypt" scoped="" ref="0x7f5d7ec9bc20"/>
        <function-ref name="skipjack_encrypt" scoped="" ref="0x7f5d7ec9bdb0"/>
        <function-ref name="safer_decrypt" scoped="" ref="0x7f5d7ecd3020"/>
        <function-ref name="blowfish_setup" scoped="" ref="0x7f5d7ecd31b0"/>
        <function-ref name="blowfish_done" scoped="" ref="0x7f5d7ecd3340"/>
        <function-ref name="rc5_encrypt" scoped="" ref="0x7f5d7ecd34d0"/>
        <function-ref name="lsb" scoped="" ref="0x7f5d7ecd3660"/>
        <function-ref name="kasumi_setup" scoped="" ref="0x7f5d7ecd37f0"/>
        <function-ref name="rc4_encrypt" scoped="" ref="0x7f5d7ecd3980"/>
        <function-ref name="rc5_decrypt" scoped="" ref="0x7f5d7ecd3b10"/>
        <function-ref name="rc2_decrypt" scoped="" ref="0x7f5d7ecd3ca0"/>
        <function-ref name="rc5_setup" scoped="" ref="0x7f5d7ecd2020"/>
        <function-ref name="kasumi_done" scoped="" ref="0x7f5d7ecd21b0"/>
        <function-ref name="xxtea_encrypt" scoped="" ref="0x7f5d7ecd2340"/>
        <function-ref name="rc2_setup" scoped="" ref="0x7f5d7ecd24d0"/>
        <function-ref name="tea_decrypt" scoped="" ref="0x7f5d7ecd2660"/>
        <function-ref name="tea_encrypt" scoped="" ref="0x7f5d7ecd27f0"/>
        <function-ref name="skipjack_done" scoped="" ref="0x7f5d7ecd2980"/>
        <function-ref name="msb" scoped="" ref="0x7f5d7ecd2b10"/>
        <function-ref name="skipjack_decrypt" scoped="" ref="0x7f5d7ecd2ca0"/>
        <function-ref name="xxtea_decrypt" scoped="" ref="0x7f5d7ecd2e30"/>
        <function-ref name="safer_encrypt" scoped="" ref="0x7f5d7ec9a020"/>
        <function-ref name="skipjack_setup" scoped="" ref="0x7f5d7ec9a1b0"/>
        <function-ref name="blowfish_decrypt" scoped="" ref="0x7f5d7ec9a540"/>
        <function-ref name="safer_done" scoped="" ref="0x7f5d7ec9a6d0"/>
        <function-ref name="xtea_encrypt" scoped="" ref="0x7f5d7ec9a860"/>
        <function-ref name="rc2_encrypt" scoped="" ref="0x7f5d7ec9a9f0"/>
        <function-ref name="rc2_done" scoped="" ref="0x7f5d7ec9ab80"/>
        <function-ref name="rc5_done" scoped="" ref="0x7f5d7ec9ad10"/>
        <function-ref name="rc4_decrypt" scoped="" ref="0x7f5d7ec99020"/>
        <function-ref name="kasumi_encrypt" scoped="" ref="0x7f5d7ec991b0"/>
        <function-ref name="safer_setup" scoped="" ref="0x7f5d7ec99340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f5d7ecd9da0" loc="49:TestCryptC.nc">
      <component-ref qname="TestCryptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7ecd9da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7ecd6390"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7ece1970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d7ecd7720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d7ecd72a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d7ecd6c90"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d7ecd6810"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7ece1df0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d7ece29d0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d7ecd7d30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d7ece1020"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7ece14f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f5d7ec8e220" loc="39:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f5d7ec8e220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f5d7ec8e5a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f5d7ec8e940" loc="40:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f5d7ec8e940"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f5d7ec8ecc0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f5d7ec8ee50"/>
        <function-ref name="start" scoped="" ref="0x7f5d7ec8d020"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7ec8d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CRYPTO" ref="0x7f5d7ec93a80" loc="2:../../../tos/platforms/shimmer2r/CRYPTOC.nc">
      <component-ref qname="CRYPTOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CRYPTO" scoped="" ref="0x7f5d7ec93a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CRYPTO"/>
      </instance>
      <interface-functions>
        <function-ref name="xtea_decrypt" scoped="" ref="0x7f5d7ec93e00"/>
        <function-ref name="kasumi_decrypt" scoped="" ref="0x7f5d7ec87020"/>
        <function-ref name="blowfish_encrypt" scoped="" ref="0x7f5d7ec871b0"/>
        <function-ref name="skipjack_encrypt" scoped="" ref="0x7f5d7ec87340"/>
        <function-ref name="safer_decrypt" scoped="" ref="0x7f5d7ec874d0"/>
        <function-ref name="blowfish_setup" scoped="" ref="0x7f5d7ec87660"/>
        <function-ref name="blowfish_done" scoped="" ref="0x7f5d7ec877f0"/>
        <function-ref name="rc5_encrypt" scoped="" ref="0x7f5d7ec87980"/>
        <function-ref name="lsb" scoped="" ref="0x7f5d7ec87b10"/>
        <function-ref name="kasumi_setup" scoped="" ref="0x7f5d7ec87ca0"/>
        <function-ref name="rc4_encrypt" scoped="" ref="0x7f5d7ec87e30"/>
        <function-ref name="rc5_decrypt" scoped="" ref="0x7f5d7ec86020"/>
        <function-ref name="rc2_decrypt" scoped="" ref="0x7f5d7ec861b0"/>
        <function-ref name="rc5_setup" scoped="" ref="0x7f5d7ec86440"/>
        <function-ref name="kasumi_done" scoped="" ref="0x7f5d7ec865d0"/>
        <function-ref name="xxtea_encrypt" scoped="" ref="0x7f5d7ec86760"/>
        <function-ref name="rc2_setup" scoped="" ref="0x7f5d7ec868f0"/>
        <function-ref name="tea_decrypt" scoped="" ref="0x7f5d7ec86a80"/>
        <function-ref name="tea_encrypt" scoped="" ref="0x7f5d7ec86c10"/>
        <function-ref name="skipjack_done" scoped="" ref="0x7f5d7ec86da0"/>
        <function-ref name="msb" scoped="" ref="0x7f5d7ec85020"/>
        <function-ref name="skipjack_decrypt" scoped="" ref="0x7f5d7ec851b0"/>
        <function-ref name="xxtea_decrypt" scoped="" ref="0x7f5d7ec85340"/>
        <function-ref name="safer_encrypt" scoped="" ref="0x7f5d7ec854d0"/>
        <function-ref name="skipjack_setup" scoped="" ref="0x7f5d7ec85660"/>
        <function-ref name="blowfish_decrypt" scoped="" ref="0x7f5d7ec859f0"/>
        <function-ref name="safer_done" scoped="" ref="0x7f5d7ec85b80"/>
        <function-ref name="xtea_encrypt" scoped="" ref="0x7f5d7ec85d10"/>
        <function-ref name="rc2_encrypt" scoped="" ref="0x7f5d7ec84020"/>
        <function-ref name="rc2_done" scoped="" ref="0x7f5d7ec841b0"/>
        <function-ref name="rc5_done" scoped="" ref="0x7f5d7ec84340"/>
        <function-ref name="rc4_decrypt" scoped="" ref="0x7f5d7ec844d0"/>
        <function-ref name="kasumi_encrypt" scoped="" ref="0x7f5d7ec84660"/>
        <function-ref name="safer_setup" scoped="" ref="0x7f5d7ec847f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CRYPTO" ref="0x7f5d7ec83680" loc="4:../../../tos/platforms/shimmer2r/CRYPTOP.nc">
      <component-ref qname="CRYPTOP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CRYPTO" scoped="" ref="0x7f5d7ec83680"/></type-interface>
      <instance>
        <interfacedef-ref qname="CRYPTO"/>
      </instance>
      <interface-functions>
        <function-ref name="xtea_decrypt" scoped="" ref="0x7f5d7ec83a00"/>
        <function-ref name="kasumi_decrypt" scoped="" ref="0x7f5d7ec83b90"/>
        <function-ref name="blowfish_encrypt" scoped="" ref="0x7f5d7ec83d20"/>
        <function-ref name="skipjack_encrypt" scoped="" ref="0x7f5d7ec80020"/>
        <function-ref name="safer_decrypt" scoped="" ref="0x7f5d7ec801b0"/>
        <function-ref name="blowfish_setup" scoped="" ref="0x7f5d7ec80340"/>
        <function-ref name="blowfish_done" scoped="" ref="0x7f5d7ec804d0"/>
        <function-ref name="rc5_encrypt" scoped="" ref="0x7f5d7ec80660"/>
        <function-ref name="lsb" scoped="" ref="0x7f5d7ec807f0"/>
        <function-ref name="kasumi_setup" scoped="" ref="0x7f5d7ec80980"/>
        <function-ref name="rc4_encrypt" scoped="" ref="0x7f5d7ec80b10"/>
        <function-ref name="rc5_decrypt" scoped="" ref="0x7f5d7ec80ca0"/>
        <function-ref name="rc2_decrypt" scoped="" ref="0x7f5d7ec80e30"/>
        <function-ref name="rc5_setup" scoped="" ref="0x7f5d7ec7f120"/>
        <function-ref name="kasumi_done" scoped="" ref="0x7f5d7ec7f2b0"/>
        <function-ref name="xxtea_encrypt" scoped="" ref="0x7f5d7ec7f440"/>
        <function-ref name="rc2_setup" scoped="" ref="0x7f5d7ec7f5d0"/>
        <function-ref name="tea_decrypt" scoped="" ref="0x7f5d7ec7f760"/>
        <function-ref name="tea_encrypt" scoped="" ref="0x7f5d7ec7f8f0"/>
        <function-ref name="skipjack_done" scoped="" ref="0x7f5d7ec7fa80"/>
        <function-ref name="msb" scoped="" ref="0x7f5d7ec7fc10"/>
        <function-ref name="skipjack_decrypt" scoped="" ref="0x7f5d7ec7fda0"/>
        <function-ref name="xxtea_decrypt" scoped="" ref="0x7f5d7ec7e020"/>
        <function-ref name="safer_encrypt" scoped="" ref="0x7f5d7ec7e1b0"/>
        <function-ref name="skipjack_setup" scoped="" ref="0x7f5d7ec7e340"/>
        <function-ref name="blowfish_decrypt" scoped="" ref="0x7f5d7ec7e6d0"/>
        <function-ref name="safer_done" scoped="" ref="0x7f5d7ec7e860"/>
        <function-ref name="xtea_encrypt" scoped="" ref="0x7f5d7ec7e9f0"/>
        <function-ref name="rc2_encrypt" scoped="" ref="0x7f5d7ec7eb80"/>
        <function-ref name="rc2_done" scoped="" ref="0x7f5d7ec7ed10"/>
        <function-ref name="rc5_done" scoped="" ref="0x7f5d7ec7d020"/>
        <function-ref name="rc4_decrypt" scoped="" ref="0x7f5d7ec7d1b0"/>
        <function-ref name="kasumi_encrypt" scoped="" ref="0x7f5d7ec7d340"/>
        <function-ref name="safer_setup" scoped="" ref="0x7f5d7ec7d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d7e924640" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TestCryptAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7e924640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e791c40"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e7931e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d7e791020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d7e793ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d7e790590"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d7e790110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e793660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d7e794390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d7e791630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d7e794860"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e794d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f5d7e91b610" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f5d7e91b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e917c40"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e9191e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d7e917020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d7e919ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d7e916590"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d7e916110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e919660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d7e91a390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d7e917630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d7e91a860"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e91ad30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f5d7e9111d0" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f5d7e9111d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e90e630"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e910c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d7e90f9d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d7e90f550"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d7e90c020"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d7e90eab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e90f0d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d7e911dc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d7e90e020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d7e9102e0"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e9107b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f5d7e909a80" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f5d7e909a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7e90b6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7e913400" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7e913400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7e913780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d7e830020" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d7e830020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e82e870"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e82f840"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d7e82e220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e82fd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d7e82ed30"/>
        <function-ref name="start" scoped="" ref="0x7f5d7e830e30"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e82f380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7e831760" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7e831760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7e831ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d7e11a140" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d7e11a140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e118b30"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e1199f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d7e1184e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e118020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d7e116020"/>
        <function-ref name="start" scoped="" ref="0x7f5d7e119020"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e119530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7e11b860" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7e11b860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7e11bbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f5d7e102a80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e102a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7e102e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7e101020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7e1011b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7e101340"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e1014d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f5d7e104020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e104020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7e1043a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7e104530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7e1046c0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7e104850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7e1049e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7e104b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7e104d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7e103020"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7e1031b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7e103340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7e1034d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f5d7e103760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e103760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7e103ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7e103c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7e103e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7e102020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7e1021b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7e102340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7e1024d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7e102660"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7e1027f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f5d7e8e6ba0" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e8e6ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7e8e5020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7e8e51b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7e8e5340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7e8e54d0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e8e5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f5d7e8ea4d0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e8ea4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7e8ea850"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7e8ea9e0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7e8eab70"/>
        <function-ref name="get" scoped="" ref="0x7f5d7e8ead00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7e8e9020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7e8e91b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7e8e9340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7e8e94d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7e8e9660"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7e8e97f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7e8e9980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f5d7e8e7280" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e8e7280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7e8e7600"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7e8e7790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7e8e7920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7e8e7ab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7e8e7c40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7e8e7dd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7e8e6020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7e8e61b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7e8e6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f5d7e0f8760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f5d7e0f8760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f5d7e0f8ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f5d7e0f8c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f5d7e0f8e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f5d7e0f7020"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e0f71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f5d7e0fbdd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f5d7e0fbdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f5d7e0fa180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f5d7e0fa310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7e0fa4a0"/>
        <function-ref name="get" scoped="" ref="0x7f5d7e0fa630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7e0fa7c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7e0fa950"/>
        <function-ref name="getMode" scoped="" ref="0x7f5d7e0faae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7e0fac70"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7e0fae00"/>
        <function-ref name="setMode" scoped="" ref="0x7f5d7e0f9020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f5d7e0f91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d7e0ffbf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d7e0ffbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e0fb4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e0fc4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d7e0fce60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e0fc9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d7e0fb9a0"/>
        <function-ref name="start" scoped="" ref="0x7f5d7e0fda80"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e0fc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f5d7e0ff360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f5d7e0ff360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f5d7e0ff6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f5d7e0f9440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f5d7e0f9440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f5d7e0f97c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f5d7e0f9950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f5d7e0f9ae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f5d7e0f9c70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f5d7e0f9e00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f5d7e0f8020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f5d7e0f81b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f5d7e0f8340"/>
        <function-ref name="setControl" scoped="" ref="0x7f5d7e0f84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d7e892020" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d7e892020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7e892e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7e891800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7e891340"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7e891cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f5d7e86f950" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f5d7e86f950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7e86e780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7e86d150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7e86ec40"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7e86d610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f5d7e88c5f0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d7e88c5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7e871430"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7e871db0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7e8718f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7e86f2a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f5d7e1145f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d7e1145f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e112e50"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e113e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d7e112800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e112340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d7e111340"/>
        <function-ref name="start" scoped="" ref="0x7f5d7e113430"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e113940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f5d7e10ed20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f5d7e10ed20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f0950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f5d7f2f0cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e10b670"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e10c550"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d7e10b020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e10ca10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d7e10bb30"/>
        <function-ref name="start" scoped="" ref="0x7f5d7e10db60"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e10c090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f5d7e1119b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d7e1119b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7e1107e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7e10e1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7e110ca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7e10e670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f5d7e7fb490" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f5d7e7fb490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7e7fb810"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7e7fb9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f5d7e7ff1d0" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f5d7e7ff1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e7fcb30"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e7fd9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f5d7e7fc4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e7fc020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f5d7e7fb020"/>
        <function-ref name="start" scoped="" ref="0x7f5d7e7fd020"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e7fd530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d7e805cf0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7e805cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e800220"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e8027c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d7e801590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d7e801110"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d7e800b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d7e8006a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e802c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d7e804940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d7e801ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d7e804e10"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e802340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f5d7e7abe80" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f5d7e7abe80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f5d7e7a9220"/>
        <function-ref name="runTask" scoped="" ref="0x7f5d7e7a93b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f5d7e7b0c30" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f5d7e7b0c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e7ab110"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e7ad6a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d7e7ac4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d7e7ac020"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d7e7aba10"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d7e7ab590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e7adb20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d7e7ae860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d7e7acab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d7e7aed30"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e7ad220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f5d7e7b6690" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f5d7e7b6690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f5d7e7b1cf0"/>
        <function-ref name="fired" scoped="" ref="0x7f5d7e7b3260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f5d7e7b1090"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f5d7e7b3ba0"/>
        <function-ref name="getdt" scoped="" ref="0x7f5d7e7b0680"/>
        <function-ref name="gett0" scoped="" ref="0x7f5d7e7b01e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f5d7e7b3700"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f5d7e7b5390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f5d7e7b16c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f5d7e7b5880"/>
        <function-ref name="stop" scoped="" ref="0x7f5d7e7b5d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f5d7e7a7cf0" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f5d7e7a7cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7e79d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f5d7e79c020" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f5d7e79c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f5d7f2f01a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f5d7f2f0510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f5d7e79ce30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f5d7e79b800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f5d7e79b340"/>
        <function-ref name="overflow" scoped="" ref="0x7f5d7e79bcc0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f5d7f7d9dc0" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f5d7f7daa10" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f5d7f791740" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f5d7f794990" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f5d7f791020" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f5d7f7942b0" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f5d7f793120" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f5d7f7954d0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f5d7f795bb0" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f5d7f793840" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f5d7fb17020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f5d7fdd83a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f5d7f740500" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f5d7f740280" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f5d7f7459c0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f5d7f7895a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f5d7f788020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f5d7f740d70" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f5d7f73ec80" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f5d7f741b00" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f5d7f73e4f0" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f5d7f742190" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f5d7f742920" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f5d7f741390" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f5d7f7895a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f5d7f788020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f5d7f741110" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f5d7f7895a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f5d7f788020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f5d7f732560" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f5d7f730ca0" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f5d7f730a20" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f5d7f72e9d0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f5d7f72e750" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f5d7f730270" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f5d7f731940" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f5d7f731020" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f5d7f732c90" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f5d7f73b890" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f5d7f7382a0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f5d7f738020" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f5d7f738c80" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f5d7f738a00" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f5d7f7376a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f5d7f737420" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f5d7f737d90" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f5d7f748120" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f5d7f747a10" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f5d7f747790" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f5d7f748850" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f5d7f74c350" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f5d7f747020" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f5d7f74b270" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f5d7f74a9e0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f5d7f74cae0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f5d7f74b980" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f5d7f74a2e0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f5d7f74a060" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f5d7f746450" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f5d7f7461d0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f5d7f7091f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f5d7f8697f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f5d7f866020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f5d7f869020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f5d7fcf1810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f5d7fe97020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f5d7fe96020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f5d7fe97790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f5d7fe8b270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f5d7fe8bac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f5d7f5f1bb0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d7f7f1d10"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f5d7f5f1260" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d7f7f1d10"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f5d7f5f15e0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f5f1910" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f5d7f5ec620" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5ec020" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f5ec350" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f5d7f5eb6d0" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f5d7f5ef2a0" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5ef020" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f5d7f5ee7f0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5ee210" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f5d7f5ee560" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f5d7f5e7020" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5f3c60" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f5d7f5e6110" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5e7e10" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f5d7f5e2490" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5e3e50" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f5e21c0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f5d7f5e3560" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f5d7f5e45e0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5e4020" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f5e4350" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f5d7f5d1d30" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f5d7f7f1930"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d7f5d1ab0" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f5d7f5dca10" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f5d7f7f1d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d7f5dc790" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f5d7f5f2e50" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f5d7f7f1d10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f5d7f5de950" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f5d7f7f1d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d7f5de6d0" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f5d7f5d93a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d7f7f1d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d7f5ddd70" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f5d7f5d9110" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d7f7f1d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f5d7f5dbe50" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d7f7f1d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d7f5db870" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f5d7f5dbbc0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f5d7f7f1d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f5d7f5d6810" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d7f5d6590" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f5d7f5d3b90" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d7f5d35e0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f5d7f5d3900" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f5d7f7f1550"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f5d7f5d8600" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d7f5d8380" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f5d7f5d02f0" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f5d7f7f1930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f5d7f5d2cf0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f5d7f5d0060" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f5d7f7f1930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f5d7f5cf190" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f5d7f7f1930"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f5d7f5ccad0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5cc850" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f5d7f5cacd0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5caa50" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f5d7f5c8020" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5cbce0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f5d7f5c25e0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5c2020" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f5c2350" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f5d7f5bdbb0" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5bd5b0" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f5bd8e0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f5d7f5bfd20" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f5d7f5c0900" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5c0680" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f5d7f5bee00" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f5be820" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f5d7f5beb70" loc="100:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f5d7f551ab0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f5d7f551830" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f5d7f54f020" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f5d7f550d30" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f5d7f554d60" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f5d7f550350" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f5d7f54b410" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
              <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f54ea80" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f5d7f54edd0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f54b130" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f5d7f541270" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f5d7f541a20" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f5d7f540270" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f5d7f53f1f0" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f5d7f53d940" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f5d7f53c190" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f5d7f540a00" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f5d7f53cd00" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f5d7f53ca80" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f5d7f542a60" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f5d7f53f9d0" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f5d7f53d190" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f5d7f4d3020" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f4d4960" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f5d7f4d4ce0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f5d7f4d6020" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f5d7f4d4020" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f5d7f4d68b0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f5d7f7e1720"/>
                <typename><typedef-ref name="message_t" ref="0x7f5d7f7e0d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f5d7f4d6c20" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f5d7f4b9a40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f5d7f4b6270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f5d7f4b4070" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f5d7f4b88e0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f5d7f4c9b20" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f5d7f4bd020" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f5d7f4bcc20" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7f4bc9a0" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f5d7f4bd8a0" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f5d7f4be6d0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7f4be450" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f5d7f4bb4b0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f5d7f4bc190" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f5d7f4c60e0" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f5d7f4c6a10" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f5d7f4c8720" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f5d7f4c84a0" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f5d7f4c55c0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f5d7f4c5340" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f5d7f4c37a0" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f5d7f4c2400" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7f4c2180" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f5d7f4c0020" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f5d7f4c2c50" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f5d7f38edd0" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f5d7f38e800" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f38eb40" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f5d7f387ac0" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f5d7f387840" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f5d7f386930" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f5d7f386360" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f3866a0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f5d7f388740" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f5d7f3832c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f5d7f384920" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f384c60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f5d7f383020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f5d7f387070" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f5d7f38a720" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f5d7f38bdb0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f5d7f38a130" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f5d7f38a480" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f5d7f3635b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f5d7f363330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f5d7f363df0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f5d7f362cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f5d7f362700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f5d7f362a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f5d7f360b50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f5d7f30dae0" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f5d7f3064e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f5d7f303890" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d7f32ce70"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f5d7f32b2b0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f5d7f30a350" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f5d7f30b350" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f5d7f30e980" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f5d7f30bb40" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f5d7f30adb0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f5d7f2fb020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f5d7f2fc750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f5d7f2f4d70" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7f2f4af0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f5d7f2f4350" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f5d7f2cb390" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f5d7f2d6020" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f5d7f2e6de0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d7f35bc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f5d7f35a4f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f5d7f2e6b60" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d7f35bc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f5d7f35a4f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f5d7f2d90e0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f5d7f2e02a0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d7f356c30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f5d7f3554f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f5d7f2e0020" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d7f356c30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f5d7f3554f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f5d7f2d0750" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f5d7f2cdcf0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f5d7f2e2830" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d7f359b60"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f5d7f357390"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f5d7f2e0a90" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d7f356c30"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f5d7f3554f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f5d7f2dd830" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f5d7f2dd5b0" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f5d7f2dee40" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f5d7f2d0020" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f5d7f2e2040" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d7f359b60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f5d7f357390"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f5d7f2e3da0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d7f359b60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f5d7f357390"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f5d7f2dfc80" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f5d7f2d0e80" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f5d7f2de690" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f5d7f2de410" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f5d7f2da190" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f5d7f2da910" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f5d7f2d1070" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f5d7f2d4020" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f5d7f2d8070" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f5d7f2d17b0" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f5d7f2d6800" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f5d7f2cf5c0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f5d7f2db070" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f5d7f364320"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f5d7f35c320"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f5d7f2cfd60" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f5d7f2ccbd0" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f5d7f2df4d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f5d7f2df250" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f5d7f2cbd30" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7f2cbab0" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f5d7f2e3600" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f5d7f35bc50"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f5d7f35a4f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f5d7f2d9850" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f5d7f2d5020" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f5d7f2d2800" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d7f32ce70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f5d7f32b2b0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f5d7f2d2580" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d7f32ce70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f5d7f32b2b0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f5d7f2d4af0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f5d7f33e020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f5d7f33e440"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f5d7f2d4870" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f5d7f33e020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f5d7f33e440"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f5d7f2ca730" loc="231:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f5d7f2cd570" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f5d7f2db880" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f5d7f2cc480" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f5d7f2d5790" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f5d7f2d8850" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d7f2c5ce0" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d7f2c5ce0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f5d7f2c2020" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7f2c2020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f5d7f2c2940" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7f2c2020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f5d7f2c1a50" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f5d7f2c11f0" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f5d7f2c01f0" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f5d7f24c930" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f5d7f20ea50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f5d7f20d1f0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f5d7f209b10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f5d7f209890" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f5d7f20f2d0" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f5d7f20b0e0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f5d7f208490" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f5d7f20d930" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f5d7f20e2b0" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f5d7f20a7c0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f5d7f20fa70" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f5d7f211420" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f5d7f20b860" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f5d7f209020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f5d7f20a070" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f5d7f211b50" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f5d7f222780" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f5d7f235c90" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f5d7f228020" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f5d7f229ca0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f5d7f23c390" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f5d7f2257a0" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f5d7f22d020" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f5d7f236da0" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f5d7f233b70" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f5d7f237d40" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f5d7f237ac0" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f5d7f238270" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f5d7f231900" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f5d7f227020" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f5d7f222020" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f5d7f229560" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f5d7f21d1f0" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f5d7f219880" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f5d7f23b270" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f5d7f231190" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f5d7f22fa90" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f5d7f236650" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f5d7f23e190" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f5d7f22ad40" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f5d7f22aac0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f5d7f2429f0" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f5d7f225020" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f5d7f220020" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f5d7f21b9a0" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f5d7f219120" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f5d7f224790" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f5d7f220750" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f5d7f2287b0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f5d7f21e1f0" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f5d7f23b990" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f5d7f22c1f0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f5d7f21f630" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f5d7f223790" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f5d7f22e760" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f5d7f22e4e0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f5d7f21a190" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f5d7f22a390" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f5d7f224020" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f5d7f23ec10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d7f318b90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f5d7f316020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f5d7f23e990" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f5d7f318b90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f5d7f316020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f5d7f232a00" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f5d7f23aa80" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f5d7f23a800" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f5d7f22f2a0" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7f22f020" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f5d7f21e9c0" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f5d7f2373b0" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f5d7f23a120" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f5d7f22cbb0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f5d7f22c930" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f5d7f23cac0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f5d7f220e70" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f5d7f223020" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f5d7f227790" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f5d7f22d9f0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f5d7f22d770" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f5d7f2322b0" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f5d7f235530" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f5d7f21a900" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f5d7f238bf0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f5d7f238970" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f5d7f21d9b0" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f5d7f233420" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f5d7f21b1f0" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f5d7ef45730" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f5d7ef45e60" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f5d7ef47880" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f5d7ef44cf0" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f5d7ef45020" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f5d7ef445b0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f5d7ef4aa90" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f5d7ef47190" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f5d7eeea020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f5d7eeea880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f5d7eeb5e00" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f5d7eeb3020" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f5d7eeb5570" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f5d7eeb46d0" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f5d7eeb3950" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f5d7eea7020" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d7eeae090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f5d7eea9d20" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d7eeae090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f5d7eeaa020" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f5d7eeaab20" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d7eeae090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f5d7eeaa8a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d7eeae090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f5d7eea9470" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f5d7eeae090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f5d7ed3ead0" loc="43:../../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f5d7ed3ead0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7f5d7ed39270" loc="80:../../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f5d7ed3ead0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f5d7ed37cb0" loc="97:../../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f5d7fe92c20"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f5d7ed3ead0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f5d7ed37a30" loc="97:../../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f5d7ed3ead0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f5d809a8c30"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:2"><attribute-ref name="one" ref="0x7f5d809a8c30"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7f5d7ed35c70" loc="108:../../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f5d7ed3ead0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f5d7ed359f0" loc="108:../../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f5d7ed3bb20" loc="57:../../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f5d7ed3aad0" loc="72:../../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f5d7ed39e50" loc="88:../../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f5d7ed3ead0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f5d7ed3b3b0" loc="50:../../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7f5d7ed3a2d0" loc="65:../../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7f5d7ed13dd0" loc="49:../../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7f5d7ed13b50" loc="49:../../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CRYPTO" loc="2:../../../tos/platforms/shimmer2r/CRYPTO.nc">
      <function command="" provided="0" name="xtea_decrypt" ref="0x7f5d7ecbe700" loc="13:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f5d7ecc0d80" loc="13:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f5d7ecbe0d0" loc="13:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ecbe460" loc="13:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_decrypt" ref="0x7f5d7eca33f0" loc="37:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f5d7eccaae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f5d7ecc84f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f5d7eca5a00" loc="37:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f5d7eca5d60" loc="37:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7eca3150" loc="37:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f5d7eccaae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f5d7ecc84f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_encrypt" ref="0x7f5d7ec9f460" loc="41:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7f5d7ecce020"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f5d7ecd0480"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f5d7eca1a30" loc="41:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f5d7eca1d90" loc="41:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ec9f1c0" loc="41:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7f5d7ecce020"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f5d7ecd0480"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_encrypt" ref="0x7f5d7ecbcc60" loc="16:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f5d7eccc6c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f5d7ecccd90"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f5d7ecbc2b0" loc="16:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f5d7ecbc610" loc="16:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ecbc9c0" loc="16:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f5d7eccc6c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f5d7ecccd90"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_decrypt" ref="0x7f5d7ecae2c0" loc="27:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f5d7ecca180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f5d7ecca740"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block_in" ref="0x7f5d7ecaf7a0" loc="27:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="block_out" ref="0x7f5d7ecafb40" loc="27:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ecae020" loc="27:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f5d7ecca180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f5d7ecca740"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_setup" ref="0x7f5d7eca12d0" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f5d7ecd0480"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7f5d7ecce020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f5d7eca24f0" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f5d7eca27f0" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7f5d7eca2b20" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f5d7eca1020" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f5d7ecd0480"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7f5d7ecce020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_done" ref="0x7f5d7ec9d0b0" loc="43:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f5d7ecd0480"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7f5d7ecce020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f5d7ec9ee00" loc="43:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f5d7ecd0480"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7f5d7ecce020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_encrypt" ref="0x7f5d7ecaa060" loc="31:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7f5d7eccc310"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f5d7eccda90"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f5d7ecab6d0" loc="31:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f5d7ecab9f0" loc="31:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="ctx" ref="0x7f5d7ecabda0" loc="31:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7f5d7eccc310"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f5d7eccda90"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="lsb" ref="0x7f5d7ec9d9b0" loc="45:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7ec9d730" loc="45:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_setup" ref="0x7f5d7eca7e30" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f5d7eccaae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f5d7ecc84f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f5d7eca71b0" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f5d7eca74b0" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7f5d7eca77e0" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f5d7eca7b80" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f5d7eccaae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f5d7ecc84f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc4_encrypt" ref="0x7f5d7ecc2810" loc="9:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7ecc2210" loc="9:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7f5d7ecc2580" loc="9:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_decrypt" ref="0x7f5d7eca90d0" loc="32:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7f5d7eccc310"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f5d7eccda90"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f5d7ecaa700" loc="32:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f5d7ecaaa20" loc="32:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="ctx" ref="0x7f5d7ecaadd0" loc="32:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7f5d7eccc310"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f5d7eccda90"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_decrypt" ref="0x7f5d7ecb3130" loc="22:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7f5d7ecd00d0"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f5d7ecd1a30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f5d7ecb5740" loc="22:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f5d7ecb5aa0" loc="22:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ecb5e60" loc="22:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7f5d7ecd00d0"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f5d7ecd1a30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_setup" ref="0x7f5d7ecab030" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f5d7eccda90"/>
                <typename><typedef-ref name="rc5_key" ref="0x7f5d7eccc310"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f5d7ecad310" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="keysize_b" ref="0x7f5d7ecad690" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
          <variable name="rounds" ref="0x7f5d7ecad9e0" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
          <variable name="ctx" ref="0x7f5d7ecadd50" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f5d7eccda90"/>
                <typename><typedef-ref name="rc5_key" ref="0x7f5d7eccc310"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_done" ref="0x7f5d7eca3d90" loc="38:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f5d7eccaae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f5d7ecc84f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f5d7eca3b10" loc="38:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f5d7eccaae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f5d7ecc84f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="xxtea_encrypt" ref="0x7f5d7ecc5d40" loc="6:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7ecc5740" loc="6:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7f5d7ecc5ab0" loc="6:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_setup" ref="0x7f5d7ecb7c80" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f5d7ecd1a30"/>
                <typename><typedef-ref name="rc2_key" ref="0x7f5d7ecd00d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f5d7ecb7020" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f5d7ecb7320" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7f5d7ecb7650" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f5d7ecb79d0" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f5d7ecd1a30"/>
                <typename><typedef-ref name="rc2_key" ref="0x7f5d7ecd00d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tea_decrypt" ref="0x7f5d7ecc62b0" loc="3:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="v0" ref="0x7f5d7ecc8c60" loc="3:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
          <variable name="v1" ref="0x7f5d7ecc6020" loc="3:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tea_encrypt" ref="0x7f5d7ecc5020" loc="4:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="v0" ref="0x7f5d7ecc6960" loc="4:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
          <variable name="v1" ref="0x7f5d7ecc6c90" loc="4:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_done" ref="0x7f5d7ecb97c0" loc="18:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f5d7eccc6c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f5d7ecccd90"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f5d7ecb9540" loc="18:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f5d7eccc6c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f5d7ecccd90"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="msb" ref="0x7f5d7ec9b2e0" loc="46:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7ec9b060" loc="46:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f5d809a2520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_decrypt" ref="0x7f5d7ecbada0" loc="17:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f5d7eccc6c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f5d7ecccd90"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f5d7ecba3f0" loc="17:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f5d7ecba750" loc="17:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ecbab00" loc="17:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f5d7eccc6c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f5d7ecccd90"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="xxtea_decrypt" ref="0x7f5d7ecc3ad0" loc="7:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7ecc34d0" loc="7:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7f5d7ecc3840" loc="7:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_encrypt" ref="0x7f5d7ecaf020" loc="26:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f5d7ecca180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f5d7ecca740"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block_in" ref="0x7f5d7ecb1610" loc="26:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="block_out" ref="0x7f5d7ecb19b0" loc="26:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ecb1d40" loc="26:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f5d7ecca180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f5d7ecca740"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_setup" ref="0x7f5d7ecbdb20" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f5d7eccc6c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f5d7ecccd90"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f5d7ecbee40" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f5d7ecbd190" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7f5d7ecbd4c0" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f5d7ecbd870" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f5d7eccc6c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f5d7ecccd90"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_decrypt" ref="0x7f5d7ec9e6b0" loc="42:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7f5d7ecce020"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f5d7ecd0480"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f5d7ec9fbc0" loc="42:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f5d7ec9e020" loc="42:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ec9e410" loc="42:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7f5d7ecce020"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f5d7ecd0480"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_done" ref="0x7f5d7ecaec50" loc="28:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f5d7ecca180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f5d7ecca740"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f5d7ecae9d0" loc="28:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f5d7ecca180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f5d7ecca740"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="xtea_encrypt" ref="0x7f5d7ecc0690" loc="12:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f5d7ecc1d10" loc="12:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f5d7ecc0060" loc="12:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ecc03f0" loc="12:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_encrypt" ref="0x7f5d7ecb5020" loc="21:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7f5d7ecd00d0"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f5d7ecd1a30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f5d7ecb64d0" loc="21:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f5d7ecb6830" loc="21:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7ecb6bf0" loc="21:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7f5d7ecd00d0"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f5d7ecd1a30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_done" ref="0x7f5d7ecb3aa0" loc="23:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f5d7ecd1a30"/>
                <typename><typedef-ref name="rc2_key" ref="0x7f5d7ecd00d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f5d7ecb3820" loc="23:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f5d7ecd1a30"/>
                <typename><typedef-ref name="rc2_key" ref="0x7f5d7ecd00d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_done" ref="0x7f5d7eca9a30" loc="33:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f5d7eccda90"/>
                <typename><typedef-ref name="rc5_key" ref="0x7f5d7eccc310"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ctx" ref="0x7f5d7eca97b0" loc="33:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f5d7eccda90"/>
                <typename><typedef-ref name="rc5_key" ref="0x7f5d7eccc310"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc4_decrypt" ref="0x7f5d7ecc1620" loc="10:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f5d7ecc1020" loc="10:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7f5d7ecc1390" loc="10:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f5d809a2160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_encrypt" ref="0x7f5d7eca52c0" loc="36:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f5d7eccaae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f5d7ecc84f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f5d7eca67d0" loc="36:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f5d7eca6b30" loc="36:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f5d7eca5020" loc="36:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f5d7eccaae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f5d7ecc84f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_setup" ref="0x7f5d7ecb2e50" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f5d7ecca180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f5d7ecca740"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f5d7ecb21f0" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f5d7ecb24f0" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="numrounds" ref="0x7f5d7ecb2810" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f5d7ecb2ba0" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f5d7ecca180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f5d7ecca740"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d7ece3a90" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d7ece3a90"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f5d7ecda7c0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f5d7ecde070" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f5d7ecdcdf0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f5d7ecdc820" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f5d7ecdcb60" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f5d7ecdc070" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f5d7ecd98a0" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f5d7ecd9020" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f5d7ecde850" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f5d7ece0640" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f5d7ece03c0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f5d7ecdbdc0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f5d7ecdb7f0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f5d7ecdbb30" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f5d7ecdf120" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f5d7ece0e80" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f5d7ecdf920" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d7e90cc40" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d7e90cc40"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f5d7e9095a0" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f5d809a2920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f5d7e9035d0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f5d7e9035d0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f5d7e903810" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7e903810"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f5d7e8ff390" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7e903810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f5d7e9013b0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f5d7e9009d0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7e903810"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7e903810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f5d7e900400" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7e903810"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f5d7e900740" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7e903810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f5d7e901b90" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f5d7fe9b090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f5d7e8ffb80" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7e903810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f5d7e902390" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7e903810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f5d7e902110" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f5d7e903810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f5d7e902bc0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
