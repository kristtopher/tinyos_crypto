<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="51:TestCryptAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f51a9902c80"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f51aa3eede0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f51aa3eede0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f51aa217590"/></to>
    </wire>
    <wire loc="54:TestCryptAppC.nc">
      <from><interface-ref name="CRYPTO" scoped="" ref="0x7f51a98af580"/></from>
      <to><interface-ref name="CRYPTO" scoped="" ref="0x7f51a98a3bc0"/></to>
    </wire>
    <wire loc="6:../../../tos/platforms/shimmer2r/CRYPTOC.nc">
      <from><interface-ref name="CRYPTO" scoped="" ref="0x7f51a98a3bc0"/></from>
      <to><interface-ref name="CRYPTO" scoped="" ref="0x7f51a98947a0"/></to>
    </wire>
    <wire loc="57:TestCryptAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51a98edda0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51a9536640"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51a9536640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f51a952d610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f51aa3ea320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51a9524400"/></to>
    </wire>
    <wire loc="49:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f51aa3ea320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51a98fd020"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f51aa3ea320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51a8d81e50"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f51aa3ea320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51aa0f2540"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f51aa3ea320"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51a992ba60"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f51aa217c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f51aaaaa3a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f51aaaaa3a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f51aa482c30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f51aa2166c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51aa3ec2f0"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f51aa3ec2f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51aa3e6110"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f51aa216dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f51aa3ea320"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f51aa3e6820"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f51aa3e7500"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f51aa3e7500"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51aa3af440"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f51aa3e5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51aa3d6080"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f51aa3e5700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51a9b372e0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f51aa3af440"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51aa3953c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f51aa3a59e0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f51aa395a70"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f51aa72b4c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f51aa394cc0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f51aa351a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa28f6d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f51aa33f410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa287b30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f51aa348d10"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa294160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f51aa32b020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa26ecb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f51aa34d020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa295480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f51aa333570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa26e020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f51aa328020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa256cb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f51aa33aa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa267220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f51aa358020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa2e49d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f51aa32d020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa27d2f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f51aa335890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa27e610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f51aa33e8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa27f220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f51aa347c70"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa28d7a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f51aa32a020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa2652f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f51aa33c020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa2776d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f51aa34dda0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa28eac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f51aa35a7b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2f2540"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f51aa3323e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa266610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f51aa3575a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa296020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f51aa338020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa2606d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f51aa342dc0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa29da90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f51aa32c020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa2757a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f51aa34e140"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa29ede0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f51aa334700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa276ac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f51aa329020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa25e7a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f51aa33b5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa270b30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2eb3e0"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f51aa3311f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa25fac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f51aa32e020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f51aa285cb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f51aa330020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa256020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f51aa336a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f51aa285020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f51aa3375a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f51aa258b30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f51aa2f0450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2f1d80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f51aa2f0aa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f51aa251a90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f51aa2ef120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f51aa24e260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa29c930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2f2540"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa299020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2f1d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa293020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2f2540"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa2927a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2f1d80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa28c610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2f2540"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa28ac50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2f1d80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f51aa2e92f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2eabf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f51aa2e9940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f51aa24e9f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f51aa2e8020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f51aa24d240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa284b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2eb3e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa2822f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2eabf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa27c160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2eb3e0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa27b7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2eabf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa274610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2eb3e0"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa273c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2eabf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa26db40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2eb3e0"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa26b2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2eabf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa264160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2eb3e0"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa2637a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2eabf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa25d610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2eb3e0"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa25cc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2eabf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f51aa255b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51aa2eb3e0"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f51aa2532f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f51aa2eabf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aa481b70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f51aa47a2c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f51aaa9c3b0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f51a9924a20"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x7f51a9954bf0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f51a9921440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f51a995b020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f51a995b020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f51a921a020"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f51a99200c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f51a995bc30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f51a995bc30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f51aa1607e0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f51a9903be0"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f51a99241a0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f51aa1607e0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f51aa0f8d60"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f51a99598b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f51aa15e470"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f51aa15e470"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f51aa0f96c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f51a9957020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f51aa15cb20"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f51aa15cb20"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f51aa0f6a10"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f51a921ac90"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f51aa1bece0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f51a9219930"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f51aa15e470"/></to>
    </wire>
    <wire loc="54:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f51aa1bece0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f51aa172580"/></to>
    </wire>
    <wire loc="55:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f51aa171400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f51aa1673f0"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f51aa1673f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f51aa14e300"/></to>
    </wire>
    <wire loc="56:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f51aa170060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f51aa15e470"/></to>
    </wire>
    <wire loc="57:../../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f51aa16f720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f51aa1607e0"/></to>
    </wire>
    <wire loc="169:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f51aa16e480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f51aa16ec60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f51aa1633b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f51aa0f2b90"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f51aa0f2b90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f51aa0e0c40"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f51aa1601d0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f51aa0f90d0"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f51aa0f2540"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51aa0e05f0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f51aa0ec2b0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f51aa14f330"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f51aa0f54a0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f51aa0ee790"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f51aa0f4120"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f51aa0efc60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f51aa0e7970"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f51a9972a30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f51aa0ee790"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f51a9faede0"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f51aa0efc60"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f51a9fae6c0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f51a9fadc20"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f51aa0e7970"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f51aa0d8760"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f51aa0ec2b0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f51a9fab920"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f51aa0ec2b0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f51a9fa1cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f51aa0ec2b0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f51a9fac590"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f51aa0d4530"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f51a9face80"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f51aa0d9a40"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f51aa0cf7e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f51a9fa7e00"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f51aa0ca780"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f51a9f7b0c0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f51a9f7b0c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f51a99870c0"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f51a9f97d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f51a9f7b8d0"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f51a9f7b8d0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f51a998d440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f51aa0776e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f51aa0af4f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f51aa07bc70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f51aa074a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f51a9fa9020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f51a9fa9800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f51a9f79020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f51a998c440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f51a998c440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f51a9f11d00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f51a998d440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f51a9f12670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a998b020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a9987920"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f51a9986020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f51a998e020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f51a998e020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f51a9f18c80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a998ec70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a9158a90"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a9158a90"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a9aea2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a9f0b1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a998b020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a914a020"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9f0f8e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f51a9f0de50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f51a9159e00"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f51a9159e00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f51a9aeb020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f51a9f07710"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f51a9152440"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f51a9152440"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f51a9aee4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9f0f8e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9e7bdc0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f51a9f11d00"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f51a9e79890"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f51a9f12670"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f51a9e7a6d0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f51a9f18c80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f51a9e7b020"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a9e773e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a9f0b1d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f51a9e785b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f51a9f0de50"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f51a9e725b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f51a9f07710"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f51a9e77a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f51a9e68b60"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f51a9e68b60"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f51a9e5c360"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f51a9e71020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f51a9b86d20"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f51a9b86d20"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f51a9b81d90"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f51a9e6e120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f51a9b64020"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f51a9b64020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f51a9b60a70"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f51a9e60bd0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f51a9e57970"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f51a9e616d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f51a9e57020"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f51a9e1c860"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f51a9d33cc0"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f51a9d33cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c84100"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f51a9e26800"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f51a9d2fcc0"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f51a9d2fcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c80d10"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f51a9e19800"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f51a9d2dcc0"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f51a9d2dcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c7b740"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f51a9e17800"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f51a9d27cc0"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f51a9d27cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c72d10"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f51a9e15800"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f51a9d29cc0"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f51a9d29cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c76100"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f51a9e2dbc0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f51a9a47940"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f51a9d8f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9cc3740"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f51a9d7a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c93100"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f51a9d31ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c84100"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f51a9d0ccb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9bfa740"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f51a9d76810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c8a740"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f51a9d629a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c59460"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f51a9d4d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c2ad10"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f51a9d3d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c03100"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f51a9d18cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c16740"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f51a9d04cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9bf5100"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f51a9d89810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9cb5740"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f51a9d85810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9cacd10"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f51a9d70810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c7b740"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f51a9d5c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c4b100"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f51a9d479a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c1cd10"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f51a9d379a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9bf5100"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f51a9d93810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9ccc100"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f51a9d7f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c9dd80"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f51a9d6a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c6d740"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f51a9d12cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c08740"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f51a9d06cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9bf5100"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f51a9d1ecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c2e100"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f51a9d66810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c64e60"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f51a9d529a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c33740"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f51a9d419a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c0dd10"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f51a9d10cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c03100"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f51a9d25cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c3d100"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f51a9d8d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9cbe100"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f51a9d78810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c8fd10"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f51a9d459a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c16740"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f51a9d74810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c84100"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f51a9d609a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c55e00"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f51a9d4b9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c25740"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f51a9d3b9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9bffd10"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f51a9d21cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c33740"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f51a9d99800"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9cfdd10"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f51a9d83810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9ca6740"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f51a9d6e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c76100"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f51a9d5a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c47d10"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f51a9d1ccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c6d740"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f51a9d16cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c11100"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f51a9d0acb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9bf5100"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f51a9d569a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c3d100"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f51a9d1acc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c68100"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f51a9d91810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9cc8d10"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f51a9d7c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c98740"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f51a9d68810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c68100"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f51a9d23cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c38d10"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f51a9d0ecb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9bffd10"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f51a9d649a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c5e9f0"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f51a9d509a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c2e100"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f51a9d3f9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c08740"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f51a9d8b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9cbad10"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f51a9d439a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c11100"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f51a9d87810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9cb0100"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f51a9d72810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c80d10"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f51a9d5e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c50740"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f51a9d499a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c20100"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f51a9d399a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9bfa740"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f51a9d95810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9cd2740"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f51a9d81810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9ca1100"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f51a9d6c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c72d10"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f51a9d589a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c42740"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f51a9d2bca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c7b740"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f51a9d14cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c0dd10"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f51a9d549a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c38d10"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f51a9d08cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9bfa740"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f51a9d02cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c1cd10"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f51a9d359f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f51a9c8a740"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f51a9b81d90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f51a9b7ae50"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a9b68020"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f51a9b372e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51a9b60470"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f51a9b5d060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f51a9b61b10"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f51a9b61b10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f51a9b34020"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f51a9b5c340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f51a9b3ae70"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f51a9b3ae70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f51a9b20b90"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f51a9b57660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f51a9b380f0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f51a9b380f0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f51a9b1b710"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f51a9b232f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7f51a9d66810"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f51a9b1fde0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f51a9d629a0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f51a9b19930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7f51a9d609a0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f51a9152be0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f51a9aed3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f51a91512b0"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f51a9a51d70"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f51a9a51d70"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f51a9a47940"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f51a9157a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f51a9e68b60"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a91572b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a9aeaad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a9aeaad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a9a59400"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9ae98a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a914a020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a9aea2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a9a5a020"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a9a5a020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a8d7d530"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f51a9aee4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f51a9ae7d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f51a9aeb020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f51a9a5b210"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f51a9a5b210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f51a8d7e740"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f51a9aed3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f51a9ae6710"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a9a59400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a8d7c930"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9a59cd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9ae98a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a9ad4bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a9a59400"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f51a9ae6d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f51a9e616d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f51a9ad45e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f51a9e60bd0"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f51a9a5a7a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f51a8d7dcb0"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a8d7b270"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9a59cd0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f51a8d7ba30"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f51a8d804a0"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f51a8d78c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f51a9a3e700"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f51a9e5c360"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f51a9a39250"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f51a9d33cc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f51a9a371f0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f51a9d2dcc0"/></to>
    </wire>
    <wire loc="114:../../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x7f51a991a500"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x7f51a98fd680"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x7f51a9903be0"/></to>
    </wire>
    <wire loc="44:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f51a98a2420"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f51aa3eede0"/></to>
    </wire>
    <wire loc="47:../../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f51a98a2b40"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f51aa1633b0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f51a952d610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f51a95231d0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f51a95231d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51a93c7690"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f51a9524400"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51a9443760"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f51a951ba80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f51a93b9cf0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f51a9443760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51a8d2d860"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f51a93c2c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f51a9417cf0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f51a94101d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f51a9442020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f51a9442020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f51a8d265f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f51a93ae020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f51a94a4020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f51a94a4020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f51a949e5f0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f51a8d2d860"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f51a8d10360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f51a8d20d20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f51a8d2c140"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f51a8d2c140"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f51a8d10bf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f51a8d239b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f51a94a4020"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a8d0ddd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a8d16020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a8d16020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a94fc4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a8d0b440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a8d15760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a8d15760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a94f9280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a8d09760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a8d13a80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a8d13a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a94f8ba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a94fc4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a94f9280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f51aa33f410"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a94f8ba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f51aa336a20"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a94fc4d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a94f9280"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f51aa33e8c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a94f8ba0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7f51aa335890"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a94fc4d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a94f9280"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f51aa33c020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a94f8ba0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f51aa334700"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a94fc4d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a94f9280"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f51aa33b5a0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a94f8ba0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f51aa333570"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a94fc4d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a94f9280"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f51aa33aa50"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a94f8ba0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f51aa3323e0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a94fc4d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a94f9280"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f51aa338020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a94f8ba0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f51aa3311f0"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a94fc4d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a94f9280"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f51aa3375a0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a94f8ba0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f51aa330020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f51a9481950"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f51a9b81d90"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f51a940d490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f51a93bce80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="37:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P.UartP" loc="41(Msp430Uart0P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.2 $ $Date: 2010/07/29 13:19:06 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="39(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2013/04/09 14:28:58 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ShimmerSerialP" loc="35:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../../tos/system/QueueC.nc">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../../tos/lib/printf/PutcharP.nc">
      <documentation loc="64:../../../tos/lib/printf/PutcharP.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Kevin Klues &#60;klueska@cs.stanford.edu>&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestCryptC" loc="46:TestCryptC.nc" safe="">
      <documentation loc="33:../../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialStartP" loc="37:../../../tos/lib/serial/SerialStartP.nc">
      <documentation loc="33:../../../tos/lib/serial/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CRYPTOC" loc="1:../../../tos/platforms/shimmer2r/CRYPTOC.nc">
      <configuration/>
    </component>
    <component qname="CRYPTOP" loc="3:../../../tos/platforms/shimmer2r/CRYPTOP.nc" safe="">
      <module/>
    </component>
    <component qname="TestCryptAppC.TimerMilliC" loc="44(TestCryptAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f51aa324970" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f51aa324d10" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f51aa323110" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f51aa323490" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f51aa323810" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f51aa323b80" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f51aa322020" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f51aa3223b0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f51aa322780" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f51aa2e6e70" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f51aa2e3270" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f51aa2093c0" loc="47:../../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f51aa1da0d0" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f51aa1b70d0" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart0C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f51a9cfc190" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f51a9cfc540" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f51a9cfc8f0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f51a9cfcca0" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f51a9cfb060" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f51a9b7be60" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f51a9b7be60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f51a9acf5b0" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f51a9ac25b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f51a9aa9d80" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:../../../tos/system/QueueC.nc" abstract="">
      <documentation loc="33:../../../tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x7f51a9955490" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x7f51a9955490"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x7f51a9955810" loc="42:../../../tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f51a94d99c0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f51a94d99c0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f51a94a0ba0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f51a94a0ba0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f51a949d3b0" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f51a949d3b0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f51a949d7a0" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f51a949d7a0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f51a949c020" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f51a949c020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f51a949c3f0" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f51a949cbf0" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f51a949cbf0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f51a947a020" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f51a947a020"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f51a947a7f0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f51a947a7f0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f51a947abe0" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f51a947abe0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f51a9479400" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f51a9479400"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f51a94797d0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f51a943b4f0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f51a943b4f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f51a940ad70" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f51a940ad70"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f51a94070d0" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f51a93b71f0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f51a93b71f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f51aa3ea320" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f51aa3ea320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa3ea6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f51aa3eede0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f51aa3eede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f51aa3ed180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51aa3ec2f0" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51aa3ec2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa3ec670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f51aa3e5020" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f51aa3e5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa3e53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51aa3e6110" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51aa3e6110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa3e6490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f51aa3e6820" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f51aa3e6820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa3e6ba0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f51aa3e5700" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f51aa3e5700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa3e5a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51aa3d6080" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51aa3d6080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa3d6400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f51aa3e7500" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f51aa3e7500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa3e7880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f51aa3a59e0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f51aa3a59e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f51aa3ab980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f51aa3ab020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f51aa3ab1b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f51aa3ab340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f51aa3a5d60"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f51aa3ab4d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f51aa3ab660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f51aa3ab7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51aa3af440" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51aa3af440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa3af7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f51aa395a70" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f51aa395a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f51aa394980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f51aa394020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f51aa3941b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f51aa394340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f51aa395df0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f51aa3944d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f51aa394660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f51aa3947f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f51aa394cc0" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f51aa394cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f51aa3930a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51aa3953c0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51aa3953c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa395740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f51aa351a50" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f51aa351a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa351dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa350020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa3501b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa350340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa3504d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa350660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa3507f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa350980"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa350b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f51aa33f410" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f51aa33f410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa33f790"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa33f920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa33fab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa33fc40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa33fdd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa33e020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa33e1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa33e340"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa33e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f51aa348d10" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f51aa348d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa3470e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa347270"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa347400"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa347590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa347720"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa3478b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f51aa32b020" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f51aa32b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa32b3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa32b530"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa32b6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa32b850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa32b9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa32bb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f51aa34d020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f51aa34d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa34d3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa34d530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa34d6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa34d850"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa34d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f51aa333570" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f51aa333570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa3338f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa333a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa333c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa333da0"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa332020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f51aa328020" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f51aa328020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa3283a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa328530"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa3286c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa328850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa3289e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa328b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f51aa33aa50" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f51aa33aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa33add0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa339020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa3391b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa339340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa3394d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa339660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa3397f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa339980"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa339b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f51aa358020" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f51aa358020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa3583a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa358530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa3586c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa358850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa3589e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa358b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa358d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa357020"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa3571b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f51aa32d020" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f51aa32d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa32d3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa32d530"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa32d6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa32d850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa32d9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa32db70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f51aa335890" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f51aa335890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa335c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa335da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa334020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa3341b0"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa334340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f51aa33e8c0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f51aa33e8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa33ed40"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa33d020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa33d1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa33d340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa33d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa33d660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa33d7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa33d980"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa33db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f51aa347c70" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f51aa347c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa341020"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa3411b0"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa341340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa3414d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa341660"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa3417f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f51aa32a020" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f51aa32a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa32a3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa32a530"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa32a6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa32a850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa32a9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa32ab70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f51aa33c020" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f51aa33c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa33c3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa33c530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa33c6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa33c850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa33c9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa33cb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa33cd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa33b020"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa33b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f51aa34dda0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f51aa34dda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa349180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa349310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa3494a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa349630"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa3497c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f51aa35a7b0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f51aa35a7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa35ab30"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa35acc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa35ae50"/>
        <function-ref name="get" scoped="" ref="0x7f51aa362020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa3621b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa362340"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa3624d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa362660"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa3627f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa362980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa362b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f51aa3323e0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f51aa3323e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa332760"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa3328f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa332a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa332c10"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa332da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f51aa3575a0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f51aa3575a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa357920"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa357ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa357c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa357dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa351020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa3511b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa351340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa3514d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa351660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f51aa338020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f51aa338020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa3383a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa338530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa3386c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa338850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa3389e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa338b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa338d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa337020"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa3371b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f51aa342dc0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f51aa342dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa348180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa348310"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa3484a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa348630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa3487c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa348950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f51aa32c020" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f51aa32c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa32c3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa32c530"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa32c6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa32c850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa32c9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa32cb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f51aa34e140" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f51aa34e140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa34e4c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa34e650"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa34e7e0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa34e970"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa34eb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f51aa334700" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f51aa334700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa334a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa334c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa334da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa333020"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa3331b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f51aa329020" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f51aa329020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa3293a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa329530"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa3296c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa329850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa3299e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa329b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f51aa33b5a0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f51aa33b5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa33b920"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa33bab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa33bc40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa33bdd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa33a020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa33a1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa33a340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa33a4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa33a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f51aa341b70" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f51aa341b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa340020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa3401b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa340340"/>
        <function-ref name="get" scoped="" ref="0x7f51aa3404d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa340660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa3407f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa340980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa340b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa340ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa340e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa33f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f51aa3311f0" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f51aa3311f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa331570"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa331700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa331890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa331a20"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa331bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f51aa32e020" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f51aa32e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa32e3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa32e530"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa32e6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa32e850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa32e9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa32eb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f51aa330020" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f51aa330020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa3305a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa330730"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa3308c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa330a50"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa330be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f51aa336a20" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f51aa336a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa336da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa335020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa3351b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa335340"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa3354d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f51aa3375a0" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f51aa3375a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa337920"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa337ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa337c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa337dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa336020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa3361b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa336340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa3364d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa336660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f51aa2f0aa0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f51aa2f0aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa2f0e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f51aa2f0450" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f51aa2f0450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa2f07d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f51aa2ef120" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f51aa2ef120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa2ef4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f51aa2f1d80" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa2f1d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa2f0180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f51aa2f2540" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa2f2540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa2f28c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa2f2a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa2f2be0"/>
        <function-ref name="get" scoped="" ref="0x7f51aa2f2d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa2f1020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa2f11b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa2f1340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa2f14d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa2f1660"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa2f17f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa2f1980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f51aa2e9940" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f51aa2e9940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa2e9cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f51aa2e92f0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f51aa2e92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa2e9670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f51aa2e8020" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f51aa2e8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa2e83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f51aa2eabf0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa2eabf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa2e9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f51aa2eb3e0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa2eb3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa2eb760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa2eb8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa2eba80"/>
        <function-ref name="get" scoped="" ref="0x7f51aa2ebc10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa2ebda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa2ea020"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa2ea1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa2ea340"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa2ea4d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa2ea660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa2ea7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa29da90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa29da90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa29de10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa29c020"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa29c1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa29c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa29c4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa29c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa2e49d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa2e49d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa2e4d50"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa29e020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa29e1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa29e340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa29e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa29e660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa29e7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa29e980"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa29eb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa299020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa299020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa2993a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa29ede0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa29ede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa29d180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa29d310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa29d4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa29d630"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa29d7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa29c930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa29c930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa29ccb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa29ce40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa29a020"/>
        <function-ref name="get" scoped="" ref="0x7f51aa29a1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa29a340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa29a4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa29a660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa29a7f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa29a980"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa29ab10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa29aca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa294160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa294160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa2944e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa294670"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa294800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa294990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa294b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa294cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa296020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa296020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa2963a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa296530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa2966c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa296850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa2969e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa296b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa296d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa295020"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa2951b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa2927a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa2927a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa292b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa295480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa295480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa295800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa295990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa295b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa295cb0"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa295e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa293020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa293020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa2933a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa293530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa2936c0"/>
        <function-ref name="get" scoped="" ref="0x7f51aa293850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa2939e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa293b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa293d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa292020"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa2921b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa292340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa2924d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa28d7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa28d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa28db20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa28dcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa28de40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa28c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa28c1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa28c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa28f6d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa28f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa28fa50"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa28fbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa28fd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa28e020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa28e1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa28e340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa28e4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa28e660"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa28e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa28ac50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa28ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa289020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa28eac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa28eac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa28ee40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa28d020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa28d1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa28d340"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa28d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa28c610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa28c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa28c990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa28cb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa28ccb0"/>
        <function-ref name="get" scoped="" ref="0x7f51aa28ce40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa28a020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa28a1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa28a340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa28a4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa28a660"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa28a7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa28a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa285cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa285cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa2840a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa284230"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa2843c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa284550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa2846e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa284870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa287b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa287b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa286020"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa2861b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa286340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa2864d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa286660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa2867f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa286980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa286b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa286ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa2822f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa2822f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa282670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa285020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa285020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa2853a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa285530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa2856c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa285850"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa2859e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa284b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa284b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa283020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa2831b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa283340"/>
        <function-ref name="get" scoped="" ref="0x7f51aa2834d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa283660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa2837f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa283980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa283b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa283ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa283e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa282020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa27d2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa27d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa27d670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa27d800"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa27d990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa27db20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa27dcb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa27de40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa27f220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa27f220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa27f5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa27f730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa27f8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa27fa50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa27fbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa27fd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa27e020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa27e1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa27e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa27b7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa27b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa27bb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa27e610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa27e610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa27e990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa27eb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa27ecb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa27ee40"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa27d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa27c160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa27c160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa27c4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa27c670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa27c800"/>
        <function-ref name="get" scoped="" ref="0x7f51aa27c990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa27cb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa27ccb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa27ce40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa27b020"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa27b1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa27b340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa27b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa2757a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa2757a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa275b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa275cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa275e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa274020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa2741b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa274340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa2776d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa2776d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa277a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa277be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa277d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa276020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa2761b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa276340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa2764d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa276660"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa2767f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa273c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa273c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa272020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa276ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa276ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa276e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa275020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa2751b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa275340"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa2754d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa274610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa274610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa274990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa274b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa274cb0"/>
        <function-ref name="get" scoped="" ref="0x7f51aa274e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa273020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa2731b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa273340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa2734d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa273660"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa2737f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa273980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa26ecb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa26ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa26d0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa26d230"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa26d3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa26d550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa26d6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa26d870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa270b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa270b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa26f020"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa26f1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa26f340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa26f4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa26f660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa26f7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa26f980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa26fb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa26fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa26b2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa26b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa26b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa26e020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa26e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa26e3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa26e530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa26e6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa26e850"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa26e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa26db40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa26db40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa26c020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa26c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa26c340"/>
        <function-ref name="get" scoped="" ref="0x7f51aa26c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa26c660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa26c7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa26c980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa26cb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa26cca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa26ce30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa26b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa2652f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa2652f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa265670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa265800"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa265990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa265b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa265cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa265e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa267220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa267220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa2675a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa267730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa2678c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa267a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa267be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa267d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa266020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa2661b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa266340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa2637a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa2637a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa263b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa266610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa266610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa266990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa266b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa266cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa266e40"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa265020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa264160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa264160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa2644e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa264670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa264800"/>
        <function-ref name="get" scoped="" ref="0x7f51aa264990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa264b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa264cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa264e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa263020"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa2631b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa263340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa2634d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa25e7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa25e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa25eb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa25ecb0"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa25ee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa25d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa25d1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa25d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa2606d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa2606d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa260a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa260be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa260d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa25f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa25f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa25f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa25f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa25f660"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa25f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa25cc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa25cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa25b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa25fac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa25fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa25fe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa25e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa25e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa25e340"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa25e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa25d610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa25d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa25d990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa25db20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa25dcb0"/>
        <function-ref name="get" scoped="" ref="0x7f51aa25de40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa25c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa25c1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa25c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa25c4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa25c660"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa25c7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa25c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f51aa256cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f51aa256cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa2550a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f51aa255230"/>
        <function-ref name="captured" scoped="" ref="0x7f51aa2553c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa255550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa2556e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f51aa255870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f51aa258b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f51aa258b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51aa257020"/>
        <function-ref name="getControl" scoped="" ref="0x7f51aa2571b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa257340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51aa2574d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51aa257660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa2577f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51aa257980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51aa257b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f51aa257ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f51aa2532f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f51aa2532f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa253670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f51aa256020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f51aa256020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51aa2563a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51aa256530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51aa2566c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51aa256850"/>
        <function-ref name="fired" scoped="" ref="0x7f51aa2569e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51aa255b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51aa255b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa254020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51aa2541b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51aa254340"/>
        <function-ref name="get" scoped="" ref="0x7f51aa2544d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51aa254660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51aa2547f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51aa254980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51aa254b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f51aa254ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51aa254e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51aa253020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f51aa24d240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f51aa24d240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa24d5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f51aa251a90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f51aa251a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa251e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f51aa24e260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f51aa24e260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa24e5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f51aa24e9f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f51aa24e9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51aa24ed70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f51aa72b4c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f51aa72b4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f51aa72b840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f51aaa9c3b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f51aaa9c3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f51aaa9c730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f51aaa9c8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f51aaa9ca50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f51aa905bc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f51aa905bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f51aaa41020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f51aa216dc0" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f51aa216dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa215180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f51aa217590" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f51aa217590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f51aa217910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f51aa2166c0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f51aa2166c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa216a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f51aa217c00" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f51aa217c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa216020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f51aa2161b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f51aa216340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f51aab19410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f51aab19410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51aab19790"/>
        <function-ref name="runTask" scoped="" ref="0x7f51aab19920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f51aaaaa3a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f51aaaaa3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aaaaa720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f51aaaaa8b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f51aaaaaa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f51aa481b70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f51aa481b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51aa480020"/>
        <function-ref name="runTask" scoped="" ref="0x7f51aa4801b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f51aa47a2c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f51aa47a2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f51aa47a640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f51aa47a7d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f51aa47a960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f51aa482c30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f51aa482c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa481020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f51aa4811b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f51aa481340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f51a995b020" loc="49:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f51a995b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a995b3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51a995b530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51a995b6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f51a995b850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a995b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f51a995bc30" loc="50:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f51a995bc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51a9959020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f51a99591b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51a9959340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51a99594d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f51a9959660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f51a99598b0" loc="51:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f51a99598b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f51a9959c30"/>
        <function-ref name="source" scoped="" ref="0x7f51a9959dc0"/>
        <function-ref name="address" scoped="" ref="0x7f51a9958020"/>
        <function-ref name="destination" scoped="" ref="0x7f51a99581b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f51a9958340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f51a99584d0"/>
        <function-ref name="type" scoped="" ref="0x7f51a9958660"/>
        <function-ref name="setType" scoped="" ref="0x7f51a99587f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f51a9958980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f51a9958b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f51a9958ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f51a9957020" loc="52:../../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f51a9957020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f51a99573a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f51a9957530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f51a99576c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f51a921a020" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f51a921a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a921a3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51a921a530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51a921a6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f51a921a850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a921a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f51a921ac90" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f51a921ac90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a92190a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51a9219230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51a92193c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f51a9219550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a92196e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f51a9219930" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f51a9219930"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f51a9219cb0"/>
        <function-ref name="source" scoped="" ref="0x7f51a9219e40"/>
        <function-ref name="address" scoped="" ref="0x7f51a9218020"/>
        <function-ref name="destination" scoped="" ref="0x7f51a92181b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f51a9218340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f51a92184d0"/>
        <function-ref name="type" scoped="" ref="0x7f51a9218660"/>
        <function-ref name="setType" scoped="" ref="0x7f51a92187f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f51a9218980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f51a9218b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f51a9218ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f51aa1bece0" loc="44:../../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f51aa1bece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51aa1bb0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa1bb230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa1bb3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f51aa1bb550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51aa1bb6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f51aa171400" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f51aa171400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51aa1717a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa171930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa171ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f51aa171c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51aa171de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f51aa172580" loc="46:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f51aa172580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51aa172920"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa172ab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa172c40"/>
        <function-ref name="cancel" scoped="" ref="0x7f51aa172dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51aa171020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f51aa16f720" loc="50:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f51aa16f720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa16faa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f51aa16fc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa16fdc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa16e020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f51aa16e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f51aa16e480" loc="169:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f51aa16e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51aa16e800"/>
        <function-ref name="runTask" scoped="" ref="0x7f51aa16e990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f51aa16ec60" loc="126:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f51aa16ec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51aa16c020"/>
        <function-ref name="runTask" scoped="" ref="0x7f51aa16c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f51aa170060" loc="49:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f51aa170060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f51aa1703e0"/>
        <function-ref name="source" scoped="" ref="0x7f51aa170570"/>
        <function-ref name="address" scoped="" ref="0x7f51aa170700"/>
        <function-ref name="destination" scoped="" ref="0x7f51aa170890"/>
        <function-ref name="setSource" scoped="" ref="0x7f51aa170a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f51aa170bb0"/>
        <function-ref name="type" scoped="" ref="0x7f51aa170d40"/>
        <function-ref name="setType" scoped="" ref="0x7f51aa16f020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f51aa16f1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f51aa16f340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f51aa16f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f51aa1633b0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f51aa1633b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f51aa163730"/>
        <function-ref name="stopDone" scoped="" ref="0x7f51aa1638c0"/>
        <function-ref name="start" scoped="" ref="0x7f51aa163a50"/>
        <function-ref name="stop" scoped="" ref="0x7f51aa163be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f51aa1673f0" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f51aa1673f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51aa167770"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa167900"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa167a90"/>
        <function-ref name="cancel" scoped="" ref="0x7f51aa167c20"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51aa167db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f51aa1607e0" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f51aa1607e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa160b60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f51aa160cf0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa160e80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa15e030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f51aa15e1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f51aa1601d0" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f51aa1601d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f51aa160550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f51aa14f330" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51aa14f330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51aa14f6b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51aa14f840"/>
        <function-ref name="led1On" scoped="" ref="0x7f51aa14f9d0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51aa14fb60"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51aa14fcf0"/>
        <function-ref name="get" scoped="" ref="0x7f51aa14fe80"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51aa15a030"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51aa15a670"/>
        <function-ref name="set" scoped="" ref="0x7f51aa15a1c0"/>
        <function-ref name="led0On" scoped="" ref="0x7f51aa15a350"/>
        <function-ref name="led2On" scoped="" ref="0x7f51aa15a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f51aa15cb20" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f51aa15cb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f51aa15b020"/>
        <function-ref name="noAck" scoped="" ref="0x7f51aa15b1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f51aa15b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f51aa15e470" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f51aa15e470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f51aa15e7f0"/>
        <function-ref name="source" scoped="" ref="0x7f51aa15e980"/>
        <function-ref name="address" scoped="" ref="0x7f51aa15eb10"/>
        <function-ref name="destination" scoped="" ref="0x7f51aa15eca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f51aa15ee30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f51aa15c020"/>
        <function-ref name="type" scoped="" ref="0x7f51aa15c1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f51aa15c340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f51aa15c4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f51aa15c660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f51aa15c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f51aa0f54a0" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f51aa0f54a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51aa0f5820"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa0f59b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa0f5b40"/>
        <function-ref name="cancel" scoped="" ref="0x7f51aa0f5cd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51aa0f5e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f51aa0f4120" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f51aa0f4120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f51aa0f44a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f51aa14e300" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f51aa14e300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51aa14e6a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa14e830"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa14e9c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f51aa14eb50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51aa14ece0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f51aa0f8d60" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f51aa0f8d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51aa0f6180"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f51aa0f6310"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa0f64a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa0f6630"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f51aa0f67c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f51aa0f90d0" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f51aa0f90d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f51aa0f9470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f51aa0f6a10" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f51aa0f6a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f51aa0f6d90"/>
        <function-ref name="noAck" scoped="" ref="0x7f51aa0f5020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f51aa0f51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f51aa0f96c0" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f51aa0f96c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f51aa0f9a40"/>
        <function-ref name="source" scoped="" ref="0x7f51aa0f9bd0"/>
        <function-ref name="address" scoped="" ref="0x7f51aa0f9d60"/>
        <function-ref name="destination" scoped="" ref="0x7f51aa0f8020"/>
        <function-ref name="setSource" scoped="" ref="0x7f51aa0f81b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f51aa0f8340"/>
        <function-ref name="type" scoped="" ref="0x7f51aa0f84d0"/>
        <function-ref name="setType" scoped="" ref="0x7f51aa0f8660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f51aa0f87f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f51aa0f8980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f51aa0f8b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f51aa0f2b90" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f51aa0f2b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f51aa0ef020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f51aa0ef1b0"/>
        <function-ref name="start" scoped="" ref="0x7f51aa0ef340"/>
        <function-ref name="stop" scoped="" ref="0x7f51aa0ef4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f51aa0ee790" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f51aa0ee790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f51aa4020d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51aa0eeb10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51aa0eeca0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51aa0eee30"/>
        <function-ref name="cancel" scoped="" ref="0x7f51aa0ed020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51aa0ed1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51aa0f2540" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51aa0f2540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa0f28c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f51aa0efc60" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f51aa0efc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f51aa4020d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f51aa0ee020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f51aa0ec2b0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51aa0ec2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51aa0ec630"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51aa0ec7c0"/>
        <function-ref name="led1On" scoped="" ref="0x7f51aa0ec950"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51aa0ecae0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51aa0ecc70"/>
        <function-ref name="get" scoped="" ref="0x7f51aa0ece00"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51aa0eb020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51aa0eb660"/>
        <function-ref name="set" scoped="" ref="0x7f51aa0eb1b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f51aa0eb340"/>
        <function-ref name="led2On" scoped="" ref="0x7f51aa0eb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f51aa0e7970" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f51aa0e7970"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f51aa4020d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f51aa0e7cf0"/>
        <function-ref name="offset" scoped="" ref="0x7f51aa0e7e80"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f51aa0ec030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f51aa0e0c40" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f51aa0e0c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f51aa0df020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f51aa0df1b0"/>
        <function-ref name="start" scoped="" ref="0x7f51aa0df340"/>
        <function-ref name="stop" scoped="" ref="0x7f51aa0df4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f51aa0776e0" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f51aa0776e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51aa077a60"/>
        <function-ref name="runTask" scoped="" ref="0x7f51aa077bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f51aa0ca780" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f51aa0ca780"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f51aa0cab00"/>
        <function-ref name="stop" scoped="" ref="0x7f51aa0cac90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f51aa0af4f0" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f51aa0af4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51aa0af870"/>
        <function-ref name="runTask" scoped="" ref="0x7f51aa0afa00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51aa0e05f0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51aa0e05f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51aa0e0970"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f51aa0c8360" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f51aa0c8360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f51aa0c86e0"/>
        <function-ref name="flush" scoped="" ref="0x7f51aa0c8870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f51aa07bc70" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f51aa07bc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51aa07a020"/>
        <function-ref name="runTask" scoped="" ref="0x7f51aa07a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f51aa0cf7e0" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f51aa0cf7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f51aa0cfb60"/>
        <function-ref name="resetSend" scoped="" ref="0x7f51aa0cfcf0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f51aa0cfe80"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f51aa0d8030"/>
        <function-ref name="putData" scoped="" ref="0x7f51aa0d81c0"/>
        <function-ref name="putDone" scoped="" ref="0x7f51aa0d8350"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f51aa0d84e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f51aa0d8760" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51aa0d8760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51aa0d8ae0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51aa0d8c70"/>
        <function-ref name="led1On" scoped="" ref="0x7f51aa0d8e00"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51aa0d3020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51aa0d31b0"/>
        <function-ref name="get" scoped="" ref="0x7f51aa0d3340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51aa0d34d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51aa0d3b10"/>
        <function-ref name="set" scoped="" ref="0x7f51aa0d3660"/>
        <function-ref name="led0On" scoped="" ref="0x7f51aa0d37f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f51aa0d3980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f51aa074a00" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f51aa074a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51aa074d80"/>
        <function-ref name="runTask" scoped="" ref="0x7f51aa073020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f51aa0d9a40" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f51aa0d9a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f51aa0d9dc0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f51aa0de020"/>
        <function-ref name="startSend" scoped="" ref="0x7f51aa0de1b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f51aa0de340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f51aa0d4530" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f51aa0d4530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f51aa0d48b0"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f51aa0d4a40"/>
        <function-ref name="endPacket" scoped="" ref="0x7f51aa0d4bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f51a9fa9020" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f51a9fa9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51a9fa93a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f51a9fa9530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f51a9faede0" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f51a9faede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f51aa4020d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a9fad1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51a9fad350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51a9fad4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f51a9fad670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a9fad800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f51a9fa9800" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f51a9fa9800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51a9fa9b80"/>
        <function-ref name="runTask" scoped="" ref="0x7f51a9fa9d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f51a9fae6c0" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f51a9fae6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f51aa4020d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f51a9faea60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f51a9fadc20" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f51a9fadc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f51aa4020d0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f51a9fac020"/>
        <function-ref name="offset" scoped="" ref="0x7f51a9fac1b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f51a9fac340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f51a9fab920" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51a9fab920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51a9fabca0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51a9fabe30"/>
        <function-ref name="led1On" scoped="" ref="0x7f51a9faa020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51a9faa1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51a9faa340"/>
        <function-ref name="get" scoped="" ref="0x7f51a9faa4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51a9faa660"/>
        <function-ref name="led2On" scoped="" ref="0x7f51a9faaca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9faa980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51a9faa7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f51a9faab10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f51a9face80" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f51a9face80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f51a9fab220"/>
        <function-ref name="nextByte" scoped="" ref="0x7f51a9fab3b0"/>
        <function-ref name="startSend" scoped="" ref="0x7f51a9fab540"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f51a9fab6d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f51a9fac590" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f51a9fac590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f51a9fac910"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f51a9facaa0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f51a9facc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f51a9f97d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f51a9f97d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a9fa10e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f51a9fa1270"/>
        <function-ref name="receive" scoped="" ref="0x7f51a9fa1400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f51a9fa1590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f51a9fa1720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f51a9fa18b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a9fa1a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f51a9fa7e00" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f51a9fa7e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f51a9fa31c0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f51a9fa3350"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f51a9fa34e0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f51a9fa3670"/>
        <function-ref name="putData" scoped="" ref="0x7f51a9fa3800"/>
        <function-ref name="putDone" scoped="" ref="0x7f51a9fa3990"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f51a9fa3b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f51a9fa1cc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51a9fa1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51a9fa00a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51a9fa0230"/>
        <function-ref name="led1On" scoped="" ref="0x7f51a9fa03c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51a9fa0550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51a9fa06e0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9fa0870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51a9fa0a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51a9f961b0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9fa0b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f51a9fa0d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f51a9f96020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f51a9f79020" loc="40:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f51a9f79020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a9f793a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f51a9f79530"/>
        <function-ref name="receive" scoped="" ref="0x7f51a9f796c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f51a9f79850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f51a9f7b8d0" loc="39:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f51a9f7b8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a9f7bc50"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f51a9f7bde0"/>
        <function-ref name="receive" scoped="" ref="0x7f51a9f7a020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f51a9f7a1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f51a9f7a340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f51a9f7a4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a9f7a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f51a9f7b0c0" loc="38:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f51a9f7b0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f51a9f7b440"/>
        <function-ref name="stop" scoped="" ref="0x7f51a9f7b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f51a998ec70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a998ec70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f51a998d020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f51a998d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f51a998c440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f51a998c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a998c7c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f51a998c950"/>
        <function-ref name="receive" scoped="" ref="0x7f51a998cae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f51a998cc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f51a998b020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a998b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f51a998b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f51a998d440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f51a998d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a998d7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f51a998d950"/>
        <function-ref name="receive" scoped="" ref="0x7f51a998dae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f51a998dc70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f51a998de00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f51a998c020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a998c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f51a998e020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f51a998e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a998e3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a998e530"/>
        <function-ref name="request" scoped="" ref="0x7f51a998e6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f51a998e850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a998e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f51a9f0f8e0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9f0f8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f51a9f0fc60"/>
        <function-ref name="configure" scoped="" ref="0x7f51a9f0fdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f51a9f11d00" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f51a9f11d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a9f0d0a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f51a9f0d230"/>
        <function-ref name="receive" scoped="" ref="0x7f51a9f0d3c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f51a9f0d550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f51a9f0b1d0" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a9f0b1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f51a9f0b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f51a9f12670" loc="43:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f51a9f12670"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a9f129f0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f51a9f12b80"/>
        <function-ref name="receive" scoped="" ref="0x7f51a9f12d10"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f51a9f11020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f51a9f111b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f51a9f11340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a9f114d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f51a9f0de50" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f51a9f0de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a9f0c210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a9f0c3a0"/>
        <function-ref name="request" scoped="" ref="0x7f51a9f0c530"/>
        <function-ref name="granted" scoped="" ref="0x7f51a9f0c6c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a9f0c850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f51a9f18c80" loc="41:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f51a9f18c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a9f140a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a9f14230"/>
        <function-ref name="request" scoped="" ref="0x7f51a9f143c0"/>
        <function-ref name="granted" scoped="" ref="0x7f51a9f14550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a9f146e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f51a9f07710" loc="48:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f51a9f07710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f51a9f07a90"/>
        <function-ref name="txDone" scoped="" ref="0x7f51a9f07c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f51a9e7bdc0" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9e7bdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f51a9e7a180"/>
        <function-ref name="configure" scoped="" ref="0x7f51a9e7a310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f51a9e79890" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f51a9e79890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a9e79c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f51a9e79dc0"/>
        <function-ref name="receive" scoped="" ref="0x7f51a9e78020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f51a9e781b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f51a9e773e0" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a9e773e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f51a9e77780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f51a9e77a50" loc="50:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f51a9e77a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f51a9e77dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f51a9e76020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f51a9e761b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f51a9e76340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f51a9e764d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f51a9e76660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f51a9e767f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f51a9e76980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f51a9e76b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f51a9e76ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f51a9e76e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f51a9e75020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f51a9e751b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f51a9e75440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f51a9e755d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f51a9e75760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f51a9e758f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f51a9e75a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f51a9e75c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f51a9e75da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f51a9e74020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f51a9e741b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f51a9e74340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f51a9e744d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51a9e74660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f51a9e749f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f51a9e74b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f51a9e74d10"/>
        <function-ref name="tx" scoped="" ref="0x7f51a9e73020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f51a9e731b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f51a9e73340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f51a9e734d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f51a9e73660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f51a9e737f0"/>
        <function-ref name="rx" scoped="" ref="0x7f51a9e73980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f51a9e73b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f51a9e73ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f51a9e73e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f51a9e72020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f51a9e721b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f51a9e7a6d0" loc="45:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f51a9e7a6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a9e7aa70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f51a9e7ac00"/>
        <function-ref name="receive" scoped="" ref="0x7f51a9e7ad90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f51a9e79020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f51a9e791b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f51a9e79340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a9e794d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f51a9e71020" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f51a9e71020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a9e71e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a9e70800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a9e70340"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a9e70cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f51a9e785b0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f51a9e785b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a9e78950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a9e78ae0"/>
        <function-ref name="request" scoped="" ref="0x7f51a9e78c70"/>
        <function-ref name="granted" scoped="" ref="0x7f51a9e78e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a9e77020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f51a9e7b020" loc="43:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f51a9e7b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a9e7b3c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a9e7b550"/>
        <function-ref name="request" scoped="" ref="0x7f51a9e7b6e0"/>
        <function-ref name="granted" scoped="" ref="0x7f51a9e7b870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a9e7ba00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f51a9e725b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f51a9e725b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f51a9e72950"/>
        <function-ref name="txDone" scoped="" ref="0x7f51a9e72ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f51a9e6e120" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51a9e6e120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51a9e6e4a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51a9e6e630"/>
        <function-ref name="led1On" scoped="" ref="0x7f51a9e6e7c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51a9e6e950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51a9e6eae0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9e6ec70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51a9e6ee00"/>
        <function-ref name="led2On" scoped="" ref="0x7f51a9e6d4d0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9e6d1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51a9e6d020"/>
        <function-ref name="led0On" scoped="" ref="0x7f51a9e6d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f51a9e60bd0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f51a9e60bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51a9e5f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f51a9e616d0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f51a9e616d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f51a9e61a50"/>
        <function-ref name="txDone" scoped="" ref="0x7f51a9e61be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f51a9e68b60" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f51a9e68b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f51a9e65020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f51a9e651b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f51a9e65340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f51a9e654d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f51a9e65660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f51a9e657f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f51a9e65980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f51a9e65b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f51a9e65ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f51a9e65e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f51a9e64020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f51a9e641b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f51a9e64340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f51a9e645d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f51a9e64760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f51a9e648f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f51a9e64a80"/>
        <function-ref name="isUart" scoped="" ref="0x7f51a9e64c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f51a9e64da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f51a9e63020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f51a9e631b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f51a9e63340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f51a9e634d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f51a9e63660"/>
        <function-ref name="getMode" scoped="" ref="0x7f51a9e637f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f51a9e63b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f51a9e63d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f51a9e62020"/>
        <function-ref name="tx" scoped="" ref="0x7f51a9e621b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f51a9e62340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f51a9e624d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f51a9e62660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f51a9e627f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f51a9e62980"/>
        <function-ref name="rx" scoped="" ref="0x7f51a9e62b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f51a9e62ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f51a9e62e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f51a9e61020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f51a9e611b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f51a9e61340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f51a9e19800" loc="82:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f51a9e19800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9e19b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9e19d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9e18020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9e181b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9e18340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9e184d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9e18660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9e187f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9e18980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9e18b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9e18ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9e18e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9e17020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9e172b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9e17440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f51a9e57020" loc="76:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f51a9e57020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f51a9e573a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f51a9e57530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f51a9e17800" loc="83:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f51a9e17800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9e17b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9e17d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9e16020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9e161b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9e16340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9e164d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9e16660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9e167f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9e16980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9e16b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9e16ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9e16e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9e15020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9e152b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9e15440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f51a9e15800" loc="84:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f51a9e15800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9e15b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9e15d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9e14020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9e141b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9e14340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9e144d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9e14660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9e147f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9e14980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9e14b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9e14ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9e14e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9e13020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9e132b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9e13440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f51a9e5c360" loc="75:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f51a9e5c360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f51a9e5c6e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f51a9e5c870"/>
        <function-ref name="setUctl" scoped="" ref="0x7f51a9e5ca00"/>
        <function-ref name="enableUart" scoped="" ref="0x7f51a9e5cb90"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f51a9e5cd20"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f51a9e5b020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f51a9e5b1b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f51a9e5b340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f51a9e5b4d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f51a9e5b660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f51a9e5b7f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f51a9e5b980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f51a9e5bb10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f51a9e5bda0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f51a9e5a020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f51a9e5a1b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f51a9e5a340"/>
        <function-ref name="isUart" scoped="" ref="0x7f51a9e5a4d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f51a9e5a660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f51a9e5a7f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f51a9e5a980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f51a9e5ab10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f51a9e5aca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f51a9e5ae30"/>
        <function-ref name="getMode" scoped="" ref="0x7f51a9e59020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f51a9e593b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f51a9e59540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f51a9e596d0"/>
        <function-ref name="tx" scoped="" ref="0x7f51a9e59860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f51a9e599f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f51a9e59b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f51a9e59d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f51a9e58020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f51a9e581b0"/>
        <function-ref name="rx" scoped="" ref="0x7f51a9e58340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f51a9e584d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f51a9e58660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f51a9e587f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f51a9e58980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f51a9e58b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f51a9e13700" loc="86:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51a9e13700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51a9e13a80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51a9e13c10"/>
        <function-ref name="led1On" scoped="" ref="0x7f51a9e13da0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51a9e12020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51a9e121b0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9e12340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51a9e124d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51a9e12b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9e12660"/>
        <function-ref name="led0On" scoped="" ref="0x7f51a9e127f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f51a9e12980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f51a9e2dbc0" loc="79:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f51a9e2dbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f51a9e55020"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f51a9e551b0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f51a9e55340"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f51a9e554d0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f51a9e55660"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f51a9e557f0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f51a9e55980"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f51a9e55b10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51a9e55ca0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f51a9e55e30"/>
        <function-ref name="getData" scoped="" ref="0x7f51a9e54020"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f51a9e541b0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f51a9e54340"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f51a9e545d0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f51a9e54760"/>
        <function-ref name="getIV" scoped="" ref="0x7f51a9e548f0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f51a9e54a80"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f51a9e54c10"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f51a9e54da0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f51a9e2c020"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f51a9e2c1b0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f51a9e2c340"/>
        <function-ref name="isI2C" scoped="" ref="0x7f51a9e2c4d0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f51a9e2c660"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f51a9e2c7f0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f51a9e2cb80"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f51a9e2cd10"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f51a9e2b020"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f51a9e2b1b0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f51a9e2b340"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f51a9e2b4d0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f51a9e2b660"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f51a9e2b7f0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f51a9e2b980"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f51a9e2bb10"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f51a9e2bca0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f51a9e2be30"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f51a9e2a020"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f51a9e2a1b0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f51a9e2a340"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f51a9e2a4d0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f51a9e2a660"/>
        <function-ref name="setData" scoped="" ref="0x7f51a9e2a7f0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f51a9e2a980"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f51a9e2ab10"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f51a9e2aca0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f51a9e2ae30"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f51a9e29020"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f51a9e291b0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f51a9e29740"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f51a9e298d0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f51a9e29a60"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f51a9e29bf0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f51a9e29d80"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f51a9e28020"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f51a9e281b0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f51a9e28340"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f51a9e284d0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f51a9e28660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f51a9e26800" loc="81:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f51a9e26800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9e26b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9e26d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9e1a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9e1a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9e1a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9e1a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9e1a660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9e1a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9e1a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9e1ab10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9e1aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9e1ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9e19020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9e192b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9e19440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f51a9e57970" loc="77:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f51a9e57970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51a9e57cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f51a9e1c860" loc="80:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f51a9e1c860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9e1cbe0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9e1cd70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9e27020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9e271b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9e27340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9e274d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9e27660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9e277f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9e27980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9e27b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9e27ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9e27e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9e26020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9e262b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9e26440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f51a9d8f810" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f51a9d8f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d8fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d8fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d8e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d8e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d8e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d8e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d8e660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d8e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d8e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d8eb10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d8eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d8ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d8d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d8d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d8d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f51a9d7a810" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f51a9d7a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d7ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d7ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d79020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d791b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d79340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d794d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d79660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d797f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d79980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d79b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d79ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d79e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d78020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d782b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d78440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f51a9d31ca0" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f51a9d31ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d300a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d30230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d303c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d30550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d306e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d30870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d30a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d30b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d30d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d2f020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d2f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d2f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d2f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d2f760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d2f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f51a9d0ccb0" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f51a9d0ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d0b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d0b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d0b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d0b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d0b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d0b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d0ba00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d0bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d0bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d0a020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d0a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d0a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d0a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d0a760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d0a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f51a9d2fcc0" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f51a9d2fcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d2e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d2e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d2e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d2e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d2e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d2e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d2ea00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d2eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d2ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d2d020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d2d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d2d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d2d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d2d760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d2d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f51a9d76810" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f51a9d76810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d76b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d76d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d75020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d751b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d75340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d754d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d75660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d757f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d75980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d75b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d75ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d75e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d74020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d742b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d74440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f51a9d629a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f51a9d629a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d62d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d61020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d611b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d61340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d614d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d61660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d617f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d61980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d61b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d61ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d61e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d60020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d601b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d60440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d605d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f51a9d4d9a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f51a9d4d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d4dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d4c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d4c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d4c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d4c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d4c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d4c7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d4c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d4cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d4cca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d4ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d4b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d4b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d4b440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d4b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f51a9d3d9a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f51a9d3d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d3dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d3c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d3c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d3c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d3c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d3c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d3c7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d3c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d3cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d3cca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d3ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d3b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d3b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d3b440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d3b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f51a9d29cc0" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f51a9d29cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d280a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d28230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d283c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d28550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d286e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d28870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d28a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d28b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d28d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d27020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d271b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d27340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d274d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d27760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d278f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f51a9d18cb0" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f51a9d18cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d170a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d17230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d173c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d17550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d176e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d17870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d17a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d17b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d17d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d16020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d161b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d16340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d164d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d16760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d168f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f51a9d04cc0" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f51a9d04cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d030a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d03230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d033c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d03550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d036e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d03870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d03a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d03b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d03d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d02020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d021b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d02340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d024d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d02760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d028f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f51a9d89810" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f51a9d89810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d89b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d89d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d88020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d881b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d88340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d884d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d88660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d887f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d88980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d88b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d88ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d88e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d87020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d872b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d87440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f51a9d27cc0" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f51a9d27cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d260a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d26230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d263c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d26550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d266e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d26870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d26a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d26b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d26d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d25020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d251b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d25340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d254d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d25760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d258f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f51a9d85810" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f51a9d85810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d85b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d85d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d84020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d841b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d84340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d844d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d84660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d847f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d84980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d84b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d84ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d84e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d83020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d832b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d83440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f51a9d70810" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f51a9d70810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d70b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d70d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d6f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d6f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d6f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d6f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d6f660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d6f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d6f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d6fb10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d6fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d6fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d6e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d6e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d6e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f51a9d5c9a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f51a9d5c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d5cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d5b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d5b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d5b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d5b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d5b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d5b7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d5b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d5bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d5bca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d5be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d5a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d5a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d5a440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d5a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f51a9d479a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f51a9d479a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d47d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d46020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d461b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d46340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d464d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d46660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d467f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d46980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d46b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d46ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d46e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d45020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d451b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d45440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d455d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f51a9d379a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f51a9d379a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d37d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d36020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d361b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d36340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d364d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d36660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d367f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d36980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d36b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d36ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d36e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d35020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d351b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d35440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d355d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f51a9d93810" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f51a9d93810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d93b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d93d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d92020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d921b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d92340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d924d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d92660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d927f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d92980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d92b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d92ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d92e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d91020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d912b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d91440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f51a9d7f810" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f51a9d7f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d7fc90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d7fe20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d7d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d7d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d7d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d7d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d7d660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d7d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d7d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d7db10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d7dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d7de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d7c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d7c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d7c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f51a9d6a810" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f51a9d6a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d6ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d6ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d69020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d691b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d69340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d694d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d69660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d697f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d69980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d69b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d69ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d69e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d68020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d682b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d68440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f51a9d33cc0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f51a9d33cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d320a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d32230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d323c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d32550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d326e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d32870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d32a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d32b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d32d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d31020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d311b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d31340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d314d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d31760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d318f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f51a9d12cb0" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f51a9d12cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d110a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d11230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d113c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d11550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d116e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d11870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d11a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d11b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d11d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d10020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d101b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d10340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d104d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d10760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d108f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f51a9d06cb0" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f51a9d06cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d050a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d05230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d053c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d05550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d056e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d05870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d05a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d05b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d05d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d04020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d041b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d04340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d044d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d04760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d048f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f51a9d1ecc0" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f51a9d1ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d1d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d1d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d1d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d1d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d1d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d1d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d1da00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d1db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d1dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d1c020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d1c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d1c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d1c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d1c760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d1c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f51a9d66810" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f51a9d66810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d66d90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d65020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d651b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d65340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d654d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d65660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d657f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d65980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d65b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d65ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d65e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d64020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d641b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d64440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d645d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f51a9d529a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f51a9d529a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d52d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d51020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d511b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d51340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d514d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d51660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d517f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d51980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d51b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d51ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d51e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d50020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d501b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d50440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d505d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f51a9d419a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f51a9d419a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d41d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d40020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d401b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d40340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d404d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d40660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d407f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d40980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d40b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d40ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d40e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d3f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d3f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d3f440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d3f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f51a9d10cb0" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f51a9d10cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d0f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d0f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d0f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d0f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d0f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d0f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d0fa00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d0fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d0fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d0e020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d0e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d0e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d0e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d0e760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d0e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f51a9d25cb0" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f51a9d25cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d240a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d24230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d243c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d24550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d246e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d24870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d24a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d24b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d24d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d23020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d231b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d23340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d234d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d23760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d238f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f51a9d8d810" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f51a9d8d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d8db90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d8dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d8c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d8c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d8c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d8c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d8c660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d8c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d8c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d8cb10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d8cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d8ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d8b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d8b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d8b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f51a9d78810" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f51a9d78810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d78b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d78d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d77020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d771b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d77340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d774d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d77660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d777f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d77980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d77b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d77ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d77e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d76020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d762b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d76440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f51a9d459a0" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f51a9d459a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d45d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d44020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d441b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d44340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d444d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d44660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d447f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d44980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d44b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d44ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d44e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d43020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d431b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d43440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d435d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f51a9d74810" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f51a9d74810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d74b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d74d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d73020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d731b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d73340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d734d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d73660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d737f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d73980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d73b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d73ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d73e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d72020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d722b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d72440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f51a9d609a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f51a9d609a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d60d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d5f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d5f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d5f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d5f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d5f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d5f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d5f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d5fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d5fca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d5fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d5e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d5e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d5e440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d5e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f51a9d4b9a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f51a9d4b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d4bd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d4a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d4a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d4a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d4a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d4a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d4a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d4a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d4ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d4aca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d4ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d49020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d491b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d49440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d495d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f51a9d3b9a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f51a9d3b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d3bd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d3a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d3a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d3a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d3a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d3a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d3a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d3a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d3ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d3aca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d3ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d39020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d391b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d39440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d395d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f51a9d21cc0" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f51a9d21cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d1f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d1f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d1f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d1f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d1f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d1f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d1fa00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d1fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d1fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d1e020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d1e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d1e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d1e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d1e760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d1e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f51a9d99800" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f51a9d99800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d99b80"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d99d10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d96020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d961b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d96340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d964d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d96660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d967f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d96980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d96b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d96ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d96e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d95020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d952b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d95440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f51a9d83810" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f51a9d83810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d83b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d83d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d82020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d821b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d82340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d824d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d82660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d827f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d82980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d82b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d82ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d82e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d81020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d812b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d81440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f51a9d6e810" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f51a9d6e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d6eb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d6ed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d6d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d6d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d6d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d6d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d6d660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d6d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d6d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d6db10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d6dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d6de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d6c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d6c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d6c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f51a9d5a9a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f51a9d5a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d5ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d59020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d591b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d59340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d594d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d59660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d597f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d59980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d59b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d59ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d59e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d58020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d581b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d58440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d585d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f51a9d1ccc0" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f51a9d1ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d1b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d1b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d1b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d1b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d1b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d1b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d1ba00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d1bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d1bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d1a020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d1a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d1a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d1a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d1a760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d1a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f51a9d16cb0" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f51a9d16cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d150a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d15230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d153c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d15550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d156e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d15870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d15a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d15b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d15d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d14020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d141b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d14340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d144d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d14760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d148f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f51a9d0acb0" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f51a9d0acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d090a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d09230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d093c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d09550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d096e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d09870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d09a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d09b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d09d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d08020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d081b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d08340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d084d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d08760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d088f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f51a9d569a0" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f51a9d569a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d56d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d55020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d551b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d55340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d554d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d55660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d557f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d55980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d55b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d55ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d55e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d54020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d541b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d54440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d545d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f51a9d1acc0" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f51a9d1acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d190a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d19230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d193c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d19550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d196e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d19870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d19a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d19b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d19d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d18020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d181b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d18340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d184d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d18760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d188f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f51a9d91810" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f51a9d91810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d91b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d91d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d90020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d901b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d90340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d904d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d90660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d907f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d90980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d90b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d90ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d90e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d8f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d8f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d8f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f51a9d7c810" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f51a9d7c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d7cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d7cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d7b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d7b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d7b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d7b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d7b660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d7b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d7b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d7bb10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d7bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d7be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d7a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d7a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d7a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f51a9d68810" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f51a9d68810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d68b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d68d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d67020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d671b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d67340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d674d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d67660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d677f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d67980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d67b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d67ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d67e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d66020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d662b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d66440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f51a9d23cc0" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f51a9d23cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d220a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d22230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d223c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d22550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d226e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d22870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d22a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d22b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d22d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d21020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d211b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d21340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d214d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d21760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d218f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f51a9d0ecb0" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f51a9d0ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d0d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d0d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d0d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d0d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d0d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d0d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d0da00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d0db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d0dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d0c020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d0c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d0c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d0c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d0c760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d0c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f51a9d649a0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f51a9d649a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d64d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d63020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d631b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d63340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d634d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d63660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d637f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d63980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d63b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d63ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d63e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d62020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d621b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d62440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d625d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f51a9d509a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f51a9d509a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d50d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d4e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d4e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d4e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d4e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d4e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d4e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d4e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d4eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d4eca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d4ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d4d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d4d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d4d440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d4d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f51a9d3f9a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f51a9d3f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d3fd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d3e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d3e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d3e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d3e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d3e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d3e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d3e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d3eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d3eca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d3ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d3d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d3d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d3d440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d3d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f51a9d8b810" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f51a9d8b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d8bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d8bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d8a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d8a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d8a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d8a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d8a660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d8a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d8a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d8ab10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d8aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d8ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d89020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d892b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d89440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f51a9d439a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f51a9d439a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d43d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d42020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d421b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d42340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d424d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d42660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d427f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d42980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d42b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d42ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d42e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d41020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d411b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d41440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d415d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f51a9d87810" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f51a9d87810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d87b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d87d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d86020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d861b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d86340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d864d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d86660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d867f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d86980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d86b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d86ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d86e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d85020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d852b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d85440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f51a9d72810" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f51a9d72810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d72b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d72d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d71020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d711b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d71340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d714d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d71660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d717f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d71980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d71b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d71ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d71e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d70020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d702b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d70440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f51a9d5e9a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f51a9d5e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d5ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d5d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d5d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d5d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d5d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d5d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d5d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d5d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d5db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d5dca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d5de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d5c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d5c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d5c440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d5c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f51a9d499a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f51a9d499a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d49d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d48020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d481b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d48340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d484d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d48660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d487f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d48980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d48b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d48ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d48e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d47020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d471b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d47440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d475d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f51a9d399a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f51a9d399a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d39d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d38020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d381b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d38340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d384d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d38660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d387f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d38980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d38b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d38ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d38e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d37020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d371b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d37440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d375d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f51a9d95810" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f51a9d95810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d95b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d95d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d94020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d941b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d94340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d944d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d94660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d947f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d94980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d94b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d94ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d94e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d93020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d932b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d93440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f51a9d81810" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f51a9d81810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d81b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d81d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d80020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d801b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d80340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d804d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d80660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d807f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d80980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d80b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d80ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d80e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d7f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d7f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d7f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f51a9d6c810" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f51a9d6c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d6cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d6cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d6b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d6b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d6b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d6b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d6b660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d6b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d6b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d6bb10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d6bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d6be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d6a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d6a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d6a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f51a9d589a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f51a9d589a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d58d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d57020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d571b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d57340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d574d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d57660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d577f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d57980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d57b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d57ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d57e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d56020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d561b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d56440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d565d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f51a9d2bca0" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f51a9d2bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d2a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d2a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d2a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d2a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d2a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d2a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d2aa00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d2ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d2ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d29020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d291b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d29340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d294d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d29760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d298f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f51a9d14cb0" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f51a9d14cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d130a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d13230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d133c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d13550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d136e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d13870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d13a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d13b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d13d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d12020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d121b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d12340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d124d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d12760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d128f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f51a9d2dcc0" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f51a9d2dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d2c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d2c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d2c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d2c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d2c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d2c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d2ca00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d2cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d2cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d2b020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d2b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d2b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d2b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d2b760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d2b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f51a9d549a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f51a9d549a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d54d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d53020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d531b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d53340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d534d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d53660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d537f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d53980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d53b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d53ca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d53e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d52020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d521b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d52440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d525d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f51a9d08cb0" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f51a9d08cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d070a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d07230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d073c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d07550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d076e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d07870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d07a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d07b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d07d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d06020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d061b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d06340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d064d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d06760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d068f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f51a9d02cc0" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f51a9d02cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d010a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d01230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d013c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d01550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d016e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d01870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d01a00"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d01b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d01d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d00020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d001b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d00340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d004d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d00760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d008f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f51a9d359f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f51a9d359f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9d341c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9d34350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9d344e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9d34670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9d34800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9d34990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9d34b20"/>
        <function-ref name="get" scoped="" ref="0x7f51a9d34cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9d34e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9d33020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9d331b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9d33340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9d334d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9d33760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9d338f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9cfdd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9cfdd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9cd60e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9cd6270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9cd6400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9cd6590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9cd6720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9cd68b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9cd6a40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9cd6bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9cd6d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9cd5020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9cd51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9cd5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9cd54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9cd5760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9cd58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9cd2740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9cd2740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9cd2ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9cd2c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9cd2de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9cd0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9cd01b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9cd0340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9cd04d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9cd0660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9cd07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9cd0980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9cd0b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9cd0ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9cd0e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9ccf120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9ccf2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9ccc100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9ccc100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9ccc480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9ccc610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9ccc7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9ccc930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9cccac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9cccc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9cccde0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9ccb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9ccb1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9ccb340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9ccb4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9ccb660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9ccb7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9ccba80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9ccbc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9cc8d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9cc8d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9cc70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9cc7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9cc7400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9cc7590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9cc7720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9cc78b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9cc7a40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9cc7bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9cc7d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9cc6020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9cc61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9cc6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9cc64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9cc6760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9cc68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9cc3740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9cc3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9cc3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9cc3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9cc3de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9cc2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9cc21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9cc2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9cc24d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9cc2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9cc27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9cc2980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9cc2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9cc2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9cc2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9cc1120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9cc12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9cbe100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9cbe100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9cbe480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9cbe610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9cbe7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9cbe930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9cbeac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9cbec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9cbede0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9cbd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9cbd1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9cbd340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9cbd4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9cbd660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9cbd7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9cbda80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9cbdc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9cbad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9cbad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9cb90e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9cb9270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9cb9400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9cb9590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9cb9720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9cb98b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9cb9a40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9cb9bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9cb9d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9cb8020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9cb81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9cb8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9cb84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9cb8760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9cb88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9cb5740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9cb5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9cb5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9cb5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9cb5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9cb4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9cb41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9cb4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9cb44d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9cb4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9cb47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9cb4980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9cb4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9cb4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9cb4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9cb3120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9cb32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9cb0100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9cb0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9cb0480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9cb0610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9cb07a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9cb0930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9cb0ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9cb0c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9cb0de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9caf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9caf1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9caf340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9caf4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9caf660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9caf7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9cafa80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9cafc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9cacd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9cacd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9caa0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9caa270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9caa400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9caa590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9caa720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9caa8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9caaa40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9caabd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9caad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9ca9020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9ca91b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9ca9340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9ca94d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9ca9760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9ca98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9ca6740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9ca6740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9ca6ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9ca6c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9ca6de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9ca5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9ca51b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9ca5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9ca54d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9ca5660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9ca57f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9ca5980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9ca5b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9ca5ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9ca5e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9ca4120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9ca42b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9ca1100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9ca1100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9ca1480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9ca1610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9ca17a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9ca1930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9ca1ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9ca1c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9ca1de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9ca0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9ca01b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9ca0340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9ca04d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9ca0660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9ca07f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9ca0a80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9ca0c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c9dd80" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c9dd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c9c180"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c9c310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c9c4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c9c630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c9c7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c9c950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c9cae0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c9cc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c9ce00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c9b020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c9b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c9b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c9b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c9b760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c9b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c98740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c98740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c98ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c98c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c98de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c97020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c971b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c97340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c974d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c97660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c977f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c97980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c97b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c97ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c97e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c96120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c962b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c93100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c93100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c93480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c93610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c937a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c93930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c93ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c93c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c93de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c92020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c921b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c92340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c924d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c92660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c927f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c92a80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c92c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c8fd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c8fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c8e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c8e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c8e400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c8e590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c8e720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c8e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c8ea40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c8ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c8ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c8d020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c8d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c8d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c8d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c8d760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c8d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c8a740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c8a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c8aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c8ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c8ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c89020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c891b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c89340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c894d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c89660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c897f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c89980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c89b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c89ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c89e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c88120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c882b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c84100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c84100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c84480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c84610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c847a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c84930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c84ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c84c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c84de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c83020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c831b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c83340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c834d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c83660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c837f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c83a80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c83c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c80d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c80d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c7f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c7f270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c7f400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c7f590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c7f720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c7f8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c7fa40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c7fbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c7fd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c7e020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c7e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c7e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c7e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c7e760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c7e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c7b740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c7b740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c7bac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c7bc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c7bde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c7a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c7a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c7a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c7a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c7a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c7a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c7a980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c7ab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c7aca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c7ae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c79120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c792b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c76100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c76100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c76480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c76610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c767a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c76930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c76ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c76c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c76de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c75020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c751b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c75340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c754d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c75660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c757f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c75a80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c75c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c72d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c72d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c710e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c71270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c71400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c71590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c71720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c718b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c71a40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c71bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c71d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c70020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c701b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c70340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c704d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c70760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c708f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c6d740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c6d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c6dac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c6dc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c6dde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c6c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c6c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c6c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c6c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c6c660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c6c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c6c980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c6cb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c6cca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c6ce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c6b120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c6b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c68100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c68100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c68480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c68610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c687a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c68930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c68ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c68c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c68de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c67020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c671b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c67340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c674d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c67660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c677f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c67a80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c67c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c64e60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c64e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c62210"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c623a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c62530"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c626c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c62850"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c629e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c62b70"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c62d00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c61020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c611b0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c61340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c614d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c61660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c618f0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c61a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c5e9f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c5e9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c5ed70"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c5d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c5d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c5d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c5d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c5d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c5d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c5d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c5db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c5dca0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c5de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c5c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c5c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c5c440"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c5c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c59460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c59460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c597e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c59970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c59b00"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c59c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c59e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c58020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c581b0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c58340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c584d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c58660"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c587f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c58980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c58b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c58da0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c57020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c55e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c55e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c541c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c54350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c544e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c54670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c54800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c54990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c54b20"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c54cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c54e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c53020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c531b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c53340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c534d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c53760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c538f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c50740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c50740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c50ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c50c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c50de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c4f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c4f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c4f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c4f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c4f660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c4f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c4f980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c4fb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c4fca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c4fe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c4e120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c4e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c4b100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c4b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c4b480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c4b610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c4b7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c4b930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c4bac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c4bc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c4bde0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c4a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c4a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c4a340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c4a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c4a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c4a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c4aa80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c4ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c47d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c47d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c460e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c46270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c46400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c46590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c46720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c468b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c46a40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c46bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c46d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c45020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c451b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c45340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c454d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c45760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c458f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c42740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c42740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c42ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c42c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c42de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c41020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c411b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c41340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c414d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c41660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c417f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c41980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c41b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c41ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c41e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c40120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c402b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c3d100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c3d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c3d480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c3d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c3d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c3d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c3dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c3dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c3dde0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c3b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c3b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c3b340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c3b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c3b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c3b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c3ba80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c3bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c38d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c38d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c370e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c37270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c37400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c37590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c37720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c378b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c37a40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c37bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c37d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c36020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c361b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c36340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c364d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c36760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c368f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c33740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c33740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c33ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c33c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c33de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c32020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c321b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c32340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c324d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c32660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c327f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c32980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c32b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c32ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c32e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c31120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c312b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c2e100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c2e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c2e480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c2e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c2e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c2e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c2eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c2ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c2ede0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c2d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c2d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c2d340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c2d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c2d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c2d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c2da80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c2dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c2ad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c2ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c290e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c29270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c29400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c29590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c29720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c298b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c29a40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c29bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c29d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c28020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c281b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c28340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c284d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c28760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c288f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c25740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c25740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c25ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c25c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c25de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c24020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c241b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c24340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c244d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c24660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c247f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c24980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c24b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c24ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c24e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c23120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c232b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c20100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c20100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c20480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c20610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c207a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c20930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c20ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c20c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c20de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c1f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c1f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c1f340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c1f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c1f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c1f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c1fa80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c1fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c1cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c1cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c1b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c1b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c1b400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c1b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c1b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c1b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c1ba40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c1bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c1bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c1a020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c1a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c1a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c1a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c1a760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c1a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c16740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c16740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c16ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c16c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c16de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c15020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c151b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c15340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c154d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c15660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c157f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c15980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c15b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c15ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c15e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c14120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c142b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c11100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c11100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c11480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c11610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c117a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c11930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c11ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c11c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c11de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c10020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c101b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c10340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c104d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c10660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c107f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c10a80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c10c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c0dd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c0dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c0c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c0c270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c0c400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c0c590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c0c720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c0c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c0ca40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c0cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c0cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c0b020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c0b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c0b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c0b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c0b760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c0b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c08740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c08740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c08ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c08c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c08de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c07020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c071b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c07340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c074d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c07660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c077f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c07980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c07b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c07ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c07e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c06120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c062b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9c03100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9c03100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9c03480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9c03610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9c037a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9c03930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9c03ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9c03c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9c03de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9c02020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9c021b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9c02340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9c024d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9c02660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9c027f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9c02a80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9c02c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9bffd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9bffd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9bfe0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9bfe270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9bfe400"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9bfe590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9bfe720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9bfe8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9bfea40"/>
        <function-ref name="get" scoped="" ref="0x7f51a9bfebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9bfed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9bfd020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9bfd1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9bfd340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9bfd4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9bfd760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9bfd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9bfa740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9bfa740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9bfaac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9bfac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9bfade0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9bf9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9bf91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9bf9340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9bf94d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9bf9660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9bf97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9bf9980"/>
        <function-ref name="set" scoped="" ref="0x7f51a9bf9b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9bf9ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9bf9e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9bf8120"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9bf82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f51a9bf5100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f51a9bf5100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9bf5480"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9bf5610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9bf57a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9bf5930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9bf5ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9bf5c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9bf5de0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9bf3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9bf31b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9bf3340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9bf34d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9bf3660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9bf37f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9bf3a80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9bf3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f51a9b86d20" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f51a9b86d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a9b83b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a9b82550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a9b82090"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a9b82a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f51a9b81d90" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f51a9b81d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a9b7ebc0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a9b7c590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a9b7c0d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a9b7ca50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f51a9b68020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a9b68020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51a9b683a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51a9b68530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51a9b686c0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b68850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51a9b689e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a9b68b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f51a9b68d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a9b67020"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a9b671b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51a9b67340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51a9b674d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f51a9b7ae50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f51a9b7ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a9b79ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a9b69670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a9b691b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a9b69b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f51a9b64020" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51a9b64020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51a9b643a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51a9b64530"/>
        <function-ref name="led1On" scoped="" ref="0x7f51a9b646c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51a9b64850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51a9b649e0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b64b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51a9b64d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51a9b634d0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b63020"/>
        <function-ref name="led0On" scoped="" ref="0x7f51a9b631b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f51a9b63340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f51a9b5d060" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f51a9b5d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b5d3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b5d570"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b5d700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b5d890"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b5da20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b5dbb0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b5dd40"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b5c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51a9b60470" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51a9b60470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51a9b607f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f51a9b5c340" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f51a9b5c340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b5c6c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b5c850"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b5c9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b5cb70"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b5cd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b57020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b571b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b57340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f51a9b60a70" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51a9b60a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51a9b60df0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51a9b5f020"/>
        <function-ref name="led1On" scoped="" ref="0x7f51a9b5f1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51a9b5f340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51a9b5f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b5f660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51a9b5f7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51a9b5fe30"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b5f980"/>
        <function-ref name="led0On" scoped="" ref="0x7f51a9b5fb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f51a9b5fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f51a9b57660" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f51a9b57660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b579e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b57b70"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b57d00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b56020"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b561b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b56340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b564d0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b56660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f51a9b61b10" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f51a9b61b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b3a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b3a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b3a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b3a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b3a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b3a7f0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b3a980"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b3ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f51a9b3ae70" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f51a9b3ae70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b39220"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b393b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b39540"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b396d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b39860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b399f0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b39b80"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b39d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f51a9b372e0" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51a9b372e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51a9b37660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f51a9b380f0" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f51a9b380f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b38470"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b38600"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b38790"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b38920"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b38ab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b38c40"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b38dd0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b37020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f51a9b232f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f51a9b232f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b23670"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b23800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9b23990"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b23b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b23cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9b23e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b22020"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b221b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9b22340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9b224d0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b22660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9b227f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9b22980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9b22c10"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b22da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f51a9b34020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f51a9b34020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b343a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b34530"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b346c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b34850"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b349e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b34b70"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b34d00"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b23020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f51a9b1fde0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f51a9b1fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b1e180"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b1e310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9b1e4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b1e630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b1e7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9b1e950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b1eae0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b1ec70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9b1ee00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9b1d020"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b1d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9b1d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9b1d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9b1d760"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b1d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f51a9b20b90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f51a9b20b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b1f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b1f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b1f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b1f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b1f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b1f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b1f980"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b1fb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f51a9b19930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f51a9b19930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b19cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b19e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9b18020"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b181b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b18340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9b184d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b18660"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b187f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9b18980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9b18b10"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b18ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9b18e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9b17020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9b172b0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b17440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f51a9b1b710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f51a9b1b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9b1ba90"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9b1bc20"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9b1bdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9b19020"/>
        <function-ref name="get" scoped="" ref="0x7f51a9b191b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9b19340"/>
        <function-ref name="set" scoped="" ref="0x7f51a9b194d0"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9b19660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f51a9158a90" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a9158a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f51a9158e10"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f51a9157020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f51a9152be0" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f51a9152be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51a9151020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f51a914a020" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a914a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f51a914a3a0"/>
        <function-ref name="configure" scoped="" ref="0x7f51a914a530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f51a91512b0" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f51a91512b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f51a9151630"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f51a91517c0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f51a9151950"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f51a9151ae0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f51a9151c70"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f51a9151e00"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f51a9150020"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f51a91501b0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51a9150340"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f51a91504d0"/>
        <function-ref name="getData" scoped="" ref="0x7f51a9150660"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f51a91507f0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f51a9150980"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f51a9150c10"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f51a9150da0"/>
        <function-ref name="getIV" scoped="" ref="0x7f51a914f020"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f51a914f1b0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f51a914f340"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f51a914f4d0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f51a914f660"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f51a914f7f0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f51a914f980"/>
        <function-ref name="isI2C" scoped="" ref="0x7f51a914fb10"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f51a914fca0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f51a914fe30"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f51a914e220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f51a914e3b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f51a914e540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f51a914e6d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f51a914e860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f51a914e9f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f51a914eb80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f51a914ed10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f51a914d020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f51a914d1b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f51a914d340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f51a914d4d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f51a914d660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f51a914d7f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f51a914d980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f51a914db10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f51a914dca0"/>
        <function-ref name="setData" scoped="" ref="0x7f51a914de30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f51a914c020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f51a914c1b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f51a914c340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f51a914c4d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f51a914c660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f51a914c7f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f51a914cd80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f51a914b020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f51a914b1b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f51a914b340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f51a914b4d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f51a914b660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f51a914b7f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f51a914b980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f51a914bb10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f51a914bca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f51a9152440" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f51a9152440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f51a91527c0"/>
        <function-ref name="txDone" scoped="" ref="0x7f51a9152950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f51a9159e00" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f51a9159e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a91581c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a9158350"/>
        <function-ref name="request" scoped="" ref="0x7f51a91584e0"/>
        <function-ref name="granted" scoped="" ref="0x7f51a9158670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a9158800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f51a9157a50" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f51a9157a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f51a9157dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f51a9156020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f51a91561b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f51a9156340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f51a91564d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f51a9156660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f51a91567f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f51a9156980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f51a9156b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f51a9156ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f51a9156e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f51a9155020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f51a91551b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f51a9155440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f51a91555d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f51a9155760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f51a91558f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f51a9155a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f51a9155c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f51a9155da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f51a9154020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f51a91541b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f51a9154340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f51a91544d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51a9154660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f51a91549f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f51a9154b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f51a9154d10"/>
        <function-ref name="tx" scoped="" ref="0x7f51a9153020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f51a91531b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f51a9153340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f51a91534d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f51a9153660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f51a91537f0"/>
        <function-ref name="rx" scoped="" ref="0x7f51a9153980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f51a9153b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f51a9153ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f51a9153e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f51a9152020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f51a91521b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f51a91572b0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a91572b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f51a9157630"/>
        <function-ref name="userId" scoped="" ref="0x7f51a91577c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f51a9aea2c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a9aea2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f51a9aea640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f51a9aea7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f51a9ae98a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9ae98a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f51a9ae9c20"/>
        <function-ref name="configure" scoped="" ref="0x7f51a9ae9db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f51a9aee4d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f51a9aee4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f51a9aee850"/>
        <function-ref name="txDone" scoped="" ref="0x7f51a9aee9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f51a9aeb020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f51a9aeb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a9aeb3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a9aeb530"/>
        <function-ref name="request" scoped="" ref="0x7f51a9aeb6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f51a9aeb850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a9aeb9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f51a9aed3f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f51a9aed3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51a9aed770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f51a9aeaad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a9aeaad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f51a9aeae50"/>
        <function-ref name="userId" scoped="" ref="0x7f51a9ae9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f51a9ad4bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a9ad4bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f51a9ad3020"/>
        <function-ref name="userId" scoped="" ref="0x7f51a9ad31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f51a9ae7d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f51a9ae7d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f51a9ae6180"/>
        <function-ref name="txDone" scoped="" ref="0x7f51a9ae6310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f51a9ad45e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f51a9ad45e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51a9ad4960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f51a9ae6710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f51a9ae6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f51a9ae6ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f51a9ae6d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f51a9ae6d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f51a9ad4180"/>
        <function-ref name="txDone" scoped="" ref="0x7f51a9ad4310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f51a9a5a020" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a9a5a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f51a9a5a3c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f51a9a5a550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f51a9a59cd0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a9a59cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f51a9a580a0"/>
        <function-ref name="configure" scoped="" ref="0x7f51a9a58230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f51a9a5a7a0" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f51a9a5a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a9a5ab20"/>
        <function-ref name="requested" scoped="" ref="0x7f51a9a5acb0"/>
        <function-ref name="granted" scoped="" ref="0x7f51a9a5ae40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a9a59020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f51a9a591b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f51a9a5b210" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f51a9a5b210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a9a5b5b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a9a5b740"/>
        <function-ref name="request" scoped="" ref="0x7f51a9a5b8d0"/>
        <function-ref name="granted" scoped="" ref="0x7f51a9a5ba60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a9a5bbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f51a9a59400" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a9a59400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f51a9a59780"/>
        <function-ref name="userId" scoped="" ref="0x7f51a9a59910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51a8d81e50" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51a8d81e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51a8d80210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f51a8d804a0" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f51a8d804a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f51a8d80820"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f51a8d809b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f51a8d80b40"/>
        <function-ref name="dequeue" scoped="" ref="0x7f51a8d80cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f51a8d7d530" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f51a8d7d530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f51a8d7d8d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f51a8d7da60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f51a8d7b270" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f51a8d7b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f51a8d7b610"/>
        <function-ref name="configure" scoped="" ref="0x7f51a8d7b7a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f51a8d7ba30" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f51a8d7ba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f51a8d7bdb0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f51a8d79020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f51a8d791b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f51a8d79340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f51a8d7dcb0" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f51a8d7dcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a8d7c0a0"/>
        <function-ref name="requested" scoped="" ref="0x7f51a8d7c230"/>
        <function-ref name="granted" scoped="" ref="0x7f51a8d7c3c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a8d7c550"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f51a8d7c6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f51a8d79590" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51a8d79590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51a8d79910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51a8d79aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f51a8d79c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51a8d79dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51a8d78020"/>
        <function-ref name="get" scoped="" ref="0x7f51a8d781b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51a8d78340"/>
        <function-ref name="led0On" scoped="" ref="0x7f51a8d78980"/>
        <function-ref name="set" scoped="" ref="0x7f51a8d78660"/>
        <function-ref name="led2On" scoped="" ref="0x7f51a8d784d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51a8d787f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f51a8d7e740" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f51a8d7e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a8d7eae0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a8d7ec70"/>
        <function-ref name="request" scoped="" ref="0x7f51a8d7ee00"/>
        <function-ref name="granted" scoped="" ref="0x7f51a8d7d020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a8d7d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f51a8d7c930" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f51a8d7c930"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f51a8d7ccb0"/>
        <function-ref name="userId" scoped="" ref="0x7f51a8d7ce40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f51a8d78c50" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f51a8d78c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51a8d77020"/>
        <function-ref name="runTask" scoped="" ref="0x7f51a8d771b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f51a9a51d70" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f51a9a51d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f51a9a4e180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f51a9a4e310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f51a9a4e4a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f51a9a4e630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f51a9a4e7c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f51a9a4e950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f51a9a4eae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f51a9a4ec70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51a9a4ee00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f51a9a4d020"/>
        <function-ref name="getData" scoped="" ref="0x7f51a9a4d1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f51a9a4d340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f51a9a4d4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f51a9a4d760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f51a9a4d8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f51a9a4da80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f51a9a4dc10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f51a9a4dda0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f51a9a4c020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f51a9a4c1b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f51a9a4c340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f51a9a4c4d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f51a9a4c660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f51a9a4c7f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f51a9a4c980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f51a9a4cd10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f51a9a4b020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f51a9a4b1b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f51a9a4b340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f51a9a4b4d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f51a9a4b660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f51a9a4b7f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f51a9a4b980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f51a9a4bb10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f51a9a4bca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f51a9a4be30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f51a9a4a020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f51a9a4a1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f51a9a4a340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f51a9a4a4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f51a9a4a660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f51a9a4a7f0"/>
        <function-ref name="setData" scoped="" ref="0x7f51a9a4a980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f51a9a4ab10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f51a9a4aca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f51a9a4ae30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f51a9a49020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f51a9a491b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f51a9a49340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f51a9a498d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f51a9a49a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f51a9a49bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f51a9a49d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f51a9a48020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f51a9a481b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f51a9a48340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f51a9a484d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f51a9a48660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f51a9a487f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f51a9a3e700" loc="41:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f51a9a3e700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f51a9a3ea80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f51a9a3ec10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f51a9a3eda0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f51a9a3d020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f51a9a3d1b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f51a9a3d340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f51a9a3d4d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f51a9a3d660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f51a9a3d7f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f51a9a3d980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f51a9a3db10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f51a9a3dca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f51a9a3de30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f51a9a3c120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f51a9a3c2b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f51a9a3c440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f51a9a3c5d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f51a9a3c760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f51a9a3c8f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f51a9a3ca80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f51a9a3cc10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f51a9a3cda0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f51a9a3b020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f51a9a3b1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51a9a3b340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f51a9a3b6d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f51a9a3b860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f51a9a3b9f0"/>
        <function-ref name="tx" scoped="" ref="0x7f51a9a3bb80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f51a9a3bd10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f51a9a3a020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f51a9a3a1b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f51a9a3a340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f51a9a3a4d0"/>
        <function-ref name="rx" scoped="" ref="0x7f51a9a3a660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f51a9a3a7f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f51a9a3a980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f51a9a3ab10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f51a9a3aca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f51a9a3ae30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f51a9a371f0" loc="43:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f51a9a371f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9a37570"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9a37700"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9a37890"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9a37a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9a37bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9a37d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9a36020"/>
        <function-ref name="get" scoped="" ref="0x7f51a9a361b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9a36340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9a364d0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9a36660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9a367f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9a36980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9a36c10"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9a36da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f51a9a47940" loc="39:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f51a9a47940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f51a9a47cc0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f51a9a47e50"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f51a9a44020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f51a9a441b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f51a9a44340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f51a9a444d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f51a9a44660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f51a9a447f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51a9a44980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f51a9a44b10"/>
        <function-ref name="getData" scoped="" ref="0x7f51a9a44ca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f51a9a44e30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f51a9a43020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f51a9a432b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f51a9a43440"/>
        <function-ref name="getIV" scoped="" ref="0x7f51a9a435d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f51a9a43760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f51a9a438f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f51a9a43a80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f51a9a43c10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f51a9a43da0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f51a9a42020"/>
        <function-ref name="isI2C" scoped="" ref="0x7f51a9a421b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f51a9a42340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f51a9a424d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f51a9a42860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f51a9a429f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f51a9a42b80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f51a9a42d10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f51a9a41020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f51a9a411b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f51a9a41340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f51a9a414d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f51a9a41660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f51a9a417f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f51a9a41980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f51a9a41b10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f51a9a41ca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f51a9a41e30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f51a9a40020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f51a9a401b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f51a9a40340"/>
        <function-ref name="setData" scoped="" ref="0x7f51a9a404d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f51a9a40660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f51a9a407f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f51a9a40980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f51a9a40b10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f51a9a40ca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f51a9a40e30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f51a9a3f420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f51a9a3f5b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f51a9a3f740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f51a9a3f8d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f51a9a3fa60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f51a9a3fbf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f51a9a3fd80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f51a9a3e020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f51a9a3e1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f51a9a3e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f51a9a39250" loc="42:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f51a9a39250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f51a9a395d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f51a9a39760"/>
        <function-ref name="setResistor" scoped="" ref="0x7f51a9a398f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f51a9a39a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f51a9a39c10"/>
        <function-ref name="getResistor" scoped="" ref="0x7f51a9a39da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f51a9a38020"/>
        <function-ref name="get" scoped="" ref="0x7f51a9a381b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f51a9a38340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f51a9a384d0"/>
        <function-ref name="set" scoped="" ref="0x7f51a9a38660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f51a9a387f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f51a9a38980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f51a9a38c10"/>
        <function-ref name="clr" scoped="" ref="0x7f51a9a38da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f51a9987920" loc="37:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f51a9987920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f51a9987ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f51a9986020" loc="38:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f51a9986020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f51a99863a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f51a9986530"/>
        <function-ref name="request" scoped="" ref="0x7f51a99866c0"/>
        <function-ref name="granted" scoped="" ref="0x7f51a9986850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f51a99869e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f51a99870c0" loc="36:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f51a99870c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f51a9987440"/>
        <function-ref name="stop" scoped="" ref="0x7f51a99875d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f51a9972a30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f51a9972a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f51a9972db0"/>
        <function-ref name="offset" scoped="" ref="0x7f51a996f020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f51a996f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x7f51a9954bf0" loc="43:../../../tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f51a9954bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f51a992fae0"/>
        <function-ref name="enqueue" scoped="" ref="0x7f51a992e880"/>
        <function-ref name="element" scoped="" ref="0x7f51a992c020"/>
        <function-ref name="full" scoped="" ref="0x7f51a9930ce0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f51a992f660"/>
        <function-ref name="dequeue" scoped="" ref="0x7f51a992e1d0"/>
        <function-ref name="empty" scoped="" ref="0x7f51a9930860"/>
        <function-ref name="size" scoped="" ref="0x7f51a992f1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f51a9924a20" loc="93:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f51a9924a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x7f51a9925920"/>
        <function-ref name="enqueue" scoped="" ref="0x7f51a99226d0"/>
        <function-ref name="element" scoped="" ref="0x7f51a9922d40"/>
        <function-ref name="full" scoped="" ref="0x7f51a9926af0"/>
        <function-ref name="maxSize" scoped="" ref="0x7f51a99254a0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f51a9922020"/>
        <function-ref name="empty" scoped="" ref="0x7f51a9926670"/>
        <function-ref name="size" scoped="" ref="0x7f51a9925020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f51a9921440" loc="94:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f51a9921440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f51a99217c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51a9921950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51a9921ae0"/>
        <function-ref name="cancel" scoped="" ref="0x7f51a9921c70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f51a9921e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f51a99200c0" loc="95:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f51a99200c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51a9920440"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f51a99205d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f51a9920760"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f51a99208f0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f51a9920a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x7f51a991a500" loc="114:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="retrySend" scoped="" ref="0x7f51a991a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51a991a880"/>
        <function-ref name="runTask" scoped="" ref="0x7f51a991aa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51a992ba60" loc="89:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51a992ba60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51a992bde0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f51a9920d00" loc="96:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f51a9920d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f51a991f0a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f51a991f230"/>
        <function-ref name="led1On" scoped="" ref="0x7f51a991f3c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f51a991f550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f51a991f6e0"/>
        <function-ref name="get" scoped="" ref="0x7f51a991f870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f51a991fa00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f51a991e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f51a991fb90"/>
        <function-ref name="led0On" scoped="" ref="0x7f51a991fd20"/>
        <function-ref name="led2On" scoped="" ref="0x7f51a991e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x7f51a99241a0" loc="90:../../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f51a99241a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f51a9924520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f51a9903be0" loc="43:../../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f51a9903be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f51a9900020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51a98fd020" loc="94:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51a98fd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51a98fd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x7f51a98fd680" loc="95:../../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x7f51a98fd680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x7f51a98fda00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f51a9902c80" loc="48:TestCryptC.nc">
      <component-ref qname="TestCryptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f51a9902c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f51a98f70a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CRYPTO" ref="0x7f51a98af580" loc="50:TestCryptC.nc">
      <component-ref qname="TestCryptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CRYPTO" scoped="" ref="0x7f51a98af580"/></type-interface>
      <instance>
        <interfacedef-ref qname="CRYPTO"/>
      </instance>
      <interface-functions>
        <function-ref name="xtea_decrypt" scoped="" ref="0x7f51a98af900"/>
        <function-ref name="kasumi_decrypt" scoped="" ref="0x7f51a98afa90"/>
        <function-ref name="blowfish_encrypt" scoped="" ref="0x7f51a98afc20"/>
        <function-ref name="skipjack_encrypt" scoped="" ref="0x7f51a98afdb0"/>
        <function-ref name="safer_decrypt" scoped="" ref="0x7f51a98e7020"/>
        <function-ref name="blowfish_setup" scoped="" ref="0x7f51a98e71b0"/>
        <function-ref name="blowfish_done" scoped="" ref="0x7f51a98e7340"/>
        <function-ref name="rc5_encrypt" scoped="" ref="0x7f51a98e74d0"/>
        <function-ref name="lsb" scoped="" ref="0x7f51a98e7660"/>
        <function-ref name="kasumi_setup" scoped="" ref="0x7f51a98e77f0"/>
        <function-ref name="rc4_encrypt" scoped="" ref="0x7f51a98e7980"/>
        <function-ref name="rc5_decrypt" scoped="" ref="0x7f51a98e7b10"/>
        <function-ref name="rc2_decrypt" scoped="" ref="0x7f51a98e7ca0"/>
        <function-ref name="rc5_setup" scoped="" ref="0x7f51a98e6020"/>
        <function-ref name="kasumi_done" scoped="" ref="0x7f51a98e61b0"/>
        <function-ref name="xxtea_encrypt" scoped="" ref="0x7f51a98e6340"/>
        <function-ref name="rc2_setup" scoped="" ref="0x7f51a98e64d0"/>
        <function-ref name="tea_decrypt" scoped="" ref="0x7f51a98e6660"/>
        <function-ref name="tea_encrypt" scoped="" ref="0x7f51a98e67f0"/>
        <function-ref name="skipjack_done" scoped="" ref="0x7f51a98e6980"/>
        <function-ref name="msb" scoped="" ref="0x7f51a98e6b10"/>
        <function-ref name="skipjack_decrypt" scoped="" ref="0x7f51a98e6ca0"/>
        <function-ref name="xxtea_decrypt" scoped="" ref="0x7f51a98e6e30"/>
        <function-ref name="safer_encrypt" scoped="" ref="0x7f51a98ae020"/>
        <function-ref name="skipjack_setup" scoped="" ref="0x7f51a98ae1b0"/>
        <function-ref name="blowfish_decrypt" scoped="" ref="0x7f51a98ae540"/>
        <function-ref name="safer_done" scoped="" ref="0x7f51a98ae6d0"/>
        <function-ref name="xtea_encrypt" scoped="" ref="0x7f51a98ae860"/>
        <function-ref name="rc2_encrypt" scoped="" ref="0x7f51a98ae9f0"/>
        <function-ref name="rc2_done" scoped="" ref="0x7f51a98aeb80"/>
        <function-ref name="rc5_done" scoped="" ref="0x7f51a98aed10"/>
        <function-ref name="rc4_decrypt" scoped="" ref="0x7f51a98ad020"/>
        <function-ref name="kasumi_encrypt" scoped="" ref="0x7f51a98ad1b0"/>
        <function-ref name="safer_setup" scoped="" ref="0x7f51a98ad340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f51a98edda0" loc="49:TestCryptC.nc">
      <component-ref qname="TestCryptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51a98edda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a98ea390"/>
        <function-ref name="fired" scoped="" ref="0x7f51a98f5970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f51a98eb720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f51a98eb2a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f51a98eac90"/>
        <function-ref name="gett0" scoped="" ref="0x7f51a98ea810"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a98f5df0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f51a98f69d0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f51a98ebd30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f51a98f5020"/>
        <function-ref name="stop" scoped="" ref="0x7f51a98f54f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f51a98a2420" loc="39:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f51a98a2420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f51a98a27a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f51a98a2b40" loc="40:../../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f51a98a2b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f51a989f020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f51a989f1b0"/>
        <function-ref name="start" scoped="" ref="0x7f51a989f340"/>
        <function-ref name="stop" scoped="" ref="0x7f51a989f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CRYPTO" ref="0x7f51a98a3bc0" loc="2:../../../tos/platforms/shimmer2r/CRYPTOC.nc">
      <component-ref qname="CRYPTOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CRYPTO" scoped="" ref="0x7f51a98a3bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CRYPTO"/>
      </instance>
      <interface-functions>
        <function-ref name="xtea_decrypt" scoped="" ref="0x7f51a9898020"/>
        <function-ref name="kasumi_decrypt" scoped="" ref="0x7f51a98981b0"/>
        <function-ref name="blowfish_encrypt" scoped="" ref="0x7f51a9898340"/>
        <function-ref name="skipjack_encrypt" scoped="" ref="0x7f51a98984d0"/>
        <function-ref name="safer_decrypt" scoped="" ref="0x7f51a9898660"/>
        <function-ref name="blowfish_setup" scoped="" ref="0x7f51a98987f0"/>
        <function-ref name="blowfish_done" scoped="" ref="0x7f51a9898980"/>
        <function-ref name="rc5_encrypt" scoped="" ref="0x7f51a9898b10"/>
        <function-ref name="lsb" scoped="" ref="0x7f51a9898ca0"/>
        <function-ref name="kasumi_setup" scoped="" ref="0x7f51a9898e30"/>
        <function-ref name="rc4_encrypt" scoped="" ref="0x7f51a9897020"/>
        <function-ref name="rc5_decrypt" scoped="" ref="0x7f51a98971b0"/>
        <function-ref name="rc2_decrypt" scoped="" ref="0x7f51a9897340"/>
        <function-ref name="rc5_setup" scoped="" ref="0x7f51a98975d0"/>
        <function-ref name="kasumi_done" scoped="" ref="0x7f51a9897760"/>
        <function-ref name="xxtea_encrypt" scoped="" ref="0x7f51a98978f0"/>
        <function-ref name="rc2_setup" scoped="" ref="0x7f51a9897a80"/>
        <function-ref name="tea_decrypt" scoped="" ref="0x7f51a9897c10"/>
        <function-ref name="tea_encrypt" scoped="" ref="0x7f51a9897da0"/>
        <function-ref name="skipjack_done" scoped="" ref="0x7f51a9896020"/>
        <function-ref name="msb" scoped="" ref="0x7f51a98961b0"/>
        <function-ref name="skipjack_decrypt" scoped="" ref="0x7f51a9896340"/>
        <function-ref name="xxtea_decrypt" scoped="" ref="0x7f51a98964d0"/>
        <function-ref name="safer_encrypt" scoped="" ref="0x7f51a9896660"/>
        <function-ref name="skipjack_setup" scoped="" ref="0x7f51a98967f0"/>
        <function-ref name="blowfish_decrypt" scoped="" ref="0x7f51a9896b80"/>
        <function-ref name="safer_done" scoped="" ref="0x7f51a9896d10"/>
        <function-ref name="xtea_encrypt" scoped="" ref="0x7f51a9895020"/>
        <function-ref name="rc2_encrypt" scoped="" ref="0x7f51a98951b0"/>
        <function-ref name="rc2_done" scoped="" ref="0x7f51a9895340"/>
        <function-ref name="rc5_done" scoped="" ref="0x7f51a98954d0"/>
        <function-ref name="rc4_decrypt" scoped="" ref="0x7f51a9895660"/>
        <function-ref name="kasumi_encrypt" scoped="" ref="0x7f51a98957f0"/>
        <function-ref name="safer_setup" scoped="" ref="0x7f51a9895980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CRYPTO" ref="0x7f51a98947a0" loc="4:../../../tos/platforms/shimmer2r/CRYPTOP.nc">
      <component-ref qname="CRYPTOP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CRYPTO" scoped="" ref="0x7f51a98947a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CRYPTO"/>
      </instance>
      <interface-functions>
        <function-ref name="xtea_decrypt" scoped="" ref="0x7f51a9894b20"/>
        <function-ref name="kasumi_decrypt" scoped="" ref="0x7f51a9894cb0"/>
        <function-ref name="blowfish_encrypt" scoped="" ref="0x7f51a9894e40"/>
        <function-ref name="skipjack_encrypt" scoped="" ref="0x7f51a9891020"/>
        <function-ref name="safer_decrypt" scoped="" ref="0x7f51a98911b0"/>
        <function-ref name="blowfish_setup" scoped="" ref="0x7f51a9891340"/>
        <function-ref name="blowfish_done" scoped="" ref="0x7f51a98914d0"/>
        <function-ref name="rc5_encrypt" scoped="" ref="0x7f51a9891660"/>
        <function-ref name="lsb" scoped="" ref="0x7f51a98917f0"/>
        <function-ref name="kasumi_setup" scoped="" ref="0x7f51a9891980"/>
        <function-ref name="rc4_encrypt" scoped="" ref="0x7f51a9891b10"/>
        <function-ref name="rc5_decrypt" scoped="" ref="0x7f51a9891ca0"/>
        <function-ref name="rc2_decrypt" scoped="" ref="0x7f51a9891e30"/>
        <function-ref name="rc5_setup" scoped="" ref="0x7f51a9890120"/>
        <function-ref name="kasumi_done" scoped="" ref="0x7f51a98902b0"/>
        <function-ref name="xxtea_encrypt" scoped="" ref="0x7f51a9890440"/>
        <function-ref name="rc2_setup" scoped="" ref="0x7f51a98905d0"/>
        <function-ref name="tea_decrypt" scoped="" ref="0x7f51a9890760"/>
        <function-ref name="tea_encrypt" scoped="" ref="0x7f51a98908f0"/>
        <function-ref name="skipjack_done" scoped="" ref="0x7f51a9890a80"/>
        <function-ref name="msb" scoped="" ref="0x7f51a9890c10"/>
        <function-ref name="skipjack_decrypt" scoped="" ref="0x7f51a9890da0"/>
        <function-ref name="xxtea_decrypt" scoped="" ref="0x7f51a988f020"/>
        <function-ref name="safer_encrypt" scoped="" ref="0x7f51a988f1b0"/>
        <function-ref name="skipjack_setup" scoped="" ref="0x7f51a988f340"/>
        <function-ref name="blowfish_decrypt" scoped="" ref="0x7f51a988f6d0"/>
        <function-ref name="safer_done" scoped="" ref="0x7f51a988f860"/>
        <function-ref name="xtea_encrypt" scoped="" ref="0x7f51a988f9f0"/>
        <function-ref name="rc2_encrypt" scoped="" ref="0x7f51a988fb80"/>
        <function-ref name="rc2_done" scoped="" ref="0x7f51a988fd10"/>
        <function-ref name="rc5_done" scoped="" ref="0x7f51a988e020"/>
        <function-ref name="rc4_decrypt" scoped="" ref="0x7f51a988e1b0"/>
        <function-ref name="kasumi_encrypt" scoped="" ref="0x7f51a988e340"/>
        <function-ref name="safer_setup" scoped="" ref="0x7f51a988e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f51a9536640" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TestCryptAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51a9536640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a93a3c40"/>
        <function-ref name="fired" scoped="" ref="0x7f51a93a41e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f51a93a3020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f51a93a4ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f51a93a2590"/>
        <function-ref name="gett0" scoped="" ref="0x7f51a93a2110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a93a4660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f51a93a6390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f51a93a3630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f51a93a6860"/>
        <function-ref name="stop" scoped="" ref="0x7f51a93a6d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f51a952d610" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f51a952d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a9529c40"/>
        <function-ref name="fired" scoped="" ref="0x7f51a952b1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f51a9529020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f51a952bae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f51a9528590"/>
        <function-ref name="gett0" scoped="" ref="0x7f51a9528110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a952b660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f51a952c390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f51a9529630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f51a952c860"/>
        <function-ref name="stop" scoped="" ref="0x7f51a952cd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f51a95231d0" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f51a95231d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a9520630"/>
        <function-ref name="fired" scoped="" ref="0x7f51a9522c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f51a95219d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f51a9521550"/>
        <function-ref name="getdt" scoped="" ref="0x7f51a951e020"/>
        <function-ref name="gett0" scoped="" ref="0x7f51a9520ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a95210d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f51a9523dc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f51a9520020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f51a95222e0"/>
        <function-ref name="stop" scoped="" ref="0x7f51a95227b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f51a951ba80" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f51a951ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a951d6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51a9524400" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51a9524400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51a9524780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f51a9442020" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f51a9442020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a943f870"/>
        <function-ref name="fired" scoped="" ref="0x7f51a9441840"/>
        <function-ref name="startAt" scoped="" ref="0x7f51a943f220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a9441d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f51a943fd30"/>
        <function-ref name="start" scoped="" ref="0x7f51a9442e30"/>
        <function-ref name="stop" scoped="" ref="0x7f51a9441380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51a9443760" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51a9443760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51a9443ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f51a8d2c140" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f51a8d2c140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a8d2ab30"/>
        <function-ref name="fired" scoped="" ref="0x7f51a8d2b9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f51a8d2a4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a8d2a020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f51a8d28020"/>
        <function-ref name="start" scoped="" ref="0x7f51a8d2b020"/>
        <function-ref name="stop" scoped="" ref="0x7f51a8d2b530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51a8d2d860" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51a8d2d860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51a8d2dbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f51a8d13a80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a8d13a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51a8d13e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51a8d12020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51a8d121b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51a8d12340"/>
        <function-ref name="fired" scoped="" ref="0x7f51a8d124d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f51a8d16020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a8d16020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51a8d163a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51a8d16530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51a8d166c0"/>
        <function-ref name="get" scoped="" ref="0x7f51a8d16850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51a8d169e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a8d16b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f51a8d16d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a8d15020"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a8d151b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f51a8d15340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51a8d154d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f51a8d15760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a8d15760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51a8d15ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51a8d15c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51a8d15e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51a8d13020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51a8d131b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51a8d13340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51a8d134d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51a8d13660"/>
        <function-ref name="setControl" scoped="" ref="0x7f51a8d137f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f51a94f8ba0" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a94f8ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51a94f7020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51a94f71b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51a94f7340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51a94f74d0"/>
        <function-ref name="fired" scoped="" ref="0x7f51a94f7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f51a94fc4d0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a94fc4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51a94fc850"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51a94fc9e0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51a94fcb70"/>
        <function-ref name="get" scoped="" ref="0x7f51a94fcd00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51a94fb020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a94fb1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f51a94fb340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a94fb4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a94fb660"/>
        <function-ref name="setMode" scoped="" ref="0x7f51a94fb7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51a94fb980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f51a94f9280" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a94f9280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51a94f9600"/>
        <function-ref name="getControl" scoped="" ref="0x7f51a94f9790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51a94f9920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51a94f9ab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51a94f9c40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51a94f9dd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51a94f8020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51a94f81b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f51a94f8340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f51a8d09760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f51a8d09760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f51a8d09ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f51a8d09c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f51a8d09e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f51a8d08020"/>
        <function-ref name="fired" scoped="" ref="0x7f51a8d081b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f51a8d0ddd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f51a8d0ddd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f51a8d0c180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f51a8d0c310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51a8d0c4a0"/>
        <function-ref name="get" scoped="" ref="0x7f51a8d0c630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51a8d0c7c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a8d0c950"/>
        <function-ref name="getMode" scoped="" ref="0x7f51a8d0cae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a8d0cc70"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a8d0ce00"/>
        <function-ref name="setMode" scoped="" ref="0x7f51a8d0b020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f51a8d0b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f51a8d10bf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f51a8d10bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a8d0d4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f51a8d0e4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f51a8d0ee60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a8d0e9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f51a8d0d9a0"/>
        <function-ref name="start" scoped="" ref="0x7f51a8d0fa80"/>
        <function-ref name="stop" scoped="" ref="0x7f51a8d0e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f51a8d10360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f51a8d10360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f51a8d106e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f51a8d0b440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f51a8d0b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f51a8d0b7c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f51a8d0b950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f51a8d0bae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f51a8d0bc70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f51a8d0be00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f51a8d09020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f51a8d091b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f51a8d09340"/>
        <function-ref name="setControl" scoped="" ref="0x7f51a8d094d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f51a94a4020" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f51a94a4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a94a4e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a94a2800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a94a2340"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a94a2cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f51a9481950" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f51a9481950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a9480780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a947f150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a9480c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a947f610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f51a949e5f0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f51a949e5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a9483430"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a9483db0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a94838f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a94812a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f51a8d265f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f51a8d265f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a8d24e50"/>
        <function-ref name="fired" scoped="" ref="0x7f51a8d25e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f51a8d24800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a8d24340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f51a8d23340"/>
        <function-ref name="start" scoped="" ref="0x7f51a8d25430"/>
        <function-ref name="stop" scoped="" ref="0x7f51a8d25940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f51a8d20d20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f51a8d20d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f04950"/>
            <typename><typedef-ref name="T32khz" ref="0x7f51a9f04cc0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a8d1d670"/>
        <function-ref name="fired" scoped="" ref="0x7f51a8d1e550"/>
        <function-ref name="startAt" scoped="" ref="0x7f51a8d1d020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a8d1ea10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f51a8d1db30"/>
        <function-ref name="start" scoped="" ref="0x7f51a8d1fb60"/>
        <function-ref name="stop" scoped="" ref="0x7f51a8d1e090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f51a8d239b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f51a8d239b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a8d217e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a8d201b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a8d21ca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a8d20670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f51a940d490" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f51a940d490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51a940d810"/>
        <function-ref name="runTask" scoped="" ref="0x7f51a940d9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f51a94101d0" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f51a94101d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a940eb30"/>
        <function-ref name="fired" scoped="" ref="0x7f51a940f9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f51a940e4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a940e020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f51a940d020"/>
        <function-ref name="start" scoped="" ref="0x7f51a940f020"/>
        <function-ref name="stop" scoped="" ref="0x7f51a940f530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f51a9417cf0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51a9417cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a9412220"/>
        <function-ref name="fired" scoped="" ref="0x7f51a94147c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f51a9413590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f51a9413110"/>
        <function-ref name="getdt" scoped="" ref="0x7f51a9412b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f51a94126a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a9414c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f51a9415940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f51a9413ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f51a9415e10"/>
        <function-ref name="stop" scoped="" ref="0x7f51a9414340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f51a93bce80" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f51a93bce80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f51a93bb220"/>
        <function-ref name="runTask" scoped="" ref="0x7f51a93bb3b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f51a93c2c30" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f51a93c2c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a93bc110"/>
        <function-ref name="fired" scoped="" ref="0x7f51a93bf6a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f51a93be4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f51a93be020"/>
        <function-ref name="getdt" scoped="" ref="0x7f51a93bca10"/>
        <function-ref name="gett0" scoped="" ref="0x7f51a93bc590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a93bfb20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f51a93c0860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f51a93beab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f51a93c0d30"/>
        <function-ref name="stop" scoped="" ref="0x7f51a93bf220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f51a93c7690" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f51a93c7690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f51a93c3cf0"/>
        <function-ref name="fired" scoped="" ref="0x7f51a93c5260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f51a93c3090"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f51a93c5ba0"/>
        <function-ref name="getdt" scoped="" ref="0x7f51a93c2680"/>
        <function-ref name="gett0" scoped="" ref="0x7f51a93c21e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f51a93c5700"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f51a93c6390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f51a93c36c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f51a93c6880"/>
        <function-ref name="stop" scoped="" ref="0x7f51a93c6d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f51a93b9cf0" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f51a93b9cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a93b8980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f51a93ae020" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f51a93ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f51a9f041a0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f51a9f04510"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f51a93aee30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f51a93ad800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f51a93ad340"/>
        <function-ref name="overflow" scoped="" ref="0x7f51a93adcc0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f51aa3eddc0" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f51aa3eea10" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f51aa3a5740" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f51aa3a8990" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f51aa3a5020" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f51aa3a82b0" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f51aa3a7120" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f51aa3a94d0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f51aa3a9bb0" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f51aa3a7840" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f51aa72b020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f51aa9ec3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f51aa354500" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f51aa354280" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f51aa3599c0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f51aa39d5a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f51aa39c020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f51aa354d70" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f51aa352c80" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f51aa355b00" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f51aa3524f0" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f51aa356190" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f51aa356920" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f51aa355390" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f51aa39d5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f51aa39c020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f51aa355110" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f51aa39d5a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f51aa39c020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f51aa346560" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f51aa344ca0" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f51aa344a20" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f51aa3429d0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f51aa342750" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f51aa344270" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f51aa345940" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f51aa345020" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f51aa346c90" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f51aa34f890" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f51aa34c2a0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f51aa34c020" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f51aa34cc80" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f51aa34ca00" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f51aa34b6a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f51aa34b420" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f51aa34bd90" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f51aa35c120" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f51aa35ba10" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f51aa35b790" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f51aa35c850" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f51aa360350" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f51aa35b020" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f51aa35f270" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f51aa35e9e0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f51aa360ae0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f51aa35f980" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f51aa35e2e0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f51aa35e060" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f51aa35a450" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f51aa35a1d0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f51aa31d1f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f51aa47d7f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f51aa47a020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f51aa47d020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f51aa905810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f51aaaab020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f51aaaaa020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f51aaaab790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f51aaa9f270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f51aaa9fac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f51aa205bb0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f51aa405d10"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f51aa205260" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f51aa405d10"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f51aa2055e0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51aa205910" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f51aa200620" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa200020" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51aa200350" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f51aa1ff6d0" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f51aa2032a0" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa203020" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f51aa2027f0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa202210" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f51aa202560" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f51aa1fb020" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa207c60" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f51aa1fa110" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1fbe10" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f51aa1f6490" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1f7e50" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51aa1f61c0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f51aa1f7560" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f51aa1f85e0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1f8020" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51aa1f8350" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f51aa1e5d30" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f51aa405930"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f51aa1e5ab0" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f51aa1f0a10" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f51aa405d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f51aa1f0790" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f51aa206e50" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f51aa405d10"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f51aa1f2950" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f51aa405d10"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f51aa1f26d0" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f51aa1ed3a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f51aa405d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f51aa1f1d70" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f51aa1ed110" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f51aa405d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f51aa1efe50" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f51aa405d10"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f51aa1ef870" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f51aa1efbc0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f51aa405d10"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f51aa1ea810" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f51aa1ea590" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f51aa1e7b90" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f51aa1e75e0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f51aa1e7900" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f51aa405550"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f51aa1ec600" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f51aa1ec380" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f51aa1e42f0" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f51aa405930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f51aa1e6cf0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f51aa1e4060" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f51aa405930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f51aa1e3190" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f51aa405930"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f51aa1e0ad0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1e0850" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f51aa1decd0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1dea50" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f51aa1dc020" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1dfce0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f51aa1d65e0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1d6020" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51aa1d6350" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f51aa1d1bb0" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1d15b0" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51aa1d18e0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f51aa1d3d20" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f51aa1d4900" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1d4680" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f51aa1d2e00" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa1d2820" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f51aa1d2b70" loc="100:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f51aa165ab0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f51aa165830" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f51aa163020" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f51aa164d30" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f51aa168d60" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f51aa164350" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f51aa15f410" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
              <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa162a80" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f51aa162dd0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51aa15f130" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f51aa155270" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f51aa155a20" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f51aa154270" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f51aa1531f0" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f51aa151940" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f51aa150190" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f51aa154a00" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f51aa150d00" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f51aa150a80" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f51aa156a60" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f51aa1539d0" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f51aa151190" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f51aa0e7020" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa0e8960" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f51aa0e8ce0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f51aa0ea020" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f51aa0e8020" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f51aa0ea8b0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f51aa3f5720"/>
                <typename><typedef-ref name="message_t" ref="0x7f51aa3f4d80"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f51aa0eac20" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f51aa0cda40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f51aa0ca270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f51aa0c8070" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f51aa0cc8e0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f51aa0ddb20" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f51aa0d1020" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f51aa0d0c20" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51aa0d09a0" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f51aa0d18a0" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f51aa0d26d0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51aa0d2450" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f51aa0cf4b0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f51aa0d0190" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f51aa0da0e0" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f51aa0daa10" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f51aa0dc720" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f51aa0dc4a0" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f51aa0d95c0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f51aa0d9340" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f51aa0d77a0" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f51aa0d6400" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51aa0d6180" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f51aa0d4020" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f51aa0d6c50" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f51a9fa2dd0" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f51a9fa2800" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51a9fa2b40" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f51a9f9bac0" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f51a9f9b840" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f51a9f9a930" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f51a9f9a360" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51a9f9a6a0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f51a9f9c740" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f51a9f972c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f51a9f98920" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51a9f98c60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f51a9f97020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f51a9f9b070" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f51a9f9e720" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f51a9f9fdb0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f51a9f9e130" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f51a9f9e480" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f51a9f775b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f51a9f77330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f51a9f77df0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f51a9f76cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f51a9f76700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f51a9f76a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f51a9f74b50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f51a9f21ae0" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f51a9f1a4e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f51a9f17890" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f51a9f40e70"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f51a9f3f2b0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f51a9f1e350" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f51a9f1f350" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f51a9f22980" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f51a9f1fb40" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f51a9f1edb0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f51a9f0f020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f51a9f10750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f51a9f08d70" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51a9f08af0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f51a9f08350" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f51a9edf390" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f51a9eea020" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f51a9efade0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f51a9f6fc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f51a9f6e4f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f51a9efab60" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f51a9f6fc50"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f51a9f6e4f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f51a9eed0e0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f51a9ef42a0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f51a9f6ac30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f51a9f694f0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f51a9ef4020" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f51a9f6ac30"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f51a9f694f0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f51a9ee4750" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f51a9ee1cf0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f51a9ef6830" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f51a9f6db60"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f51a9f6b390"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f51a9ef4a90" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f51a9f6ac30"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f51a9f694f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f51a9ef1830" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f51a9ef15b0" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f51a9ef2e40" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f51a9ee4020" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f51a9ef6040" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f51a9f6db60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f51a9f6b390"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f51a9ef7da0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f51a9f6db60"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f51a9f6b390"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f51a9ef3c80" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f51a9ee4e80" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f51a9ef2690" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f51a9ef2410" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f51a9eee190" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f51a9eee910" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f51a9ee5070" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f51a9ee8020" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f51a9eec070" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f51a9ee57b0" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f51a9eea800" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f51a9ee35c0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f51a9eef070" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f51a9f78320"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f51a9f70320"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f51a9ee3d60" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f51a9ee0bd0" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f51a9ef34d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f51a9ef3250" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f51a9edfd30" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51a9edfab0" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f51a9ef7600" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f51a9f6fc50"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f51a9f6e4f0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f51a9eed850" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f51a9ee9020" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f51a9ee6800" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f51a9f40e70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f51a9f3f2b0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f51a9ee6580" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f51a9f40e70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f51a9f3f2b0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f51a9ee8af0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f51a9f52020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f51a9f52440"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f51a9ee8870" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f51a9f52020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f51a9f52440"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f51a9ede730" loc="231:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f51a9ee1570" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f51a9eef880" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f51a9ee0480" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f51a9ee9790" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f51a9eec850" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f51a9ed9ce0" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f51a9ed9ce0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f51a9ed6020" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9ed6020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f51a9ed6940" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9ed6020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f51a9ed5a50" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f51a9ed51f0" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f51a9ed41f0" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f51a9e60930" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f51a9e22a50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f51a9e211f0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f51a9e1db10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f51a9e1d890" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f51a9e232d0" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f51a9e1f0e0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f51a9e1c490" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f51a9e21930" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f51a9e222b0" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f51a9e1e7c0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f51a9e23a70" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f51a9e25420" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f51a9e1f860" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f51a9e1d020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f51a9e1e070" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f51a9e25b50" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f51a9e36780" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f51a9e49c90" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f51a9e3c020" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f51a9e3dca0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f51a9e50390" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f51a9e397a0" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f51a9e41020" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f51a9e4ada0" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f51a9e47b70" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f51a9e4bd40" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f51a9e4bac0" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f51a9e4c270" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f51a9e45900" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f51a9e3b020" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f51a9e36020" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f51a9e3d560" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f51a9e311f0" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f51a9e2d880" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f51a9e4f270" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f51a9e45190" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f51a9e43a90" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f51a9e4a650" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f51a9e52190" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f51a9e3ed40" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f51a9e3eac0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f51a9e569f0" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f51a9e39020" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f51a9e34020" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f51a9e2f9a0" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f51a9e2d120" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f51a9e38790" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f51a9e34750" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f51a9e3c7b0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f51a9e321f0" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f51a9e4f990" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f51a9e401f0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f51a9e33630" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f51a9e37790" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f51a9e42760" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f51a9e424e0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f51a9e2e190" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f51a9e3e390" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f51a9e38020" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f51a9e52c10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f51a9f2cb90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f51a9f2a020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f51a9e52990" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f51a9f2cb90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f51a9f2a020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f51a9e46a00" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f51a9e4ea80" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f51a9e4e800" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f51a9e432a0" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51a9e43020" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f51a9e329c0" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f51a9e4b3b0" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f51a9e4e120" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f51a9e40bb0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f51a9e40930" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f51a9e50ac0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f51a9e34e70" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f51a9e37020" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f51a9e3b790" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f51a9e419f0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f51a9e41770" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f51a9e462b0" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f51a9e49530" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f51a9e2e900" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f51a9e4cbf0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f51a9e4c970" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f51a9e319b0" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f51a9e47420" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f51a9e2f1f0" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f51a9b59730" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f51a9b59e60" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f51a9b5b880" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f51a9b58cf0" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f51a9b59020" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f51a9b585b0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f51a9b5ea90" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f51a9b5b190" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f51a9afe020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f51a9afe880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f51a9ac9e00" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f51a9ac7020" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f51a9ac9570" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f51a9ac86d0" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f51a9ac7950" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f51a9abb020" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f51a9ac2090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f51a9abdd20" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f51a9ac2090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f51a9abe020" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f51a9abeb20" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f51a9ac2090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f51a9abe8a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f51a9ac2090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f51a9abd470" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f51a9ac2090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:../../../tos/interfaces/Queue.nc">
      <documentation loc="33:../../../tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x7f51a9952ad0" loc="43:../../../tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f51a9952ad0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x7f51a994d270" loc="80:../../../tos/interfaces/Queue.nc">
        <documentation loc="74:../../../tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f51a9952ad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x7f51a994bcb0" loc="97:../../../tos/interfaces/Queue.nc">
        <documentation loc="90:../../../tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f51aaaa6c20"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f51a9952ad0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x7f51a994ba30" loc="97:../../../tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f51a9952ad0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x7f51ab53bc30"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:2"><attribute-ref name="one" ref="0x7f51ab53bc30"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x7f51a9949c70" loc="108:../../../tos/interfaces/Queue.nc">
        <documentation loc="99:../../../tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f51a9952ad0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f51a99499f0" loc="108:../../../tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x7f51a994fb20" loc="57:../../../tos/interfaces/Queue.nc">
        <documentation loc="52:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x7f51a994ead0" loc="72:../../../tos/interfaces/Queue.nc">
        <documentation loc="67:../../../tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f51a994de50" loc="88:../../../tos/interfaces/Queue.nc">
        <documentation loc="82:../../../tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x7f51a9952ad0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x7f51a994f3b0" loc="50:../../../tos/interfaces/Queue.nc">
        <documentation loc="45:../../../tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x7f51a994e2d0" loc="65:../../../tos/interfaces/Queue.nc">
        <documentation loc="59:../../../tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x7f51a9927dd0" loc="49:../../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x7f51a9927b50" loc="49:../../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CRYPTO" loc="2:../../../tos/platforms/shimmer2r/CRYPTO.nc">
      <function command="" provided="0" name="xtea_decrypt" ref="0x7f51a98d2700" loc="13:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f51a98d4d80" loc="13:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f51a98d20d0" loc="13:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98d2460" loc="13:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_decrypt" ref="0x7f51a98b73f0" loc="37:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f51a98deae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f51a98dc4f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f51a98b9a00" loc="37:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f51a98b9d60" loc="37:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98b7150" loc="37:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f51a98deae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f51a98dc4f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_encrypt" ref="0x7f51a98b3460" loc="41:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7f51a98e2020"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f51a98e4480"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f51a98b5a30" loc="41:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f51a98b5d90" loc="41:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98b31c0" loc="41:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7f51a98e2020"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f51a98e4480"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_encrypt" ref="0x7f51a98d0c60" loc="16:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f51a98e06c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f51a98e0d90"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f51a98d02b0" loc="16:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f51a98d0610" loc="16:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98d09c0" loc="16:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f51a98e06c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f51a98e0d90"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_decrypt" ref="0x7f51a98c22c0" loc="27:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f51a98de180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f51a98de740"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block_in" ref="0x7f51a98c37a0" loc="27:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="block_out" ref="0x7f51a98c3b40" loc="27:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98c2020" loc="27:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f51a98de180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f51a98de740"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_setup" ref="0x7f51a98b52d0" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f51a98e4480"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7f51a98e2020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f51a98b64f0" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f51a98b67f0" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7f51a98b6b20" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f51a98b5020" loc="40:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f51a98e4480"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7f51a98e2020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_done" ref="0x7f51a98b10b0" loc="43:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f51a98e4480"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7f51a98e2020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f51a98b2e00" loc="43:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f51a98e4480"/>
                <typename><typedef-ref name="blowfish_key" ref="0x7f51a98e2020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_encrypt" ref="0x7f51a98be060" loc="31:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7f51a98e0310"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f51a98e1a90"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f51a98bf6d0" loc="31:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f51a98bf9f0" loc="31:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="ctx" ref="0x7f51a98bfda0" loc="31:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7f51a98e0310"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f51a98e1a90"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="lsb" ref="0x7f51a98b19b0" loc="45:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51a98b1730" loc="45:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_setup" ref="0x7f51a98bbe30" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f51a98deae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f51a98dc4f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f51a98bb1b0" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f51a98bb4b0" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7f51a98bb7e0" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f51a98bbb80" loc="35:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f51a98deae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f51a98dc4f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc4_encrypt" ref="0x7f51a98d6810" loc="9:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51a98d6210" loc="9:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7f51a98d6580" loc="9:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_decrypt" ref="0x7f51a98bd0d0" loc="32:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7f51a98e0310"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f51a98e1a90"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f51a98be700" loc="32:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f51a98bea20" loc="32:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="ctx" ref="0x7f51a98bedd0" loc="32:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc5_key" ref="0x7f51a98e0310"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f51a98e1a90"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_decrypt" ref="0x7f51a98c7130" loc="22:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7f51a98e40d0"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f51a98e5a30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f51a98c9740" loc="22:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f51a98c9aa0" loc="22:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98c9e60" loc="22:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7f51a98e40d0"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f51a98e5a30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_setup" ref="0x7f51a98bf030" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f51a98e1a90"/>
                <typename><typedef-ref name="rc5_key" ref="0x7f51a98e0310"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f51a98c1310" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="keysize_b" ref="0x7f51a98c1690" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
          <variable name="rounds" ref="0x7f51a98c19e0" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
          <variable name="ctx" ref="0x7f51a98c1d50" loc="30:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f51a98e1a90"/>
                <typename><typedef-ref name="rc5_key" ref="0x7f51a98e0310"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_done" ref="0x7f51a98b7d90" loc="38:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f51a98deae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f51a98dc4f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f51a98b7b10" loc="38:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f51a98deae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f51a98dc4f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="xxtea_encrypt" ref="0x7f51a98d9d40" loc="6:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51a98d9740" loc="6:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7f51a98d9ab0" loc="6:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_setup" ref="0x7f51a98cbc80" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f51a98e5a30"/>
                <typename><typedef-ref name="rc2_key" ref="0x7f51a98e40d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f51a98cb020" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f51a98cb320" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7f51a98cb650" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f51a98cb9d0" loc="20:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f51a98e5a30"/>
                <typename><typedef-ref name="rc2_key" ref="0x7f51a98e40d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tea_decrypt" ref="0x7f51a98da2b0" loc="3:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="v0" ref="0x7f51a98dcc60" loc="3:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
          <variable name="v1" ref="0x7f51a98da020" loc="3:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tea_encrypt" ref="0x7f51a98d9020" loc="4:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="v0" ref="0x7f51a98da960" loc="4:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
          <variable name="v1" ref="0x7f51a98dac90" loc="4:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_done" ref="0x7f51a98cd7c0" loc="18:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f51a98e06c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f51a98e0d90"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f51a98cd540" loc="18:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f51a98e06c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f51a98e0d90"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="msb" ref="0x7f51a98af2e0" loc="46:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51a98af060" loc="46:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f51ab535520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_decrypt" ref="0x7f51a98ceda0" loc="17:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f51a98e06c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f51a98e0d90"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f51a98ce3f0" loc="17:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f51a98ce750" loc="17:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98ceb00" loc="17:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f51a98e06c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f51a98e0d90"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="xxtea_decrypt" ref="0x7f51a98d7ad0" loc="7:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51a98d74d0" loc="7:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7f51a98d7840" loc="7:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_encrypt" ref="0x7f51a98c3020" loc="26:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f51a98de180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f51a98de740"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="block_in" ref="0x7f51a98c5610" loc="26:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="block_out" ref="0x7f51a98c59b0" loc="26:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98c5d40" loc="26:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f51a98de180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f51a98de740"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="skipjack_setup" ref="0x7f51a98d1b20" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f51a98e06c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f51a98e0d90"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f51a98d2e40" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f51a98d1190" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="num_rounds" ref="0x7f51a98d14c0" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f51a98d1870" loc="15:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:10" alignment="I:1"><struct-ref name="symmetric_key_skipjack" ref="0x7f51a98e06c0"/>
                <typename><typedef-ref name="skipjack_key" ref="0x7f51a98e0d90"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="blowfish_decrypt" ref="0x7f51a98b26b0" loc="42:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7f51a98e2020"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f51a98e4480"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ct" ref="0x7f51a98b3bc0" loc="42:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="pt" ref="0x7f51a98b2020" loc="42:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98b2410" loc="42:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="blowfish_key" ref="0x7f51a98e2020"/></typename>
                <type-tag size="I:2084" alignment="I:2"><struct-ref name="symmetric_key_blowfish" ref="0x7f51a98e4480"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_done" ref="0x7f51a98c2c50" loc="28:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f51a98de180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f51a98de740"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f51a98c29d0" loc="28:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f51a98de180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f51a98de740"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="xtea_encrypt" ref="0x7f51a98d4690" loc="12:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f51a98d5d10" loc="12:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f51a98d4060" loc="12:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98d43f0" loc="12:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
                <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_encrypt" ref="0x7f51a98c9020" loc="21:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7f51a98e40d0"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f51a98e5a30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f51a98ca4d0" loc="21:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f51a98ca830" loc="21:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98cabf0" loc="21:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="rc2_key" ref="0x7f51a98e40d0"/></typename>
                <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f51a98e5a30"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc2_done" ref="0x7f51a98c7aa0" loc="23:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f51a98e5a30"/>
                <typename><typedef-ref name="rc2_key" ref="0x7f51a98e40d0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skey" ref="0x7f51a98c7820" loc="23:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_rc2" ref="0x7f51a98e5a30"/>
                <typename><typedef-ref name="rc2_key" ref="0x7f51a98e40d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc5_done" ref="0x7f51a98bda30" loc="33:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f51a98e1a90"/>
                <typename><typedef-ref name="rc5_key" ref="0x7f51a98e0310"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ctx" ref="0x7f51a98bd7b0" loc="33:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><struct-ref name="symmetric_key_rc5" ref="0x7f51a98e1a90"/>
                <typename><typedef-ref name="rc5_key" ref="0x7f51a98e0310"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rc4_decrypt" ref="0x7f51a98d5620" loc="10:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f51a98d5020" loc="10:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="data_len" ref="0x7f51a98d5390" loc="10:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f51ab535160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="kasumi_encrypt" ref="0x7f51a98b92c0" loc="36:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f51a98deae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f51a98dc4f0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pt" ref="0x7f51a98ba7d0" loc="36:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ct" ref="0x7f51a98bab30" loc="36:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="skey" ref="0x7f51a98b9020" loc="36:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:128" alignment="I:2"><struct-ref name="symmetric_key_kasumi" ref="0x7f51a98deae0"/>
                <typename><typedef-ref name="kasumi_key" ref="0x7f51a98dc4f0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="safer_setup" ref="0x7f51a98c6e50" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
        <interfacedef-ref qname="CRYPTO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f51a98de180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f51a98de740"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x7f51a98c61f0" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keylen" ref="0x7f51a98c64f0" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="numrounds" ref="0x7f51a98c6810" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
          <variable name="skey" ref="0x7f51a98c6ba0" loc="25:../../../tos/platforms/shimmer2r/CRYPTO.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:36" alignment="I:1"><struct-ref name="symmetric_key_safer" ref="0x7f51a98de180"/>
                <typename><typedef-ref name="safer_key" ref="0x7f51a98de740"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f51a98f7a90" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f51a98f7a90"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f51a98ee7c0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f51a98f2070" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f51a98f0df0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f51a98f0820" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f51a98f0b60" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f51a98f0070" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f51a98ed8a0" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f51a98ed020" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f51a98f2850" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f51a98f4640" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f51a98f43c0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f51a98efdc0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f51a98ef7f0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f51a98efb30" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f51a98f3120" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f51a98f4e80" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f51a98f3920" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f51a951ec40" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f51a951ec40"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f51a951b5a0" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f51ab535920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f51a95155d0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f51a95155d0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f51a9515810" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9515810"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f51a9510390" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9515810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f51a95133b0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f51a95129d0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9515810"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9515810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f51a9512400" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9515810"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f51a9512740" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9515810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f51a9513b90" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f51aaaaf090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f51a9510b80" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9515810"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f51a9514390" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9515810"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f51a9514110" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f51a9515810"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f51a9514bc0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
