<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="69:TestSerialAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f544e307130"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f544de40aa0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f544de40aa0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f544de3c7e0"/></to>
    </wire>
    <wire loc="70:TestSerialAppC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7f544e315460"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f544de3faf0"/></to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f544de3faf0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f544dda78d0"/></to>
    </wire>
    <wire loc="71:TestSerialAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f544e2ac5b0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f544de2be40"/>
      <arguments>
        <value cst="I:137">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:TestSerialAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f544e2a35a0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f544de2cb20"/>
      <arguments>
        <value cst="I:137">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:TestSerialAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f544e30bb50"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f544e31f5b0"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f544e31f5b0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f544e26ec80"/></to>
    </wire>
    <wire loc="74:TestSerialAppC.nc">
      <from><interface-ref name="MilliTimer" scoped="" ref="0x7f544e29ae50"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544d888640"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544d888640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f544d87f2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:TestSerialAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f544e28b4b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f544de29470"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f544de29470"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f544ddafa40"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f544e247920"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544e26e680"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f544e2673a0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f544e24a060"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f544e24a060"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f544de6f020"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f544e26c660"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f544e249380"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f544e249380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f544de52b90"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f544e26b980"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f544e2486a0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f544e2486a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f544de4d710"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f544e08dae0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544e247920"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f544de552f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7f544e208810"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f544e208810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e1043f0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f544de51de0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f544e2039a0"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f544e2039a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0fb740"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f544de4c930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7f544e2019a0"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f544e2019a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0f6100"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f544e230810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e165d10"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f544e21c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e134740"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f544e1d2ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e126740"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f544e1aecb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e09bd10"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f544e1d0cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e121100"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f544e218810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e12bd10"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f544e1ef9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0cb100"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f544e1df9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0a5740"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f544e1cacc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e118740"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f544e1bacb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0b8d10"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f544e1a5cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e096740"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f544e22a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e156d10"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f544e1c8cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e113100"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f544e226810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e14c100"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f544e212810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e11dd10"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f544e1fd9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0ec740"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f544e1e99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0bc100"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f544e1d99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e096740"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f544e235810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e16e740"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f544e220810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e13e260"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f544e20c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e10ed10"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f544e1d4cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e126740"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f544e1b4cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0aad10"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f544e1a8cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e096740"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f544e1c0cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0d0740"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f544e1f39a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0d5d10"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f544e1e39a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0ae100"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f544e1b2cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0a5740"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f544e1c6cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0de740"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f544e22e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e160740"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f544e21a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e12f100"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f544e1e79a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0b8d10"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f544e216810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e126740"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f544e1ed9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0c6d10"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f544e1dd9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e09f100"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f544e1c2cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0d5d10"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f544e237900"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e1773f0"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f544e224810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e148d10"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f544e210810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e118740"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f544e1fb9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0e7100"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f544e1becc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e10ed10"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f544e1b8cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0b3740"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f544e1accb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e096740"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f544e1f79a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0de740"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f544e1bccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e109740"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f544e232810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e169100"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f544e21e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e13ad10"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f544e20a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e109740"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f544e1c4cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0d9100"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f544e1b0cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e09f100"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f544e2069a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e100e00"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f544e1f19a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0d0740"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f544e1e19a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0aad10"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f544e22c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e15a100"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f544e1e59a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0b3740"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f544e228810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e151740"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f544e214810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e121100"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f544e1ff9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0f2d10"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f544e1eb9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0c1740"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f544e1db9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e09bd10"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f544e241810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e173e00"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f544e222810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e143740"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f544e20e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e113100"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f544e1f99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0e3d10"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f544e1ccca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e11dd10"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f544e1b6cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0ae100"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f544e1cecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e11dd10"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f544e1f59a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0d9100"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f544e1aacb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e09bd10"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f544e1a3cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e0bc100"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f544e1d79f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f544e12bd10"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f544e093750"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544e090570"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f544e090c80"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f544e08e500"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f544e08e500"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544e060440"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f544e08d400"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544e08f2f0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f544e060440"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544e048940"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f544e0579e0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f544e046020"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f544e5fd4c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f544e045360"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f544e0025a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df406d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f544dff0020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df38b30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f544dff9700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df45160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f544dfdda20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df1fcb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f544e000aa0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df46480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f544dfe4020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df1f020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f544dfdaa20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df07cb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f544dfeb5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df18220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f544e003b10"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df959d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f544dfe0a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df2e2f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f544dfe63e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df2f610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f544dfef5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df30220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f544dff8700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df3e7a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f544dfdca20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df162f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f544dfeebe0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df286d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f544dfff890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df3fac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f544e013060"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544dfa4c80"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f544dfe4da0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df17610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f544e00a0c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df47020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f544dfeaa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df116d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f544dff36d0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df4ea90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f544dfdea20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df267a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f544dffccf0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df4fde0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f544dfe51f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df27ac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f544dfdba20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df0f7a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f544dfec0c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df21b30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544df9dc80"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f544dfe3b80"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df10ac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f544dfe1a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f544df36cb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f544dfe2a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df07020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f544dfe7570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f544df36020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f544dfe8020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f544df0ab30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f544dfa2c20"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544dfa25b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f544dfa12f0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f544df02a90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f544dfa1940"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f544deff260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df4d930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544dfa4c80"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df4a020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544dfa25b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df44020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544dfa4c80"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df437a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544dfa25b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df3d610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544dfa4c80"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df3cc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544dfa25b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f544df9bc20"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544df9b5b0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f544df9a2f0"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f544deff9f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f544df9a940"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f544defe240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df35b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544df9dc80"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df332f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544df9b5b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df2d160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544df9dc80"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df2c7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544df9b5b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df25610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544df9dc80"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df24c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544df9b5b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df1eb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544df9dc80"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df1c2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544df9b5b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df15160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544df9dc80"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df147a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544df9b5b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df0e610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544df9dc80"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df0dc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544df9b5b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f544df06b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544df9dc80"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f544df042f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f544df9b5b0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f544de3d1d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544d876080"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f544de3d1d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544d11dc00"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f544de3d1d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544dda7280"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f544de3ce50"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f544e97c3a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f544e97c3a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f544e354c30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f544de398b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544e093750"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f544de37020"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f544de3d1d0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e353b70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f544e34c2c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f544e96e3b0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f544dda78d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f544dd97810"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f544de2cb20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f544ddb1110"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f544de2be40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f544ddb1e70"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f544de119f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f544ddae720"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f544de174e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f544ddb0490"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f544dda7280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544dd971c0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f544dda3dc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f544de26490"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f544ddad120"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f544dda5480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f544ddadd70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f544dda6940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f544dda34a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f544d89aa30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f544dda5480"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f544dc65830"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f544dda6940"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f544dc65110"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f544dc64760"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f544dda34a0"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f544dd8c020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f544dda3dc0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f544dc62590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f544dda3dc0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f544dc5acc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f544dda3dc0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f544dc630e0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f544dd8dc40"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f544dc639d0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f544dd907d0"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f544dd8f020"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f544dc5eb60"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f544dd840f0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f544dc330c0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f544dc330c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f544d8ad0c0"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f544dc50d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f544dc338d0"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f544dc338d0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f544d8b3440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f544dd30e40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f544dd67d10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f544dd32400"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f544dd2b0c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f544dc61c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f544dc60480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f544dc31020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f544d8b2440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f544d8b2440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f544dbc6210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f544d8b3440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f544dbcab50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544d8b1020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544d8ad920"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f544d8ac020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f544d8b4020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f544d8b4020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f544dbcc320"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d8b4c70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d1b9020"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d1b9020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f544da132c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544dbc3600"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544d8b1020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544d1ab760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544dbc7dd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f544dbc4370"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f544d1ba340"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f544d1ba340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f544da15020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f544dbbfbe0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f544d1b4c10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f544d1b4c10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f544da174d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544dbc7dd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544db36e70"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f544dbc6210"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f544db34890"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f544dbcab50"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f544db35790"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f544dbcc320"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f544db360d0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544db323e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544dbc3600"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f544db335b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f544dbc4370"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f544db2d5b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f544dbbfbe0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f544db32a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f544db23b60"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f544db23b60"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f544db17360"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f544db2c020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f544da53020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f544da53020"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f544da4d020"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f544db29120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f544e31f5b0"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f544db1bbd0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f544db12970"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f544db1c6d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f544db12020"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f544dae3a20"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f544e1d4cc0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f544dae1990"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f544e1d0cc0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f544dadf990"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f544e1cecc0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f544dadd990"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f544e1c8cc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f544dadb990"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f544e1cacc0"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f544dae9bc0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f544d96f940"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f544da4d020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f544da480a0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544da382c0"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f544d1b3440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f544da163f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f544d1b3a50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f544d97ad70"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f544d97ad70"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f544d96f940"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f544d1b8020"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f544db23b60"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d1b97c0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544da13ad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544da13ad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d981400"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544da128a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544d1ab760"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f544da132c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d982020"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d982020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d1193a0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f544da174d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f544da10d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f544da15020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f544d983210"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f544d983210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f544d11a4d0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f544da163f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f544da0f710"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d981400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d1188b0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544d981cd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544da128a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d9fdbf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d981400"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f544da0fd80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f544db1c6d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f544d9fd5e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f544db1bbd0"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f544d9827a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f544d119b20"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544d117210"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544d981cd0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f544d1179d0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f544d11c2b0"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f544d114c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f544d966700"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f544db17360"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f544d961250"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f544e1d4cc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f544d95f1f0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f544e1cecc0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f544d87f2c0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f544d876e20"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f544d876e20"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544d71a690"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f544d876080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544d795760"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f544d86d750"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f544d70bcf0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f544d795760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544d0d8ab0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f544d714c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f544d769cf0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f544d7621d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f544d794020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f544d794020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f544d0d15f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f544d700020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f544d7f6020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f544d7f6020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f544d7f05f0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f544d0d8ab0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f544d0bb360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f544d0cbd20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f544d0d7360"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f544d0d7360"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f544d0bbbf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f544d0cd9b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f544d7f6020"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d0b8dd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d0c0020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d0c0020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d850bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d0b5440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d0bf760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d0bf760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d84c8b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d0b4760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d0bea80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d0bea80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d849210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d850bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d84c8b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f544dff0020"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d849210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f544dfe7570"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d850bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d84c8b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f544dfef5a0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d849210"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7f544dfe63e0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d850bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d84c8b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f544dfeebe0"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d849210"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f544dfe51f0"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d850bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d84c8b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f544dfec0c0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d849210"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f544dfe4020"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d850bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d84c8b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f544dfeb5a0"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d849210"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f544dfe4da0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d850bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d84c8b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f544dfeaa50"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d849210"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f544dfe3b80"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d850bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d84c8b0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f544dfe8020"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d849210"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f544dfe2a20"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f544d7d3950"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f544da4d020"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f544d75f490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f544d70fe80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="TestSerialC" loc="57:TestSerialC.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="37:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P.UartP" loc="41(Msp430Uart0P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.7 $ $Date: 2008-06-04 05:31:15 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.2 $ $Date: 2010/07/29 13:19:06 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="39(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2013/04/09 14:28:58 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ShimmerSerialP" loc="35:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestSerialAppC.TimerMilliC" loc="44(TestSerialAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f544e19d890" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f544e19dc40" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f544e19c020" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f544e19c3d0" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f544e19c740" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f544dfd5230" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f544dfd55d0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f544dfd5980" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f544dfd5d00" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f544dfd40d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f544dfd4440" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f544dfd47d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f544dfd4b60" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f544dfd3020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f544df97950" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f544df97d20" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart0C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.7 $ $Date: 2008-06-04 05:31:15 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f544da47120" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f544da47120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f544d9f85b0" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f544d9eb5b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f544d9d1d80" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f544d82b9c0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f544d82b9c0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f544d7f2ba0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f544d7f2ba0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f544d7ef3b0" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f544d7ef3b0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f544d7ef7a0" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f544d7ef7a0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f544d7ee020" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f544d7ee020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f544d7ee3f0" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f544d7eebf0" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f544d7eebf0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f544d7cc020" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f544d7cc020"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f544d7cc7f0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f544d7cc7f0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f544d7ccbe0" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f544d7ccbe0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f544d7cb400" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f544d7cb400"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f544d7cb7d0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f544d78d4f0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f544d78d4f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f544d75cd70" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f544d75cd70"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f544d7590d0" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f544d7091f0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f544d7091f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Boot" ref="0x7f544e307130" loc="61:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f544e307130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f544e3074b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f544e2a35a0" loc="63:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f544e2a35a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544e2a3920"/>
        <function-ref name="getPayload" scoped="" ref="0x7f544e2a3ab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f544e2a3c40"/>
        <function-ref name="cancel" scoped="" ref="0x7f544e2a3dd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544e309020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f544e28b4b0" loc="65:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f544e28b4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544e28b830"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f544e28b9c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f544e28bb50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f544e28bce0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f544e28be70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f544e2ac5b0" loc="62:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f544e2ac5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f544e2ac930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MilliTimer" ref="0x7f544e29ae50" loc="64:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MilliTimer" scoped="" ref="0x7f544e29ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544e297390"/>
        <function-ref name="fired" scoped="" ref="0x7f544e2a4970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f544e298720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f544e2982a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f544e297c90"/>
        <function-ref name="gett0" scoped="" ref="0x7f544e297810"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544e2a4df0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f544e308a80"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f544e298d30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f544e2a4020"/>
        <function-ref name="stop" scoped="" ref="0x7f544e2a44f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f544e30bb50" loc="60:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544e30bb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544e318020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544e3181b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f544e318340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544e3184d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544e318660"/>
        <function-ref name="get" scoped="" ref="0x7f544e3187f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544e318980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544e314020"/>
        <function-ref name="set" scoped="" ref="0x7f544e318b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f544e318ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f544e318e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Control" ref="0x7f544e315460" loc="59:TestSerialC.nc">
      <component-ref qname="TestSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544e315460"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f544e3157e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f544e315970"/>
        <function-ref name="start" scoped="" ref="0x7f544e315b00"/>
        <function-ref name="stop" scoped="" ref="0x7f544e315c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f544e31f5b0" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544e31f5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544e31f930"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544e31fac0"/>
        <function-ref name="led1On" scoped="" ref="0x7f544e31fc50"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544e31fde0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544e274020"/>
        <function-ref name="get" scoped="" ref="0x7f544e2741b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544e274340"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544e274980"/>
        <function-ref name="set" scoped="" ref="0x7f544e2744d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f544e274660"/>
        <function-ref name="led2On" scoped="" ref="0x7f544e2747f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f544e2673a0" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f544e2673a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e267720"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e2678b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e267a40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e267bd0"/>
        <function-ref name="get" scoped="" ref="0x7f544e267d60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e26c020"/>
        <function-ref name="set" scoped="" ref="0x7f544e26c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e26c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544e26e680" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544e26e680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e26ea00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f544e26c660" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f544e26c660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e26c9e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e26cb70"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e26cd00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e26b020"/>
        <function-ref name="get" scoped="" ref="0x7f544e26b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e26b340"/>
        <function-ref name="set" scoped="" ref="0x7f544e26b4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e26b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f544e26ec80" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544e26ec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544e2700a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544e270230"/>
        <function-ref name="led1On" scoped="" ref="0x7f544e2703c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544e270550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544e2706e0"/>
        <function-ref name="get" scoped="" ref="0x7f544e270870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544e270a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544e26f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f544e270b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f544e270d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f544e26f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f544e26b980" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f544e26b980"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e26bd00"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e265020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2651b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e265340"/>
        <function-ref name="get" scoped="" ref="0x7f544e2654d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e265660"/>
        <function-ref name="set" scoped="" ref="0x7f544e2657f0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e265980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f544e24a060" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f544e24a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e24a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e24a570"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e24a700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e24a890"/>
        <function-ref name="get" scoped="" ref="0x7f544e24aa20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e24abb0"/>
        <function-ref name="set" scoped="" ref="0x7f544e24ad40"/>
        <function-ref name="clr" scoped="" ref="0x7f544e249020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f544e249380" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f544e249380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e249700"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e249890"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e249a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e249bb0"/>
        <function-ref name="get" scoped="" ref="0x7f544e249d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e248020"/>
        <function-ref name="set" scoped="" ref="0x7f544e2481b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e248340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f544e247920" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544e247920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e247ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f544e2486a0" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f544e2486a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e248a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e248bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e248d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e247020"/>
        <function-ref name="get" scoped="" ref="0x7f544e2471b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e247340"/>
        <function-ref name="set" scoped="" ref="0x7f544e2474d0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e247660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f544e230810" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f544e230810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e230b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e230d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e22f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e22f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e22f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e22f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e22f660"/>
        <function-ref name="get" scoped="" ref="0x7f544e22f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e22f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e22fb10"/>
        <function-ref name="set" scoped="" ref="0x7f544e22fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e22fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e22e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e22e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e22e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f544e21c810" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f544e21c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e21cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e21cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e21b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e21b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e21b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e21b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e21b660"/>
        <function-ref name="get" scoped="" ref="0x7f544e21b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e21b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e21bb10"/>
        <function-ref name="set" scoped="" ref="0x7f544e21bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e21be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e21a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e21a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e21a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f544e1d2ca0" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f544e1d2ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1d10a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1d1230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1d13c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1d1550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1d16e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1d1870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1d1a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1d1b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1d1d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1d0020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1d01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1d0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1d04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1d0760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1d08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f544e1aecb0" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f544e1aecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1ad0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1ad230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1ad3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1ad550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1ad6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1ad870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1ada00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1adb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1add20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1ac020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1ac1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1ac340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1ac4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1ac760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1ac8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f544e1d0cc0" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f544e1d0cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1cf0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1cf230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1cf3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1cf550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1cf6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1cf870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1cfa00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1cfb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1cfd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1ce020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1ce1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1ce340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1ce4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1ce760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1ce8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f544e218810" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f544e218810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e218b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e218d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e217020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2171b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e217340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2174d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e217660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2177f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e217980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e217b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e217ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e217e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e216020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2162b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e216440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f544e2039a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f544e2039a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e203d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e202020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e2021b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e202340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e2024d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e202660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e2027f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e202980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e202b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e202ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e202e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e201020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e2011b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e201440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e2015d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f544e1ef9a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f544e1ef9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1efd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1ee020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1ee1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1ee340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1ee4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1ee660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1ee7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1ee980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1eeb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1eeca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1eee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1ed020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1ed1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1ed440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1ed5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f544e1df9a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f544e1df9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1dfd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1de020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1de1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1de340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1de4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1de660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1de7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1de980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1deb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1deca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1dee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1dd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1dd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1dd440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1dd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f544e1cacc0" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f544e1cacc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1c90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1c9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1c93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1c9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1c96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1c9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1c9a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1c9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1c9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1c8020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1c81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1c8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1c84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1c8760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1c88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f544e1bacb0" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f544e1bacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1b90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1b9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1b93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1b9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1b96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1b9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1b9a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1b9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1b9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1b8020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1b81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1b8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1b84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1b8760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1b88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f544e1a5cc0" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f544e1a5cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1a40a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1a4230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1a43c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1a4550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1a46e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1a4870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1a4a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1a4b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1a4d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1a3020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1a31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1a3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1a34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1a3760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1a38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f544e22a810" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f544e22a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e22ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e22ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e229020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2291b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e229340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2294d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e229660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2297f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e229980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e229b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e229ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e229e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e228020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2282b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e228440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f544e1c8cc0" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f544e1c8cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1c70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1c7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1c73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1c7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1c76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1c7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1c7a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1c7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1c7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1c6020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1c61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1c6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1c64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1c6760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1c68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f544e226810" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f544e226810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e226b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e226d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e225020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2251b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e225340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2254d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e225660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2257f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e225980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e225b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e225ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e225e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e224020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2242b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e224440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f544e212810" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f544e212810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e212b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e212d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e211020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2111b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e211340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2114d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e211660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2117f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e211980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e211b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e211ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e211e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e210020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2102b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e210440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f544e1fd9a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f544e1fd9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1fdd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1fc020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1fc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1fc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1fc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1fc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1fc7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1fc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1fcb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1fcca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1fce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1fb020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1fb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1fb440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1fb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f544e1e99a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f544e1e99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1e9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1e8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1e81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1e8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1e84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1e8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1e87f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1e8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1e8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1e8ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1e8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1e7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1e71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1e7440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1e75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f544e1d99a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f544e1d99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1d9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1d8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1d81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1d8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1d84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1d8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1d87f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1d8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1d8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1d8ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1d8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1d7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1d71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1d7440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1d75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f544e235810" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f544e235810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e235b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e235d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e233020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2331b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e233340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2334d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e233660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2337f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e233980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e233b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e233ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e233e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e232020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2322b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e232440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f544e220810" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f544e220810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e220c90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e220e20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e21f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e21f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e21f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e21f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e21f660"/>
        <function-ref name="get" scoped="" ref="0x7f544e21f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e21f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e21fb10"/>
        <function-ref name="set" scoped="" ref="0x7f544e21fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e21fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e21e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e21e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e21e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f544e20c810" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f544e20c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e20cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e20cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e20b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e20b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e20b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e20b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e20b660"/>
        <function-ref name="get" scoped="" ref="0x7f544e20b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e20b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e20bb10"/>
        <function-ref name="set" scoped="" ref="0x7f544e20bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e20be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e20a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e20a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e20a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f544e1d4cc0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f544e1d4cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1d30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1d3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1d33c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1d3550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1d36e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1d3870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1d3a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1d3b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1d3d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1d2020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1d21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1d2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1d24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1d2760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1d28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f544e1b4cb0" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f544e1b4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1b30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1b3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1b33c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1b3550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1b36e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1b3870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1b3a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1b3b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1b3d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1b2020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1b21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1b2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1b24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1b2760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1b28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f544e1a8cb0" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f544e1a8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1a60a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1a6230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1a63c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1a6550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1a66e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1a6870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1a6a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1a6b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1a6d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1a5020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1a51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1a5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1a54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1a5760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1a58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f544e1c0cc0" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f544e1c0cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1bf0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1bf230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1bf3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1bf550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1bf6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1bf870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1bfa00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1bfb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1bfd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1be020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1be1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1be340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1be4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1be760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1be8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f544e208810" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f544e208810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e208d90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e207020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e2071b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e207340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e2074d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e207660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e2077f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e207980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e207b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e207ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e207e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e206020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e2061b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e206440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e2065d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f544e1f39a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f544e1f39a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1f3d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1f2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1f21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1f2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1f24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1f2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1f27f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1f2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1f2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1f2ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1f2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1f1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1f11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1f1440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1f15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f544e1e39a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f544e1e39a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1e3d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1e2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1e21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1e2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1e24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1e2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1e27f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1e2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1e2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1e2ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1e2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1e1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1e11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1e1440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1e15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f544e1b2cb0" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f544e1b2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1b10a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1b1230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1b13c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1b1550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1b16e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1b1870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1b1a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1b1b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1b1d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1b0020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1b01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1b0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1b04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1b0760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1b08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f544e1c6cb0" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f544e1c6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1c50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1c5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1c53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1c5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1c56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1c5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1c5a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1c5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1c5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1c4020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1c41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1c4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1c44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1c4760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1c48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f544e22e810" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f544e22e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e22eb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e22ed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e22d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e22d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e22d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e22d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e22d660"/>
        <function-ref name="get" scoped="" ref="0x7f544e22d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e22d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e22db10"/>
        <function-ref name="set" scoped="" ref="0x7f544e22dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e22de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e22c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e22c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e22c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f544e21a810" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f544e21a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e21ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e21ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e219020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2191b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e219340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2194d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e219660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2197f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e219980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e219b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e219ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e219e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e218020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2182b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e218440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f544e1e79a0" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f544e1e79a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1e7d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1e6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1e61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1e6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1e64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1e6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1e67f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1e6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1e6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1e6ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1e6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1e5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1e51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1e5440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1e55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f544e216810" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f544e216810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e216b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e216d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e215020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2151b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e215340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2154d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e215660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2157f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e215980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e215b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e215ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e215e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e214020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2142b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e214440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f544e2019a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f544e2019a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e201d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e200020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e2001b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e200340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e2004d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e200660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e2007f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e200980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e200b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e200ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e200e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1ff020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1ff1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1ff440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1ff5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f544e1ed9a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f544e1ed9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1edd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1ec020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1ec1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1ec340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1ec4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1ec660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1ec7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1ec980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1ecb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1ecca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1ece30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1eb020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1eb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1eb440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1eb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f544e1dd9a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f544e1dd9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1ddd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1dc020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1dc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1dc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1dc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1dc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1dc7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1dc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1dcb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1dcca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1dce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1db020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1db1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1db440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1db5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f544e1c2cc0" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f544e1c2cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1c10a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1c1230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1c13c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1c1550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1c16e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1c1870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1c1a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1c1b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1c1d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1c0020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1c01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1c0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1c04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1c0760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1c08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f544e237900" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f544e237900"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e237c80"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e237e10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e243020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2431b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e243340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2434d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e243660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2437f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e243980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e243b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e243ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e243e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e241020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2412b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e241440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f544e224810" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f544e224810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e224b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e224d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e223020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2231b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e223340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2234d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e223660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2237f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e223980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e223b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e223ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e223e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e222020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2222b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e222440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f544e210810" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f544e210810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e210b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e210d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e20f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e20f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e20f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e20f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e20f660"/>
        <function-ref name="get" scoped="" ref="0x7f544e20f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e20f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e20fb10"/>
        <function-ref name="set" scoped="" ref="0x7f544e20fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e20fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e20e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e20e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e20e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f544e1fb9a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f544e1fb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1fbd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1fa020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1fa1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1fa340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1fa4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1fa660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1fa7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1fa980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1fab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1faca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1fae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1f9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1f91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1f9440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1f95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f544e1becc0" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f544e1becc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1bd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1bd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1bd3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1bd550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1bd6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1bd870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1bda00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1bdb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1bdd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1bc020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1bc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1bc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1bc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1bc760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1bc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f544e1b8cb0" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f544e1b8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1b70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1b7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1b73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1b7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1b76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1b7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1b7a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1b7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1b7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1b6020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1b61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1b6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1b64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1b6760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1b68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f544e1accb0" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f544e1accb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1ab0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1ab230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1ab3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1ab550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1ab6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1ab870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1aba00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1abb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1abd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1aa020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1aa1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1aa340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1aa4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1aa760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1aa8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f544e1f79a0" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f544e1f79a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1f7d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1f6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1f61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1f6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1f64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1f6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1f67f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1f6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1f6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1f6ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1f6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1f5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1f51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1f5440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1f55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f544e1bccc0" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f544e1bccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1bb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1bb230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1bb3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1bb550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1bb6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1bb870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1bba00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1bbb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1bbd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1ba020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1ba1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1ba340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1ba4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1ba760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1ba8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f544e232810" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f544e232810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e232b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e232d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e231020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2311b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e231340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2314d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e231660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2317f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e231980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e231b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e231ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e231e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e230020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2302b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e230440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f544e21e810" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f544e21e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e21eb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e21ed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e21d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e21d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e21d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e21d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e21d660"/>
        <function-ref name="get" scoped="" ref="0x7f544e21d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e21d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e21db10"/>
        <function-ref name="set" scoped="" ref="0x7f544e21dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e21de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e21c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e21c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e21c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f544e20a810" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f544e20a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e20ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e20ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e209020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2091b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e209340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2094d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e209660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2097f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e209980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e209b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e209ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e209e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e208020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2082b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e208440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f544e1c4cc0" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f544e1c4cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1c30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1c3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1c33c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1c3550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1c36e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1c3870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1c3a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1c3b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1c3d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1c2020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1c21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1c2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1c24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1c2760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1c28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f544e1b0cb0" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f544e1b0cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1af0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1af230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1af3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1af550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1af6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1af870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1afa00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1afb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1afd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1ae020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1ae1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1ae340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1ae4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1ae760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1ae8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f544e2069a0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f544e2069a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e206d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e204020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e2041b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e204340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e2044d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e204660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e2047f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e204980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e204b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e204ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e204e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e203020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e2031b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e203440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e2035d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f544e1f19a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f544e1f19a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1f1d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1f0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1f01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1f0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1f04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1f0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1f07f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1f0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1f0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1f0ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1f0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1ef020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1ef1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1ef440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1ef5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f544e1e19a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f544e1e19a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1e1d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1e0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1e01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1e0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1e04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1e0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1e07f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1e0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1e0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1e0ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1e0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1df020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1df1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1df440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1df5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f544e22c810" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f544e22c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e22cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e22cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e22b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e22b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e22b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e22b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e22b660"/>
        <function-ref name="get" scoped="" ref="0x7f544e22b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e22b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e22bb10"/>
        <function-ref name="set" scoped="" ref="0x7f544e22bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e22be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e22a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e22a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e22a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f544e1e59a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f544e1e59a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1e5d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1e4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1e41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1e4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1e44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1e4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1e47f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1e4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1e4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1e4ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1e4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1e3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1e31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1e3440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1e35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f544e228810" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f544e228810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e228b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e228d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e227020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2271b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e227340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2274d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e227660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2277f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e227980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e227b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e227ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e227e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e226020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2262b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e226440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f544e214810" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f544e214810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e214b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e214d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e213020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2131b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e213340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2134d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e213660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2137f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e213980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e213b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e213ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e213e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e212020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2122b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e212440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f544e1ff9a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f544e1ff9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1ffd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1fe020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1fe1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1fe340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1fe4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1fe660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1fe7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1fe980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1feb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1feca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1fee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1fd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1fd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1fd440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1fd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f544e1eb9a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f544e1eb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1ebd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1ea020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1ea1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1ea340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1ea4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1ea660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1ea7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1ea980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1eab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1eaca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1eae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1e9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1e91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1e9440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1e95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f544e1db9a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f544e1db9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1dbd20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1da020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1da1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1da340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1da4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1da660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1da7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1da980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1dab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1daca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1dae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1d9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1d91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1d9440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1d95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f544e241810" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f544e241810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e241b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e241d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e236020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2361b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e236340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2364d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e236660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2367f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e236980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e236b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e236ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e236e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e235020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2352b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e235440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f544e222810" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f544e222810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e222b90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e222d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e221020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e2211b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e221340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e2214d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e221660"/>
        <function-ref name="get" scoped="" ref="0x7f544e2217f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e221980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e221b10"/>
        <function-ref name="set" scoped="" ref="0x7f544e221ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e221e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e220020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e2202b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e220440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f544e20e810" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f544e20e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e20eb90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e20ed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e20d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e20d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e20d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e20d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e20d660"/>
        <function-ref name="get" scoped="" ref="0x7f544e20d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e20d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e20db10"/>
        <function-ref name="set" scoped="" ref="0x7f544e20dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e20de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e20c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e20c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e20c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f544e1f99a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f544e1f99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1f9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1f8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1f81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1f8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1f84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1f8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1f87f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1f8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1f8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1f8ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1f8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1f7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1f71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1f7440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1f75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f544e1ccca0" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f544e1ccca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1cb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1cb230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1cb3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1cb550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1cb6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1cb870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1cba00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1cbb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1cbd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1ca020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1ca1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1ca340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1ca4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1ca760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1ca8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f544e1b6cb0" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f544e1b6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1b50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1b5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1b53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1b5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1b56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1b5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1b5a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1b5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1b5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1b4020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1b41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1b4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1b44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1b4760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1b48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f544e1cecc0" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f544e1cecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1cd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1cd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1cd3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1cd550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1cd6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1cd870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1cda00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1cdb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1cdd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1cc020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1cc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1cc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1cc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1cc760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1cc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f544e1f59a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f544e1f59a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1f5d20"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1f4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1f41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1f4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1f44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1f4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1f47f0"/>
        <function-ref name="get" scoped="" ref="0x7f544e1f4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1f4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1f4ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544e1f4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1f3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1f31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1f3440"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1f35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f544e1aacb0" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f544e1aacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1a90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1a9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1a93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1a9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1a96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1a9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1a9a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1a9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1a9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1a8020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1a81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1a8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1a84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1a8760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1a88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f544e1a3cc0" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f544e1a3cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1a20a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1a2230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1a23c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1a2550"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1a26e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1a2870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1a2a00"/>
        <function-ref name="get" scoped="" ref="0x7f544e1a2b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1a2d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1a1020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1a11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1a1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1a14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1a1760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1a18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f544e1d79f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f544e1d79f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1d51c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e1d5350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1d54e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e1d5670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1d5800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1d5990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1d5b20"/>
        <function-ref name="get" scoped="" ref="0x7f544e1d5cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1d5e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e1d4020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1d41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e1d4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1d44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e1d4760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1d48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e1773f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e1773f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e177770"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e177900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e177a90"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e177c20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e177db0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e176020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1761b0"/>
        <function-ref name="get" scoped="" ref="0x7f544e176340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1764d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e176660"/>
        <function-ref name="set" scoped="" ref="0x7f544e1767f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e176980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e176b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e176da0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e175020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e173e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e173e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1721c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e172350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1724e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e172670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e172800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e172990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e172b20"/>
        <function-ref name="get" scoped="" ref="0x7f544e172cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e172e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e171020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1711b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e171340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1714d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e171760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1718f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e16e740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e16e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e16eac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e16ec50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e16ede0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e16d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e16d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e16d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e16d4d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e16d660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e16d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e16d980"/>
        <function-ref name="set" scoped="" ref="0x7f544e16db10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e16dca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e16de30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e16c120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e16c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e169100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e169100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e169480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e169610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1697a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e169930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e169ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e169c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e169de0"/>
        <function-ref name="get" scoped="" ref="0x7f544e168020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1681b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e168340"/>
        <function-ref name="set" scoped="" ref="0x7f544e1684d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e168660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1687f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e168a80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e168c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e165d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e165d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1640e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e164270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e164400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e164590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e164720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1648b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e164a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e164bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e164d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e163020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1631b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e163340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1634d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e163760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1638f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e160740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e160740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e160ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e160c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e160de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e15f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e15f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e15f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e15f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e15f660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e15f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e15f980"/>
        <function-ref name="set" scoped="" ref="0x7f544e15fb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e15fca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e15fe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e15e120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e15e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e15a100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e15a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e15a480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e15a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e15a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e15a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e15aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e15ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e15ade0"/>
        <function-ref name="get" scoped="" ref="0x7f544e159020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1591b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e159340"/>
        <function-ref name="set" scoped="" ref="0x7f544e1594d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e159660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1597f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e159a80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e159c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e156d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e156d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1550e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e155270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e155400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e155590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e155720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1558b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e155a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e155bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e155d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e154020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1541b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e154340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1544d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e154760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1548f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e151740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e151740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e151ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e151c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e151de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e150020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1501b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e150340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1504d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e150660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1507f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e150980"/>
        <function-ref name="set" scoped="" ref="0x7f544e150b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e150ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e150e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e14f120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e14f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e14c100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e14c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e14c480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e14c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e14c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e14c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e14cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e14cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e14cde0"/>
        <function-ref name="get" scoped="" ref="0x7f544e14b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e14b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e14b340"/>
        <function-ref name="set" scoped="" ref="0x7f544e14b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e14b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e14b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e14ba80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e14bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e148d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e148d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1470e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e147270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e147400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e147590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e147720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1478b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e147a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e147bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e147d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e146020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1461b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e146340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1464d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e146760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1468f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e143740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e143740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e143ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e143c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e143de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e142020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1421b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e142340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1424d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e142660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1427f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e142980"/>
        <function-ref name="set" scoped="" ref="0x7f544e142b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e142ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e142e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e141120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1412b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e13e260" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e13e260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e13e5e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e13e770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e13e900"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e13ea90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e13ec20"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e13edb0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e13d020"/>
        <function-ref name="get" scoped="" ref="0x7f544e13d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e13d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e13d4d0"/>
        <function-ref name="set" scoped="" ref="0x7f544e13d660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e13d7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e13d980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e13dc10"/>
        <function-ref name="clr" scoped="" ref="0x7f544e13dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e13ad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e13ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e1380e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e138270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e138400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e138590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e138720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e1388b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e138a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e138bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e138d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e137020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1371b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e137340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1374d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e137760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1378f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e134740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e134740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e134ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e134c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e134de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e133020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1331b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e133340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1334d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e133660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1337f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e133980"/>
        <function-ref name="set" scoped="" ref="0x7f544e133b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e133ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e133e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e132120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1322b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e12f100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e12f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e12f480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e12f610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e12f7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e12f930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e12fac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e12fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e12fde0"/>
        <function-ref name="get" scoped="" ref="0x7f544e12e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e12e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e12e340"/>
        <function-ref name="set" scoped="" ref="0x7f544e12e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e12e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e12e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e12ea80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e12ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e12bd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e12bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e12a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e12a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e12a400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e12a590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e12a720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e12a8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e12aa40"/>
        <function-ref name="get" scoped="" ref="0x7f544e12abd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e12ad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e129020"/>
        <function-ref name="set" scoped="" ref="0x7f544e1291b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e129340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1294d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e129760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1298f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e126740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e126740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e126ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e126c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e126de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e125020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1251b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e125340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1254d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e125660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1257f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e125980"/>
        <function-ref name="set" scoped="" ref="0x7f544e125b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e125ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e125e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e124120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1242b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e121100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e121100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e121480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e121610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1217a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e121930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e121ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e121c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e121de0"/>
        <function-ref name="get" scoped="" ref="0x7f544e120020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1201b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e120340"/>
        <function-ref name="set" scoped="" ref="0x7f544e1204d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e120660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1207f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e120a80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e120c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e11dd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e11dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e11c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e11c270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e11c400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e11c590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e11c720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e11c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e11ca40"/>
        <function-ref name="get" scoped="" ref="0x7f544e11cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e11cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e11b020"/>
        <function-ref name="set" scoped="" ref="0x7f544e11b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e11b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e11b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e11b760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e11b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e118740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e118740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e118ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e118c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e118de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e117020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1171b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e117340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1174d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e117660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1177f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e117980"/>
        <function-ref name="set" scoped="" ref="0x7f544e117b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e117ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e117e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e116120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1162b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e113100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e113100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e113480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e113610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e1137a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e113930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e113ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e113c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e113de0"/>
        <function-ref name="get" scoped="" ref="0x7f544e111020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1111b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e111340"/>
        <function-ref name="set" scoped="" ref="0x7f544e1114d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e111660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e1117f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e111a80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e111c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e10ed10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e10ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e10d0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e10d270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e10d400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e10d590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e10d720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e10d8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e10da40"/>
        <function-ref name="get" scoped="" ref="0x7f544e10dbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e10dd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e10c020"/>
        <function-ref name="set" scoped="" ref="0x7f544e10c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e10c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e10c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e10c760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e10c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e109740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e109740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e109ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e109c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e109de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e108020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e1081b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e108340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1084d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e108660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1087f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e108980"/>
        <function-ref name="set" scoped="" ref="0x7f544e108b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e108ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e108e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e107120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e1072b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e1043f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e1043f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e104770"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e104900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e104a90"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e104c20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e104db0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e103020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e1031b0"/>
        <function-ref name="get" scoped="" ref="0x7f544e103340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e1034d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e103660"/>
        <function-ref name="set" scoped="" ref="0x7f544e1037f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e103980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e103b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e103da0"/>
        <function-ref name="clr" scoped="" ref="0x7f544e102020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e100e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e100e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0ff1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0ff350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0ff4e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0ff670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0ff800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0ff990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0ffb20"/>
        <function-ref name="get" scoped="" ref="0x7f544e0ffcb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0ffe40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0fe020"/>
        <function-ref name="set" scoped="" ref="0x7f544e0fe1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0fe340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0fe4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0fe760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0fe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0fb740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0fb740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0fbac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0fbc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0fbde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0fa020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0fa1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0fa340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0fa4d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0fa660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0fa7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0fa980"/>
        <function-ref name="set" scoped="" ref="0x7f544e0fab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0faca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0fae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0f9120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0f92b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0f6100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0f6100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0f6480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0f6610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0f67a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0f6930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0f6ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0f6c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0f6de0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0f5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0f51b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0f5340"/>
        <function-ref name="set" scoped="" ref="0x7f544e0f54d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0f5660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0f57f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0f5a80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0f5c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0f2d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0f2d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0f10e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0f1270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0f1400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0f1590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0f1720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0f18b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0f1a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e0f1bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0f1d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0f0020"/>
        <function-ref name="set" scoped="" ref="0x7f544e0f01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0f0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0f04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0f0760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0f08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0ec740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0ec740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0ecac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0ecc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0ecde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0eb020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0eb1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0eb340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0eb4d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0eb660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0eb7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0eb980"/>
        <function-ref name="set" scoped="" ref="0x7f544e0ebb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0ebca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0ebe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0ea120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0ea2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0e7100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0e7100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0e7480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0e7610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0e77a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0e7930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0e7ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0e7c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0e7de0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0e6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0e61b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0e6340"/>
        <function-ref name="set" scoped="" ref="0x7f544e0e64d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0e6660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0e67f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0e6a80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0e6c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0e3d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0e3d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0e20e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0e2270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0e2400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0e2590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0e2720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0e28b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0e2a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e0e2bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0e2d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0e1020"/>
        <function-ref name="set" scoped="" ref="0x7f544e0e11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0e1340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0e14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0e1760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0e18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0de740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0de740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0deac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0dec50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0dede0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0dd020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0dd1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0dd340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0dd4d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0dd660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0dd7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0dd980"/>
        <function-ref name="set" scoped="" ref="0x7f544e0ddb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0ddca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0dde30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0dc120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0dc2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0d9100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0d9100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0d9480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0d9610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0d97a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0d9930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0d9ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0d9c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0d9de0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0d8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0d81b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0d8340"/>
        <function-ref name="set" scoped="" ref="0x7f544e0d84d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0d8660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0d87f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0d8a80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0d8c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0d5d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0d5d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0d40e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0d4270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0d4400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0d4590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0d4720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0d48b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0d4a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e0d4bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0d4d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0d3020"/>
        <function-ref name="set" scoped="" ref="0x7f544e0d31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0d3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0d34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0d3760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0d38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0d0740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0d0740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0d0ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0d0c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0d0de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0cf020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0cf1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0cf340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0cf4d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0cf660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0cf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0cf980"/>
        <function-ref name="set" scoped="" ref="0x7f544e0cfb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0cfca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0cfe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0ce120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0ce2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0cb100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0cb100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0cb480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0cb610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0cb7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0cb930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0cbac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0cbc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0cbde0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0c9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0c91b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0c9340"/>
        <function-ref name="set" scoped="" ref="0x7f544e0c94d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0c9660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0c97f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0c9a80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0c9c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0c6d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0c6d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0c50e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0c5270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0c5400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0c5590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0c5720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0c58b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0c5a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e0c5bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0c5d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0c4020"/>
        <function-ref name="set" scoped="" ref="0x7f544e0c41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0c4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0c44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0c4760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0c48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0c1740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0c1740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0c1ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0c1c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0c1de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0c0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0c01b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0c0340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0c04d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0c0660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0c07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0c0980"/>
        <function-ref name="set" scoped="" ref="0x7f544e0c0b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0c0ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0c0e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0bf120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0bf2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0bc100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0bc100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0bc480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0bc610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0bc7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0bc930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0bcac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0bcc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0bcde0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0bb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0bb1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0bb340"/>
        <function-ref name="set" scoped="" ref="0x7f544e0bb4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0bb660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0bb7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0bba80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0bbc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0b8d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0b8d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0b70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0b7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0b7400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0b7590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0b7720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0b78b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0b7a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e0b7bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0b7d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0b6020"/>
        <function-ref name="set" scoped="" ref="0x7f544e0b61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0b6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0b64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0b6760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0b68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0b3740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0b3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0b3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0b3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0b3de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0b2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0b21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0b2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0b24d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0b2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0b27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0b2980"/>
        <function-ref name="set" scoped="" ref="0x7f544e0b2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0b2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0b2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0b1120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0b12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0ae100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0ae100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0ae480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0ae610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0ae7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0ae930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0aeac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0aec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0aede0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0ad020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0ad1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0ad340"/>
        <function-ref name="set" scoped="" ref="0x7f544e0ad4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0ad660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0ad7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0ada80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0adc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0aad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0aad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0a90e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0a9270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0a9400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0a9590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0a9720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0a98b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0a9a40"/>
        <function-ref name="get" scoped="" ref="0x7f544e0a9bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0a9d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0a8020"/>
        <function-ref name="set" scoped="" ref="0x7f544e0a81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0a8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0a84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0a8760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0a88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e0a5740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e0a5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e0a5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e0a5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e0a5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e0a3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0a31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e0a3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0a34d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e0a3660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0a37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e0a3980"/>
        <function-ref name="set" scoped="" ref="0x7f544e0a3b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e0a3ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0a3e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e0a2120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0a22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e09f100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e09f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e09f480"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e09f610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e09f7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e09f930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e09fac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e09fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e09fde0"/>
        <function-ref name="get" scoped="" ref="0x7f544e09e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e09e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e09e340"/>
        <function-ref name="set" scoped="" ref="0x7f544e09e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e09e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e09e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e09ea80"/>
        <function-ref name="clr" scoped="" ref="0x7f544e09ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e09bd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e09bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e09a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e09a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e09a400"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e09a590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e09a720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e09a8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e09aa40"/>
        <function-ref name="get" scoped="" ref="0x7f544e09abd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e09ad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e099020"/>
        <function-ref name="set" scoped="" ref="0x7f544e0991b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e099340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e0994d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e099760"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0998f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f544e096740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f544e096740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544e096ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544e096c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544e096de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544e095020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544e0951b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544e095340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544e0954d0"/>
        <function-ref name="get" scoped="" ref="0x7f544e095660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544e0957f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544e095980"/>
        <function-ref name="set" scoped="" ref="0x7f544e095b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544e095ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544e095e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544e094120"/>
        <function-ref name="clr" scoped="" ref="0x7f544e0942b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544e093750" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544e093750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e093ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f544e08d400" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f544e08d400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e08d780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544e090570" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544e090570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e0908f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f544e090c80" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f544e090c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e08d0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f544e08dae0" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f544e08dae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e08de60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544e08f2f0" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544e08f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e08f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f544e08e500" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f544e08e500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e08e880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f544e0579e0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f544e0579e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f544e05d980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f544e05d020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f544e05d1b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f544e05d340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f544e057d60"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f544e05d4d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f544e05d660"/>
        <function-ref name="initClocks" scoped="" ref="0x7f544e05d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544e060440" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544e060440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e0607c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f544e046020" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f544e046020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f544e045020"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f544e046530"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f544e0466c0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f544e046850"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f544e0463a0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f544e0469e0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f544e046b70"/>
        <function-ref name="initClocks" scoped="" ref="0x7f544e046d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f544e045360" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f544e045360"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f544e0456e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544e048940" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544e048940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e048cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f544e0025a0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f544e0025a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544e002920"/>
        <function-ref name="getControl" scoped="" ref="0x7f544e002ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544e002c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544e002dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544e001020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544e0011b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544e001340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544e0014d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f544e001660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f544dff0020" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f544dff0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544dff03a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f544dff0530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544dff06c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544dff0850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544dff09e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544dff0b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544dff0d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544dfef020"/>
        <function-ref name="setControl" scoped="" ref="0x7f544dfef1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f544dff9700" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f544dff9700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dff9a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dff9c10"/>
        <function-ref name="captured" scoped="" ref="0x7f544dff9da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dff8020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dff81b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dff8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f544dfdda20" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f544dfdda20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfddda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dfdc020"/>
        <function-ref name="captured" scoped="" ref="0x7f544dfdc1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dfdc340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dfdc4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dfdc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f544e000aa0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f544e000aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544e000e20"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544dfff020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544dfff1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544dfff340"/>
        <function-ref name="fired" scoped="" ref="0x7f544dfff4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f544dfe4020" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f544dfe4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfe43a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544dfe4530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544dfe46c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544dfe4850"/>
        <function-ref name="fired" scoped="" ref="0x7f544dfe49e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f544dfdaa20" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f544dfdaa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfdada0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dfd9020"/>
        <function-ref name="captured" scoped="" ref="0x7f544dfd91b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dfd9340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dfd94d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dfd9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f544dfeb5a0" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f544dfeb5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544dfeb920"/>
        <function-ref name="getControl" scoped="" ref="0x7f544dfebab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544dfebc40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544dfebdd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544dfea020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544dfea1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544dfea340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544dfea4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f544dfea660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f544e003b10" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f544e003b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544e00b020"/>
        <function-ref name="getControl" scoped="" ref="0x7f544e00b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544e00b340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544e00b4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544e00b660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544e00b7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544e00b980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544e00bb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f544e00bca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f544dfe0a20" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f544dfe0a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfe0da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dfde020"/>
        <function-ref name="captured" scoped="" ref="0x7f544dfde1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dfde340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dfde4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dfde660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f544dfe63e0" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f544dfe63e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfe6760"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544dfe68f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544dfe6a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544dfe6c10"/>
        <function-ref name="fired" scoped="" ref="0x7f544dfe6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f544dfef5a0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f544dfef5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544dfefa20"/>
        <function-ref name="getControl" scoped="" ref="0x7f544dfefbb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544dfefd40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544dfee020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544dfee1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544dfee340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544dfee4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544dfee660"/>
        <function-ref name="setControl" scoped="" ref="0x7f544dfee7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f544dff8700" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f544dff8700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dff8a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dff8c10"/>
        <function-ref name="captured" scoped="" ref="0x7f544dff8da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dff2020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dff21b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dff2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f544dfdca20" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f544dfdca20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfdcda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dfdb020"/>
        <function-ref name="captured" scoped="" ref="0x7f544dfdb1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dfdb340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dfdb4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dfdb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f544dfeebe0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f544dfeebe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544dfed020"/>
        <function-ref name="getControl" scoped="" ref="0x7f544dfed1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544dfed340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544dfed4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544dfed660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544dfed7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544dfed980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544dfedb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f544dfedca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f544dfff890" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f544dfff890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfffc10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544dfffda0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544dffa020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544dffa1b0"/>
        <function-ref name="fired" scoped="" ref="0x7f544dffa340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f544e013060" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f544e013060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544e0133e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544e013570"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544e013700"/>
        <function-ref name="get" scoped="" ref="0x7f544e013890"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544e013a20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544e013bb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544e013d40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544e012020"/>
        <function-ref name="overflow" scoped="" ref="0x7f544e0121b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544e012340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544e0124d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f544dfe4da0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f544dfe4da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfe3180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544dfe3310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544dfe34a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544dfe3630"/>
        <function-ref name="fired" scoped="" ref="0x7f544dfe37c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f544e00a0c0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f544e00a0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544e00a440"/>
        <function-ref name="getControl" scoped="" ref="0x7f544e00a5d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544e00a760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544e00a8f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544e00aa80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544e00ac10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544e00ada0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544e002020"/>
        <function-ref name="setControl" scoped="" ref="0x7f544e0021b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f544dfeaa50" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f544dfeaa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544dfeadd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f544dfe9020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544dfe91b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544dfe9340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544dfe94d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544dfe9660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544dfe97f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544dfe9980"/>
        <function-ref name="setControl" scoped="" ref="0x7f544dfe9b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f544dff36d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f544dff36d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dff3a50"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dff3be0"/>
        <function-ref name="captured" scoped="" ref="0x7f544dff3d70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dff9020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dff91b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dff9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f544dfdea20" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f544dfdea20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfdeda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dfdd020"/>
        <function-ref name="captured" scoped="" ref="0x7f544dfdd1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dfdd340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dfdd4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dfdd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f544dffccf0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f544dffccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544e0000a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544e000230"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544e0003c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544e000550"/>
        <function-ref name="fired" scoped="" ref="0x7f544e0006e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f544dfe51f0" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f544dfe51f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfe5570"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544dfe5700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544dfe5890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544dfe5a20"/>
        <function-ref name="fired" scoped="" ref="0x7f544dfe5bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f544dfdba20" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f544dfdba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfdbda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dfda020"/>
        <function-ref name="captured" scoped="" ref="0x7f544dfda1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dfda340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dfda4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dfda660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f544dfec0c0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f544dfec0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544dfec440"/>
        <function-ref name="getControl" scoped="" ref="0x7f544dfec5d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544dfec760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544dfec8f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544dfeca80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544dfecc10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544dfecda0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544dfeb020"/>
        <function-ref name="setControl" scoped="" ref="0x7f544dfeb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f544dff26c0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f544dff26c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544dff2a40"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544dff2bd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544dff2d60"/>
        <function-ref name="get" scoped="" ref="0x7f544dff1020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544dff11b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dff1340"/>
        <function-ref name="getMode" scoped="" ref="0x7f544dff14d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dff1660"/>
        <function-ref name="overflow" scoped="" ref="0x7f544dff17f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544dff1980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544dff1b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f544dfe3b80" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f544dfe3b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfe2020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544dfe21b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544dfe2340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544dfe24d0"/>
        <function-ref name="fired" scoped="" ref="0x7f544dfe2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f544dfe1a20" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f544dfe1a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfe1da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544dfe0020"/>
        <function-ref name="captured" scoped="" ref="0x7f544dfe01b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dfe0340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dfe04d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544dfe0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f544dfe2a20" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f544dfe2a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfe1020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544dfe11b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544dfe1340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544dfe14d0"/>
        <function-ref name="fired" scoped="" ref="0x7f544dfe1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f544dfe7570" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f544dfe7570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544dfe78f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544dfe7a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544dfe7c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544dfe7da0"/>
        <function-ref name="fired" scoped="" ref="0x7f544dfe6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f544dfe8020" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f544dfe8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544dfe83a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f544dfe8530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544dfe86c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544dfe8850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544dfe89e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544dfe8b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544dfe8d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544dfe7020"/>
        <function-ref name="setControl" scoped="" ref="0x7f544dfe71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f544dfa12f0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f544dfa12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544dfa1670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f544dfa2c20" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f544dfa2c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544dfa1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f544dfa1940" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f544dfa1940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544dfa1cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f544dfa25b0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544dfa25b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544dfa2950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f544dfa4c80" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544dfa4c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544dfa30a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544dfa3230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544dfa33c0"/>
        <function-ref name="get" scoped="" ref="0x7f544dfa3550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544dfa36e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544dfa3870"/>
        <function-ref name="getMode" scoped="" ref="0x7f544dfa3a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544dfa3b90"/>
        <function-ref name="overflow" scoped="" ref="0x7f544dfa3d20"/>
        <function-ref name="setMode" scoped="" ref="0x7f544dfa2020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544dfa21b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f544df9a2f0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f544df9a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df9a670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f544df9bc20" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f544df9bc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df9a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f544df9a940" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f544df9a940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df9acc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f544df9b5b0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df9b5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df9b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f544df9dc80" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df9dc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df9c0a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df9c230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df9c3c0"/>
        <function-ref name="get" scoped="" ref="0x7f544df9c550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df9c6e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df9c870"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df9ca00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df9cb90"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df9cd20"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df9b020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df9b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df4ea90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df4ea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df4ee10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df4d020"/>
        <function-ref name="captured" scoped="" ref="0x7f544df4d1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df4d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df4d4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df4d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df959d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df959d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df95d50"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df4f020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df4f1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df4f340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df4f4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df4f660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df4f7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df4f980"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df4fb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df4a020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df4a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df4a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df4fde0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df4fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df4e180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df4e310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df4e4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df4e630"/>
        <function-ref name="fired" scoped="" ref="0x7f544df4e7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df4d930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df4d930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df4dcb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df4de40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df4b020"/>
        <function-ref name="get" scoped="" ref="0x7f544df4b1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df4b340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df4b4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df4b660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df4b7f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df4b980"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df4bb10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df4bca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df45160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df45160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df454e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df45670"/>
        <function-ref name="captured" scoped="" ref="0x7f544df45800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df45990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df45b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df45cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df47020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df47020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df473a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df47530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df476c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df47850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df479e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df47b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df47d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df46020"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df461b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df437a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df437a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df43b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df46480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df46480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df46800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df46990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df46b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df46cb0"/>
        <function-ref name="fired" scoped="" ref="0x7f544df46e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df44020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df44020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df443a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df44530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df446c0"/>
        <function-ref name="get" scoped="" ref="0x7f544df44850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df449e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df44b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df44d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df43020"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df431b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df43340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df434d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df3e7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df3e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df3eb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df3ecb0"/>
        <function-ref name="captured" scoped="" ref="0x7f544df3ee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df3d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df3d1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df3d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df406d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df406d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df40a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df40be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df40d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df3f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df3f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df3f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df3f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df3f660"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df3f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df3cc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df3cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df3a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df3fac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df3fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df3fe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df3e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df3e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df3e340"/>
        <function-ref name="fired" scoped="" ref="0x7f544df3e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df3d610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df3d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df3d990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df3db20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df3dcb0"/>
        <function-ref name="get" scoped="" ref="0x7f544df3de40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df3c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df3c1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df3c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df3c4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df3c660"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df3c7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df3c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df36cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df36cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df350a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df35230"/>
        <function-ref name="captured" scoped="" ref="0x7f544df353c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df35550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df356e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df35870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df38b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df38b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df37020"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df371b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df37340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df374d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df37660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df377f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df37980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df37b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df37ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df332f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df332f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df33670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df36020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df36020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df363a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df36530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df366c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df36850"/>
        <function-ref name="fired" scoped="" ref="0x7f544df369e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df35b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df35b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df34020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df341b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df34340"/>
        <function-ref name="get" scoped="" ref="0x7f544df344d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df34660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df347f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df34980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df34b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df34ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df34e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df33020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df2e2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df2e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df2e670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df2e800"/>
        <function-ref name="captured" scoped="" ref="0x7f544df2e990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df2eb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df2ecb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df2ee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df30220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df30220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df305a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df30730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df308c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df30a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df30be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df30d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df2f020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df2f1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df2f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df2c7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df2c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df2cb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df2f610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df2f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df2f990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df2fb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df2fcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df2fe40"/>
        <function-ref name="fired" scoped="" ref="0x7f544df2e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df2d160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df2d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df2d4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df2d670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df2d800"/>
        <function-ref name="get" scoped="" ref="0x7f544df2d990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df2db20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df2dcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df2de40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df2c020"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df2c1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df2c340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df2c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df267a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df267a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df26b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df26cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f544df26e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df25020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df251b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df25340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df286d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df286d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df28a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df28be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df28d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df27020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df271b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df27340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df274d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df27660"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df277f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df24c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df24c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df23020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df27ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df27ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df27e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df26020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df261b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df26340"/>
        <function-ref name="fired" scoped="" ref="0x7f544df264d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df25610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df25610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df25990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df25b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df25cb0"/>
        <function-ref name="get" scoped="" ref="0x7f544df25e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df24020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df241b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df24340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df244d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df24660"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df247f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df24980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df1fcb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df1fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df1e0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df1e230"/>
        <function-ref name="captured" scoped="" ref="0x7f544df1e3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df1e550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df1e6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df1e870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df21b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df21b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df20020"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df201b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df20340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df204d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df20660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df207f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df20980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df20b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df20ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df1c2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df1c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df1c670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df1f020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df1f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df1f3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df1f530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df1f6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df1f850"/>
        <function-ref name="fired" scoped="" ref="0x7f544df1f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df1eb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df1eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df1d020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df1d1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df1d340"/>
        <function-ref name="get" scoped="" ref="0x7f544df1d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df1d660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df1d7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df1d980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df1db10"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df1dca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df1de30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df1c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df162f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df162f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df16670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df16800"/>
        <function-ref name="captured" scoped="" ref="0x7f544df16990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df16b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df16cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df16e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df18220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df18220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df185a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df18730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df188c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df18a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df18be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df18d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df17020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df171b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df17340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df147a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df147a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df14b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df17610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df17610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df17990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df17b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df17cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df17e40"/>
        <function-ref name="fired" scoped="" ref="0x7f544df16020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df15160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df15160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df154e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df15670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df15800"/>
        <function-ref name="get" scoped="" ref="0x7f544df15990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df15b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df15cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df15e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df14020"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df141b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df14340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df144d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df0f7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df0f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df0fb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df0fcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f544df0fe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df0e020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df0e1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df0e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df116d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df116d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df11a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df11be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df11d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df10020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df101b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df10340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df104d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df10660"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df107f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df0dc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df0dc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df0c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df10ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df10ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df10e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df0f020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df0f1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df0f340"/>
        <function-ref name="fired" scoped="" ref="0x7f544df0f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df0e610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df0e610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df0e990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df0eb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df0ecb0"/>
        <function-ref name="get" scoped="" ref="0x7f544df0ee40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df0d020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df0d1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df0d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df0d4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df0d660"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df0d7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df0d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f544df07cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f544df07cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df060a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f544df06230"/>
        <function-ref name="captured" scoped="" ref="0x7f544df063c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df06550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df066e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f544df06870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f544df0ab30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f544df0ab30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544df08020"/>
        <function-ref name="getControl" scoped="" ref="0x7f544df081b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df08340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544df084d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544df08660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df087f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544df08980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544df08b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f544df08ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f544df042f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f544df042f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df04670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f544df07020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f544df07020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544df073a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544df07530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544df076c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544df07850"/>
        <function-ref name="fired" scoped="" ref="0x7f544df079e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f544df06b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544df06b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544df05020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544df051b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544df05340"/>
        <function-ref name="get" scoped="" ref="0x7f544df054d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544df05660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544df057f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544df05980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544df05b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f544df05ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544df05e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544df04020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f544defe240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f544defe240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544defe5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f544df02a90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f544df02a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544df02e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f544deff260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f544deff260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544deff5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f544deff9f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f544deff9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544deffd70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f544e5fd4c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f544e5fd4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f544e5fd840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f544e96e3b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f544e96e3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f544e96e730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f544e96e8c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f544e96ea50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f544e7d7bc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f544e7d7bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f544e913020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f544de552f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f544de552f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544de55670"/>
        <function-ref name="isInput" scoped="" ref="0x7f544de55800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544de55990"/>
        <function-ref name="toggle" scoped="" ref="0x7f544de55b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544de55cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544de55e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544de54020"/>
        <function-ref name="get" scoped="" ref="0x7f544de541b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544de54340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544de544d0"/>
        <function-ref name="set" scoped="" ref="0x7f544de54660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544de547f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544de54980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544de54c10"/>
        <function-ref name="clr" scoped="" ref="0x7f544de54da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f544de6f020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f544de6f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544de6f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544de6f530"/>
        <function-ref name="toggle" scoped="" ref="0x7f544de6f6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544de6f850"/>
        <function-ref name="get" scoped="" ref="0x7f544de6f9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544de6fb70"/>
        <function-ref name="set" scoped="" ref="0x7f544de6fd00"/>
        <function-ref name="clr" scoped="" ref="0x7f544de55020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f544de51de0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f544de51de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544de50180"/>
        <function-ref name="isInput" scoped="" ref="0x7f544de50310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544de504a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544de50630"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544de507c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544de50950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544de50ae0"/>
        <function-ref name="get" scoped="" ref="0x7f544de50c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544de50e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544de4f020"/>
        <function-ref name="set" scoped="" ref="0x7f544de4f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544de4f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544de4f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544de4f760"/>
        <function-ref name="clr" scoped="" ref="0x7f544de4f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f544de52b90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f544de52b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544de51020"/>
        <function-ref name="isInput" scoped="" ref="0x7f544de511b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544de51340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544de514d0"/>
        <function-ref name="get" scoped="" ref="0x7f544de51660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544de517f0"/>
        <function-ref name="set" scoped="" ref="0x7f544de51980"/>
        <function-ref name="clr" scoped="" ref="0x7f544de51b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f544de4c930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f544de4c930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544de4ccb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544de4ce40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544de4b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f544de4b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544de4b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544de4b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544de4b660"/>
        <function-ref name="get" scoped="" ref="0x7f544de4b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544de4b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544de4bb10"/>
        <function-ref name="set" scoped="" ref="0x7f544de4bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544de4be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544de4a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544de4a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f544de4a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f544de4d710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f544de4d710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544de4da90"/>
        <function-ref name="isInput" scoped="" ref="0x7f544de4dc20"/>
        <function-ref name="toggle" scoped="" ref="0x7f544de4ddb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544de4c020"/>
        <function-ref name="get" scoped="" ref="0x7f544de4c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544de4c340"/>
        <function-ref name="set" scoped="" ref="0x7f544de4c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f544de4c660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f544de3d1d0" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f544de3d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544de3d550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f544de40aa0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f544de40aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f544de40e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f544de37020" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f544de37020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544de373a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f544de3c7e0" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f544de3c7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f544de3cb60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f544de398b0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f544de398b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544de39c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f544de3ce50" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f544de3ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544de39210"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f544de393a0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f544de39530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f544e9eb410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f544e9eb410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544e9eb790"/>
        <function-ref name="runTask" scoped="" ref="0x7f544e9eb920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f544e97c3a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f544e97c3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e97c720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f544e97c8b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f544e97ca40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f544e353b70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f544e353b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544e352020"/>
        <function-ref name="runTask" scoped="" ref="0x7f544e3521b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f544e34c2c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f544e34c2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f544e34c640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f544e34c7d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f544e34c960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f544e354c30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f544e354c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544e353020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f544e3531b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f544e353340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f544de3faf0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f544de3faf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f544de3fe70"/>
        <function-ref name="stopDone" scoped="" ref="0x7f544de2c030"/>
        <function-ref name="start" scoped="" ref="0x7f544de2c1c0"/>
        <function-ref name="stop" scoped="" ref="0x7f544de2c350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f544de2cb20" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f544de2cb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f544e2ca210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544de2b020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f544de2b1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f544de2b340"/>
        <function-ref name="cancel" scoped="" ref="0x7f544de2b4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544de2b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f544de29470" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f544de29470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544de297f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f544de29980"/>
        <function-ref name="getPayload" scoped="" ref="0x7f544de29b10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f544de29ca0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f544de29e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f544de2be40" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f544de2be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f544e2ca210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f544de291e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f544de26490" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544de26490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544de26810"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544de269a0"/>
        <function-ref name="led1On" scoped="" ref="0x7f544de26b30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544de26cc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544de26e50"/>
        <function-ref name="get" scoped="" ref="0x7f544de15020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544de151b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544de157f0"/>
        <function-ref name="set" scoped="" ref="0x7f544de15340"/>
        <function-ref name="led0On" scoped="" ref="0x7f544de154d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f544de15660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f544de119f0" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f544de119f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f544de11d70"/>
        <function-ref name="noAck" scoped="" ref="0x7f544de26020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f544de261b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f544de174e0" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f544de174e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f544de17860"/>
        <function-ref name="source" scoped="" ref="0x7f544de179f0"/>
        <function-ref name="address" scoped="" ref="0x7f544de17b80"/>
        <function-ref name="destination" scoped="" ref="0x7f544de17d10"/>
        <function-ref name="setSource" scoped="" ref="0x7f544de27020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f544de271b0"/>
        <function-ref name="type" scoped="" ref="0x7f544de27340"/>
        <function-ref name="setType" scoped="" ref="0x7f544de274d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f544de27660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f544de277f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f544de27980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f544ddad120" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f544ddad120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544ddad4a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f544ddad630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f544ddad7c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f544ddad950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544ddadae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f544ddadd70" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f544ddadd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f544ddab180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f544ddb1110" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f544ddb1110"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f544e2ca210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544ddb14b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f544ddb1640"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f544ddb17d0"/>
        <function-ref name="cancel" scoped="" ref="0x7f544ddb1960"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544ddb1af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f544ddafa40" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f544ddafa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544ddafdc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f544ddae020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f544ddae1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f544ddae340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f544ddae4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f544ddb1e70" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f544ddb1e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f544e2ca210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f544ddb0240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f544ddae720" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f544ddae720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f544ddaeaa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f544ddaec30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f544ddaedc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f544ddb0490" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f544ddb0490"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f544ddb0810"/>
        <function-ref name="source" scoped="" ref="0x7f544ddb09a0"/>
        <function-ref name="address" scoped="" ref="0x7f544ddb0b30"/>
        <function-ref name="destination" scoped="" ref="0x7f544ddb0cc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f544ddb0e50"/>
        <function-ref name="setDestination" scoped="" ref="0x7f544ddaf020"/>
        <function-ref name="type" scoped="" ref="0x7f544ddaf1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f544ddaf340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f544ddaf4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f544ddaf660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f544ddaf7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f544dda78d0" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f544dda78d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f544dda7c50"/>
        <function-ref name="stopDone" scoped="" ref="0x7f544dda7de0"/>
        <function-ref name="start" scoped="" ref="0x7f544dda6020"/>
        <function-ref name="stop" scoped="" ref="0x7f544dda61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f544dda5480" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f544dda5480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f544e2c9d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544dda5800"/>
        <function-ref name="getPayload" scoped="" ref="0x7f544dda5990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f544dda5b20"/>
        <function-ref name="cancel" scoped="" ref="0x7f544dda5cb0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544dda5e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544dda7280" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544dda7280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544dda7600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f544dda6940" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f544dda6940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f544e2c9d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f544dda6cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f544dda3dc0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544dda3dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544dda2180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544dda2310"/>
        <function-ref name="led1On" scoped="" ref="0x7f544dda24a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544dda2630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544dda27c0"/>
        <function-ref name="get" scoped="" ref="0x7f544dda2950"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544dda2ae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544dd9e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f544dda2c70"/>
        <function-ref name="led0On" scoped="" ref="0x7f544dda2e00"/>
        <function-ref name="led2On" scoped="" ref="0x7f544dd9e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f544dda34a0" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f544dda34a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f544e2c9d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f544dda3820"/>
        <function-ref name="offset" scoped="" ref="0x7f544dda39b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f544dda3b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f544dd97810" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f544dd97810"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f544dd97b90"/>
        <function-ref name="stopDone" scoped="" ref="0x7f544dd97d20"/>
        <function-ref name="start" scoped="" ref="0x7f544dd96020"/>
        <function-ref name="stop" scoped="" ref="0x7f544dd961b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f544dd30e40" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f544dd30e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544dd2e1e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f544dd2e370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f544dd840f0" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f544dd840f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f544dd84470"/>
        <function-ref name="stop" scoped="" ref="0x7f544dd84600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f544dd67d10" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f544dd67d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544dd660e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f544dd66270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544dd971c0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544dd971c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544dd97540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f544dd80cd0" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f544dd80cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f544dd830a0"/>
        <function-ref name="flush" scoped="" ref="0x7f544dd83230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f544dd32400" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f544dd32400"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544dd32780"/>
        <function-ref name="runTask" scoped="" ref="0x7f544dd32910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f544dd8f020" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f544dd8f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f544dd8f3a0"/>
        <function-ref name="resetSend" scoped="" ref="0x7f544dd8f530"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f544dd8f6c0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f544dd8f850"/>
        <function-ref name="putData" scoped="" ref="0x7f544dd8f9e0"/>
        <function-ref name="putDone" scoped="" ref="0x7f544dd8fb70"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f544dd8fd00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f544dd8c020" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544dd8c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544dd8c3a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544dd8c530"/>
        <function-ref name="led1On" scoped="" ref="0x7f544dd8c6c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544dd8c850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544dd8c9e0"/>
        <function-ref name="get" scoped="" ref="0x7f544dd8cb70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544dd8cd00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544dd864d0"/>
        <function-ref name="set" scoped="" ref="0x7f544dd86020"/>
        <function-ref name="led0On" scoped="" ref="0x7f544dd861b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f544dd86340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f544dd2b0c0" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f544dd2b0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544dd2b440"/>
        <function-ref name="runTask" scoped="" ref="0x7f544dd2b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f544dd907d0" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f544dd907d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f544dd90b50"/>
        <function-ref name="nextByte" scoped="" ref="0x7f544dd90ce0"/>
        <function-ref name="startSend" scoped="" ref="0x7f544dd90e70"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f544dd95030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f544dd8dc40" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f544dd8dc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f544dd94020"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f544dd941b0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f544dd94340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f544dc61c50" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f544dc61c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544dc60020"/>
        <function-ref name="runTask" scoped="" ref="0x7f544dc601b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f544dc65830" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f544dc65830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f544e2c9d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544dc65bd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f544dc65d60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f544dc64020"/>
        <function-ref name="cancel" scoped="" ref="0x7f544dc641b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544dc64340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f544dc60480" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f544dc60480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544dc60800"/>
        <function-ref name="runTask" scoped="" ref="0x7f544dc60990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f544dc65110" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f544dc65110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f544e2c9d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f544dc654b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f544dc64760" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f544dc64760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f544e2c9d70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f544dc64b00"/>
        <function-ref name="offset" scoped="" ref="0x7f544dc64c90"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f544dc64e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f544dc62590" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544dc62590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544dc62910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544dc62aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f544dc62c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544dc62dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544dc61020"/>
        <function-ref name="get" scoped="" ref="0x7f544dc611b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544dc61340"/>
        <function-ref name="led2On" scoped="" ref="0x7f544dc61980"/>
        <function-ref name="set" scoped="" ref="0x7f544dc61660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544dc614d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f544dc617f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f544dc639d0" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f544dc639d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f544dc63d50"/>
        <function-ref name="nextByte" scoped="" ref="0x7f544dc62020"/>
        <function-ref name="startSend" scoped="" ref="0x7f544dc621b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f544dc62340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f544dc630e0" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f544dc630e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f544dc63460"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f544dc635f0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f544dc63780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f544dc50d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f544dc50d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544dc5a0e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f544dc5a270"/>
        <function-ref name="receive" scoped="" ref="0x7f544dc5a400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f544dc5a590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f544dc5a720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f544dc5a8b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544dc5aa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f544dc5eb60" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f544dc5eb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f544dc5b020"/>
        <function-ref name="resetSend" scoped="" ref="0x7f544dc5b1b0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f544dc5b340"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f544dc5b4d0"/>
        <function-ref name="putData" scoped="" ref="0x7f544dc5b660"/>
        <function-ref name="putDone" scoped="" ref="0x7f544dc5b7f0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f544dc5b980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f544dc5acc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544dc5acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544dc590a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544dc59230"/>
        <function-ref name="led1On" scoped="" ref="0x7f544dc593c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544dc59550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544dc596e0"/>
        <function-ref name="get" scoped="" ref="0x7f544dc59870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544dc59a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544dc4e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f544dc59b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f544dc59d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f544dc4e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f544dc31020" loc="40:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f544dc31020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544dc313a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f544dc31530"/>
        <function-ref name="receive" scoped="" ref="0x7f544dc316c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f544dc31850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f544dc338d0" loc="39:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f544dc338d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544dc33c50"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f544dc33de0"/>
        <function-ref name="receive" scoped="" ref="0x7f544dc32020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f544dc321b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f544dc32340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f544dc324d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544dc32660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f544dc330c0" loc="38:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f544dc330c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f544dc33440"/>
        <function-ref name="stop" scoped="" ref="0x7f544dc335d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f544d8b4c70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d8b4c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f544d8b3020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f544d8b31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f544d8b2440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f544d8b2440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544d8b27c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f544d8b2950"/>
        <function-ref name="receive" scoped="" ref="0x7f544d8b2ae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f544d8b2c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f544d8b1020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544d8b1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f544d8b13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f544d8b3440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f544d8b3440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544d8b37c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f544d8b3950"/>
        <function-ref name="receive" scoped="" ref="0x7f544d8b3ae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f544d8b3c70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f544d8b3e00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f544d8b2020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544d8b21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f544d8b4020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f544d8b4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544d8b43a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544d8b4530"/>
        <function-ref name="request" scoped="" ref="0x7f544d8b46c0"/>
        <function-ref name="granted" scoped="" ref="0x7f544d8b4850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544d8b49e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f544dbc7dd0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544dbc7dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f544dbca180"/>
        <function-ref name="configure" scoped="" ref="0x7f544dbca310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f544dbc6210" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f544dbc6210"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544dbc6590"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f544dbc6720"/>
        <function-ref name="receive" scoped="" ref="0x7f544dbc68b0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f544dbc6a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f544dbc3600" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544dbc3600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f544dbc3980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f544dbcab50" loc="43:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f544dbcab50"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544dbc9020"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f544dbc91b0"/>
        <function-ref name="receive" scoped="" ref="0x7f544dbc9340"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f544dbc94d0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f544dbc9660"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f544dbc97f0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544dbc9980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f544dbc4370" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f544dbc4370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544dbc46f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544dbc4880"/>
        <function-ref name="request" scoped="" ref="0x7f544dbc4a10"/>
        <function-ref name="granted" scoped="" ref="0x7f544dbc4ba0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544dbc4d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f544dbcc320" loc="41:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f544dbcc320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544dbcc6a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544dbcc830"/>
        <function-ref name="request" scoped="" ref="0x7f544dbcc9c0"/>
        <function-ref name="granted" scoped="" ref="0x7f544dbccb50"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544dbccce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f544dbbfbe0" loc="48:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f544dbbfbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f544dbc2020"/>
        <function-ref name="txDone" scoped="" ref="0x7f544dbc21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f544db36e70" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544db36e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f544db35240"/>
        <function-ref name="configure" scoped="" ref="0x7f544db353d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f544db34890" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f544db34890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544db34c30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f544db34dc0"/>
        <function-ref name="receive" scoped="" ref="0x7f544db33020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f544db331b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f544db323e0" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544db323e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f544db32780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f544db32a50" loc="50:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f544db32a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f544db32dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f544db31020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f544db311b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f544db31340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f544db314d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f544db31660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f544db317f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f544db31980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f544db31b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f544db31ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f544db31e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f544db30020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f544db301b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f544db30440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f544db305d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f544db30760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f544db308f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f544db30a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f544db30c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f544db30da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f544db2f020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f544db2f1b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f544db2f340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f544db2f4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544db2f660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f544db2f9f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f544db2fb80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f544db2fd10"/>
        <function-ref name="tx" scoped="" ref="0x7f544db2e020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f544db2e1b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f544db2e340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f544db2e4d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f544db2e660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f544db2e7f0"/>
        <function-ref name="rx" scoped="" ref="0x7f544db2e980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f544db2eb10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f544db2eca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f544db2ee30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f544db2d020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f544db2d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f544db35790" loc="45:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f544db35790"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f544db35b30"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f544db35cc0"/>
        <function-ref name="receive" scoped="" ref="0x7f544db35e50"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f544db34020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f544db341b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f544db34340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f544db344d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f544db2c020" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f544db2c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544db2ce30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544db2a800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544db2a340"/>
        <function-ref name="overflow" scoped="" ref="0x7f544db2acc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f544db335b0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f544db335b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544db33950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544db33ae0"/>
        <function-ref name="request" scoped="" ref="0x7f544db33c70"/>
        <function-ref name="granted" scoped="" ref="0x7f544db33e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544db32020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f544db360d0" loc="43:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f544db360d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544db36470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544db36600"/>
        <function-ref name="request" scoped="" ref="0x7f544db36790"/>
        <function-ref name="granted" scoped="" ref="0x7f544db36920"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544db36ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f544db2d5b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f544db2d5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f544db2d950"/>
        <function-ref name="txDone" scoped="" ref="0x7f544db2dae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f544db29120" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544db29120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544db294a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544db29630"/>
        <function-ref name="led1On" scoped="" ref="0x7f544db297c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544db29950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544db29ae0"/>
        <function-ref name="get" scoped="" ref="0x7f544db29c70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544db29e00"/>
        <function-ref name="led2On" scoped="" ref="0x7f544db284d0"/>
        <function-ref name="set" scoped="" ref="0x7f544db281b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544db28020"/>
        <function-ref name="led0On" scoped="" ref="0x7f544db28340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f544db1bbd0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f544db1bbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544db1a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f544db1c6d0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f544db1c6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f544db1ca50"/>
        <function-ref name="txDone" scoped="" ref="0x7f544db1cbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f544db23b60" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f544db23b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f544db20020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f544db201b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f544db20340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f544db204d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f544db20660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f544db207f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f544db20980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f544db20b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f544db20ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f544db20e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f544db1f020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f544db1f1b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f544db1f340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f544db1f5d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f544db1f760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f544db1f8f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f544db1fa80"/>
        <function-ref name="isUart" scoped="" ref="0x7f544db1fc10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f544db1fda0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f544db1e020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f544db1e1b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f544db1e340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f544db1e4d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f544db1e660"/>
        <function-ref name="getMode" scoped="" ref="0x7f544db1e7f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f544db1eb80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f544db1ed10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f544db1d020"/>
        <function-ref name="tx" scoped="" ref="0x7f544db1d1b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f544db1d340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f544db1d4d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f544db1d660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f544db1d7f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f544db1d980"/>
        <function-ref name="rx" scoped="" ref="0x7f544db1db10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f544db1dca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f544db1de30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f544db1c020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f544db1c1b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f544db1c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f544dadf990" loc="82:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f544dadf990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544dadfd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f544dade020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544dade1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544dade340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544dade4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544dade660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544dade7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544dade980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544dadeb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544dadeca0"/>
        <function-ref name="set" scoped="" ref="0x7f544dadee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544dadd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544dadd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544dadd440"/>
        <function-ref name="clr" scoped="" ref="0x7f544dadd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f544db12020" loc="76:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f544db12020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f544db123a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f544db12530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f544dadd990" loc="83:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f544dadd990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544daddd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f544dadc020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544dadc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544dadc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544dadc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544dadc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544dadc7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544dadc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544dadcb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544dadcca0"/>
        <function-ref name="set" scoped="" ref="0x7f544dadce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544dadb020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544dadb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544dadb440"/>
        <function-ref name="clr" scoped="" ref="0x7f544dadb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f544dadb990" loc="84:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f544dadb990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544dadbd10"/>
        <function-ref name="isInput" scoped="" ref="0x7f544dada020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544dada1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544dada340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544dada4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544dada660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544dada7f0"/>
        <function-ref name="get" scoped="" ref="0x7f544dada980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544dadab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544dadaca0"/>
        <function-ref name="set" scoped="" ref="0x7f544dadae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544dad9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544dad91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544dad9440"/>
        <function-ref name="clr" scoped="" ref="0x7f544dad95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f544db17360" loc="75:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f544db17360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f544db176e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f544db17870"/>
        <function-ref name="setUctl" scoped="" ref="0x7f544db17a00"/>
        <function-ref name="enableUart" scoped="" ref="0x7f544db17b90"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f544db17d20"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f544db16020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f544db161b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f544db16340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f544db164d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f544db16660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f544db167f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f544db16980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f544db16b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f544db16da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f544db15020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f544db151b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f544db15340"/>
        <function-ref name="isUart" scoped="" ref="0x7f544db154d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f544db15660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f544db157f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f544db15980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f544db15b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f544db15ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f544db15e30"/>
        <function-ref name="getMode" scoped="" ref="0x7f544db14020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f544db143b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f544db14540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f544db146d0"/>
        <function-ref name="tx" scoped="" ref="0x7f544db14860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f544db149f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f544db14b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f544db14d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f544db13020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f544db131b0"/>
        <function-ref name="rx" scoped="" ref="0x7f544db13340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f544db134d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f544db13660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f544db137f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f544db13980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f544db13b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f544dad9890" loc="86:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544dad9890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544dad9c10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544dad9da0"/>
        <function-ref name="led1On" scoped="" ref="0x7f544dad8020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544dad81b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544dad8340"/>
        <function-ref name="get" scoped="" ref="0x7f544dad84d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544dad8660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544dad8ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544dad87f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f544dad8980"/>
        <function-ref name="led2On" scoped="" ref="0x7f544dad8b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f544dae9bc0" loc="79:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f544dae9bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f544db10020"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f544db101b0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f544db10340"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f544db104d0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f544db10660"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f544db107f0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f544db10980"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f544db10b10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544db10ca0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f544db10e30"/>
        <function-ref name="getData" scoped="" ref="0x7f544db0f020"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f544db0f1b0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f544db0f340"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f544db0f5d0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f544db0f760"/>
        <function-ref name="getIV" scoped="" ref="0x7f544db0f8f0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f544db0fa80"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f544db0fc10"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f544db0fda0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f544dae7020"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f544dae71b0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f544dae7340"/>
        <function-ref name="isI2C" scoped="" ref="0x7f544dae74d0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f544dae7660"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f544dae77f0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f544dae7b80"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f544dae7d10"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f544dae6020"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f544dae61b0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f544dae6340"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f544dae64d0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f544dae6660"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f544dae67f0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f544dae6980"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f544dae6b10"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f544dae6ca0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f544dae6e30"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f544dae5020"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f544dae51b0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f544dae5340"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f544dae54d0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f544dae5660"/>
        <function-ref name="setData" scoped="" ref="0x7f544dae57f0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f544dae5980"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f544dae5b10"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f544dae5ca0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f544dae5e30"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f544dae4020"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f544dae41b0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f544dae4740"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f544dae48d0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f544dae4a60"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f544dae4bf0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f544dae4d80"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f544dae3020"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f544dae31b0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f544dae3340"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f544dae34d0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f544dae3660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f544dae1990" loc="81:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f544dae1990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544dae1d10"/>
        <function-ref name="isInput" scoped="" ref="0x7f544dae0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544dae01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544dae0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544dae04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544dae0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544dae07f0"/>
        <function-ref name="get" scoped="" ref="0x7f544dae0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544dae0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544dae0ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544dae0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544dadf020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544dadf1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544dadf440"/>
        <function-ref name="clr" scoped="" ref="0x7f544dadf5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f544db12970" loc="77:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f544db12970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544db12cf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f544dae3a20" loc="80:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f544dae3a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544dae3da0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544dae2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544dae21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544dae2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544dae24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544dae2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544dae27f0"/>
        <function-ref name="get" scoped="" ref="0x7f544dae2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544dae2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544dae2ca0"/>
        <function-ref name="set" scoped="" ref="0x7f544dae2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544dae1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544dae11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544dae1440"/>
        <function-ref name="clr" scoped="" ref="0x7f544dae15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f544da53020" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f544da53020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544da53e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544da51800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544da51340"/>
        <function-ref name="overflow" scoped="" ref="0x7f544da51cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f544da4d020" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f544da4d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544da4de30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544da4c800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544da4c340"/>
        <function-ref name="overflow" scoped="" ref="0x7f544da4ccc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f544da382c0" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f544da382c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544da38640"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544da387d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544da38960"/>
        <function-ref name="get" scoped="" ref="0x7f544da38af0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544da38c80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544da38e10"/>
        <function-ref name="getMode" scoped="" ref="0x7f544da37020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544da371b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f544da37340"/>
        <function-ref name="setMode" scoped="" ref="0x7f544da374d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544da37660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f544da480a0" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f544da480a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544da39020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544da399a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544da394e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f544da39e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f544d1b9020" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d1b9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f544d1b93a0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f544d1b9530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f544d1b3440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f544d1b3440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544d1b37c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f544d1ab760" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544d1ab760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f544d1abae0"/>
        <function-ref name="configure" scoped="" ref="0x7f544d1abc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f544d1b3a50" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f544d1b3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f544d1b3dd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f544d1b1020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f544d1b11b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f544d1b1340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f544d1b14d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f544d1b1660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f544d1b17f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f544d1b1980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544d1b1b10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f544d1b1ca0"/>
        <function-ref name="getData" scoped="" ref="0x7f544d1b1e30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f544d1b0020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f544d1b01b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f544d1b0440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f544d1b05d0"/>
        <function-ref name="getIV" scoped="" ref="0x7f544d1b0760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f544d1b08f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f544d1b0a80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f544d1b0c10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f544d1b0da0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f544d1af020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f544d1af1b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f544d1af340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f544d1af4d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f544d1af660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f544d1af9f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f544d1afb80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f544d1afd10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f544d1ae020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f544d1ae1b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f544d1ae340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f544d1ae4d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f544d1ae660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f544d1ae7f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f544d1ae980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f544d1aeb10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f544d1aeca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f544d1aee30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f544d1ad020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f544d1ad1b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f544d1ad340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f544d1ad4d0"/>
        <function-ref name="setData" scoped="" ref="0x7f544d1ad660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f544d1ad7f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f544d1ad980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f544d1adb10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f544d1adca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f544d1ade30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f544d1ac020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f544d1ac5b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f544d1ac740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f544d1ac8d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f544d1aca60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f544d1acbf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f544d1acd80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f544d1ab020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f544d1ab1b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f544d1ab340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f544d1ab4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f544d1b4c10" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f544d1b4c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f544d1b3020"/>
        <function-ref name="txDone" scoped="" ref="0x7f544d1b31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f544d1ba340" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f544d1ba340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544d1ba6c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544d1ba850"/>
        <function-ref name="request" scoped="" ref="0x7f544d1ba9e0"/>
        <function-ref name="granted" scoped="" ref="0x7f544d1bab70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544d1bad00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f544d1b8020" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f544d1b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f544d1b83a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f544d1b8530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f544d1b86c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f544d1b8850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f544d1b89e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f544d1b8b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f544d1b8d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f544d1b7020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f544d1b71b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f544d1b7340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f544d1b74d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f544d1b7660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f544d1b77f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f544d1b7a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f544d1b7c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f544d1b7da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f544d1b6020"/>
        <function-ref name="isUart" scoped="" ref="0x7f544d1b61b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f544d1b6340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f544d1b64d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f544d1b6660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f544d1b67f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f544d1b6980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f544d1b6b10"/>
        <function-ref name="getMode" scoped="" ref="0x7f544d1b6ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f544d1b5220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f544d1b53b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f544d1b5540"/>
        <function-ref name="tx" scoped="" ref="0x7f544d1b56d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f544d1b5860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f544d1b59f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f544d1b5b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f544d1b5d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f544d1b4020"/>
        <function-ref name="rx" scoped="" ref="0x7f544d1b41b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f544d1b4340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f544d1b44d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f544d1b4660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f544d1b47f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f544d1b4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f544d1b97c0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d1b97c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f544d1b9b40"/>
        <function-ref name="userId" scoped="" ref="0x7f544d1b9cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f544da132c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f544da132c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f544da13640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f544da137d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f544da128a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544da128a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f544da12c20"/>
        <function-ref name="configure" scoped="" ref="0x7f544da12db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f544da174d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f544da174d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f544da17850"/>
        <function-ref name="txDone" scoped="" ref="0x7f544da179e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f544da15020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f544da15020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544da153a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544da15530"/>
        <function-ref name="request" scoped="" ref="0x7f544da156c0"/>
        <function-ref name="granted" scoped="" ref="0x7f544da15850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544da159e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f544da163f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f544da163f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544da16770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f544da13ad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544da13ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f544da13e50"/>
        <function-ref name="userId" scoped="" ref="0x7f544da12020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f544d9fdbf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d9fdbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f544d9fc020"/>
        <function-ref name="userId" scoped="" ref="0x7f544d9fc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f544da10d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f544da10d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f544da0f180"/>
        <function-ref name="txDone" scoped="" ref="0x7f544da0f310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f544d9fd5e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f544d9fd5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544d9fd960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f544da0f710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f544da0f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f544da0fab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f544da0fd80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f544da0fd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f544d9fd180"/>
        <function-ref name="txDone" scoped="" ref="0x7f544d9fd310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f544d982020" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d982020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f544d9823c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f544d982550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f544d981cd0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544d981cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f544d9800a0"/>
        <function-ref name="configure" scoped="" ref="0x7f544d980230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f544d9827a0" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f544d9827a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544d982b20"/>
        <function-ref name="requested" scoped="" ref="0x7f544d982cb0"/>
        <function-ref name="granted" scoped="" ref="0x7f544d982e40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544d981020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f544d9811b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f544d983210" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f544d983210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544d9835b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544d983740"/>
        <function-ref name="request" scoped="" ref="0x7f544d9838d0"/>
        <function-ref name="granted" scoped="" ref="0x7f544d983a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544d983bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f544d981400" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d981400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f544d981780"/>
        <function-ref name="userId" scoped="" ref="0x7f544d981910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544d11dc00" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544d11dc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544d11c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f544d11c2b0" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f544d11c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f544d11c630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f544d11c7c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f544d11c950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f544d11cae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f544d1193a0" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f544d1193a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f544d119740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f544d1198d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f544d117210" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f544d117210"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f544d1175b0"/>
        <function-ref name="configure" scoped="" ref="0x7f544d117740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f544d1179d0" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f544d1179d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f544d117d50"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f544d115020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f544d1151b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f544d115340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f544d119b20" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f544d119b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544d118020"/>
        <function-ref name="requested" scoped="" ref="0x7f544d1181b0"/>
        <function-ref name="granted" scoped="" ref="0x7f544d118340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544d1184d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f544d118660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f544d115590" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f544d115590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f544d115910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f544d115aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f544d115c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f544d115dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f544d114020"/>
        <function-ref name="get" scoped="" ref="0x7f544d1141b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f544d114340"/>
        <function-ref name="led0On" scoped="" ref="0x7f544d114980"/>
        <function-ref name="set" scoped="" ref="0x7f544d114660"/>
        <function-ref name="led2On" scoped="" ref="0x7f544d1144d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f544d1147f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f544d11a4d0" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f544d11a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544d11a870"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544d11aa00"/>
        <function-ref name="request" scoped="" ref="0x7f544d11ab90"/>
        <function-ref name="granted" scoped="" ref="0x7f544d11ad20"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544d119020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f544d1188b0" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f544d1188b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f544d118c30"/>
        <function-ref name="userId" scoped="" ref="0x7f544d118dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f544d114c50" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f544d114c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544d113020"/>
        <function-ref name="runTask" scoped="" ref="0x7f544d1131b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f544d97ad70" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f544d97ad70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f544d976180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f544d976310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f544d9764a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f544d976630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f544d9767c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f544d976950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f544d976ae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f544d976c70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544d976e00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f544d975020"/>
        <function-ref name="getData" scoped="" ref="0x7f544d9751b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f544d975340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f544d9754d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f544d975760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f544d9758f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f544d975a80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f544d975c10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f544d975da0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f544d974020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f544d9741b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f544d974340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f544d9744d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f544d974660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f544d9747f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f544d974980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f544d974d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f544d973020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f544d9731b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f544d973340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f544d9734d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f544d973660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f544d9737f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f544d973980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f544d973b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f544d973ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f544d973e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f544d972020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f544d9721b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f544d972340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f544d9724d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f544d972660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f544d9727f0"/>
        <function-ref name="setData" scoped="" ref="0x7f544d972980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f544d972b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f544d972ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f544d972e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f544d971020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f544d9711b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f544d971340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f544d9718d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f544d971a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f544d971bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f544d971d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f544d970020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f544d9701b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f544d970340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f544d9704d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f544d970660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f544d9707f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f544d966700" loc="41:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f544d966700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f544d966a80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f544d966c10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f544d966da0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f544d965020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f544d9651b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f544d965340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f544d9654d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f544d965660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f544d9657f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f544d965980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f544d965b10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f544d965ca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f544d965e30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f544d964120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f544d9642b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f544d964440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f544d9645d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f544d964760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f544d9648f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f544d964a80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f544d964c10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f544d964da0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f544d963020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f544d9631b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544d963340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f544d9636d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f544d963860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f544d9639f0"/>
        <function-ref name="tx" scoped="" ref="0x7f544d963b80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f544d963d10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f544d962020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f544d9621b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f544d962340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f544d9624d0"/>
        <function-ref name="rx" scoped="" ref="0x7f544d962660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f544d9627f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f544d962980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f544d962b10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f544d962ca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f544d962e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f544d95f1f0" loc="43:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f544d95f1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544d95f570"/>
        <function-ref name="isInput" scoped="" ref="0x7f544d95f700"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544d95f890"/>
        <function-ref name="toggle" scoped="" ref="0x7f544d95fa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544d95fbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544d95fd40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544d95e020"/>
        <function-ref name="get" scoped="" ref="0x7f544d95e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544d95e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544d95e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f544d95e660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544d95e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544d95e980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544d95ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f544d95eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f544d96f940" loc="39:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f544d96f940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f544d96fcc0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f544d96fe50"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f544d96c020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f544d96c1b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f544d96c340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f544d96c4d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f544d96c660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f544d96c7f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544d96c980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f544d96cb10"/>
        <function-ref name="getData" scoped="" ref="0x7f544d96cca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f544d96ce30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f544d96b020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f544d96b2b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f544d96b440"/>
        <function-ref name="getIV" scoped="" ref="0x7f544d96b5d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f544d96b760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f544d96b8f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f544d96ba80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f544d96bc10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f544d96bda0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f544d96a020"/>
        <function-ref name="isI2C" scoped="" ref="0x7f544d96a1b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f544d96a340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f544d96a4d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f544d96a860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f544d96a9f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f544d96ab80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f544d96ad10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f544d969020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f544d9691b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f544d969340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f544d9694d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f544d969660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f544d9697f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f544d969980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f544d969b10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f544d969ca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f544d969e30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f544d968020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f544d9681b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f544d968340"/>
        <function-ref name="setData" scoped="" ref="0x7f544d9684d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f544d968660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f544d9687f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f544d968980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f544d968b10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f544d968ca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f544d968e30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f544d967420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f544d9675b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f544d967740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f544d9678d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f544d967a60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f544d967bf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f544d967d80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f544d966020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f544d9661b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f544d966340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f544d961250" loc="42:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f544d961250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f544d9615d0"/>
        <function-ref name="isInput" scoped="" ref="0x7f544d961760"/>
        <function-ref name="setResistor" scoped="" ref="0x7f544d9618f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f544d961a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f544d961c10"/>
        <function-ref name="getResistor" scoped="" ref="0x7f544d961da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f544d960020"/>
        <function-ref name="get" scoped="" ref="0x7f544d9601b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f544d960340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f544d9604d0"/>
        <function-ref name="set" scoped="" ref="0x7f544d960660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f544d9607f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f544d960980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f544d960c10"/>
        <function-ref name="clr" scoped="" ref="0x7f544d960da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f544d8ad920" loc="37:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f544d8ad920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f544d8adca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f544d8ac020" loc="38:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f544d8ac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f544d8ac3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f544d8ac530"/>
        <function-ref name="request" scoped="" ref="0x7f544d8ac6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f544d8ac850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f544d8ac9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f544d8ad0c0" loc="36:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f544d8ad0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f544d8ad440"/>
        <function-ref name="stop" scoped="" ref="0x7f544d8ad5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f544d89aa30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f544d89aa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f544d89adb0"/>
        <function-ref name="offset" scoped="" ref="0x7f544d897020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f544d8971b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f544d888640" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TestSerialAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544d888640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d6f5c40"/>
        <function-ref name="fired" scoped="" ref="0x7f544d6f71e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f544d6f5020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f544d6f7ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f544d6f4590"/>
        <function-ref name="gett0" scoped="" ref="0x7f544d6f4110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d6f7660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f544d6f8390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f544d6f5630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f544d6f8860"/>
        <function-ref name="stop" scoped="" ref="0x7f544d6f8d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f544d87f2c0" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f544d87f2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d87b870"/>
        <function-ref name="fired" scoped="" ref="0x7f544d87ee40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f544d87dc00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f544d87d780"/>
        <function-ref name="getdt" scoped="" ref="0x7f544d87a1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f544d87bcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d87d300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f544d87e020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f544d87b260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f544d87e4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f544d87e9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f544d876e20" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f544d876e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d872390"/>
        <function-ref name="fired" scoped="" ref="0x7f544d874970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f544d873720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f544d8732a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f544d872c90"/>
        <function-ref name="gett0" scoped="" ref="0x7f544d872810"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d874df0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f544d875a80"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f544d873d30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f544d874020"/>
        <function-ref name="stop" scoped="" ref="0x7f544d8744f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f544d86d750" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f544d86d750"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544d86f3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544d876080" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544d876080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544d876400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f544d794020" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f544d794020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d791870"/>
        <function-ref name="fired" scoped="" ref="0x7f544d793840"/>
        <function-ref name="startAt" scoped="" ref="0x7f544d791220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d793d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f544d791d30"/>
        <function-ref name="start" scoped="" ref="0x7f544d794e30"/>
        <function-ref name="stop" scoped="" ref="0x7f544d793380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544d795760" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544d795760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544d795ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f544d0d7360" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f544d0d7360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d0d4ba0"/>
        <function-ref name="fired" scoped="" ref="0x7f544d0d6b80"/>
        <function-ref name="startAt" scoped="" ref="0x7f544d0d4550"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d0d4090"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f544d0d3090"/>
        <function-ref name="start" scoped="" ref="0x7f544d0d61b0"/>
        <function-ref name="stop" scoped="" ref="0x7f544d0d66c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544d0d8ab0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544d0d8ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544d0d8e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f544d0bea80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d0bea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544d0bee00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544d0bd020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544d0bd1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544d0bd340"/>
        <function-ref name="fired" scoped="" ref="0x7f544d0bd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f544d0c0020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d0c0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544d0c03a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544d0c0530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544d0c06c0"/>
        <function-ref name="get" scoped="" ref="0x7f544d0c0850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544d0c09e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544d0c0b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f544d0c0d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544d0bf020"/>
        <function-ref name="overflow" scoped="" ref="0x7f544d0bf1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544d0bf340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544d0bf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f544d0bf760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d0bf760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544d0bfae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f544d0bfc70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544d0bfe00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544d0be020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544d0be1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544d0be340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544d0be4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544d0be660"/>
        <function-ref name="setControl" scoped="" ref="0x7f544d0be7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f544d849210" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d849210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544d849590"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544d849720"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544d8498b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544d849a40"/>
        <function-ref name="fired" scoped="" ref="0x7f544d849bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f544d850bf0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d850bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544d84d020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544d84d1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544d84d340"/>
        <function-ref name="get" scoped="" ref="0x7f544d84d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544d84d660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544d84d7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f544d84d980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544d84db10"/>
        <function-ref name="overflow" scoped="" ref="0x7f544d84dca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f544d84de30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544d84c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f544d84c8b0" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d84c8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544d84cc30"/>
        <function-ref name="getControl" scoped="" ref="0x7f544d84cdc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544d84a020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544d84a1b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544d84a340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544d84a4d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544d84a660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544d84a7f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f544d84a980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f544d0b4760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f544d0b4760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f544d0b4ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f544d0b4c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f544d0b4e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f544d0b3020"/>
        <function-ref name="fired" scoped="" ref="0x7f544d0b31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f544d0b8dd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f544d0b8dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f544d0b6180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f544d0b6310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544d0b64a0"/>
        <function-ref name="get" scoped="" ref="0x7f544d0b6630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544d0b67c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544d0b6950"/>
        <function-ref name="getMode" scoped="" ref="0x7f544d0b6ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544d0b6c70"/>
        <function-ref name="overflow" scoped="" ref="0x7f544d0b6e00"/>
        <function-ref name="setMode" scoped="" ref="0x7f544d0b5020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f544d0b51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f544d0bbbf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f544d0bbbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d0b84e0"/>
        <function-ref name="fired" scoped="" ref="0x7f544d0b94e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f544d0b9e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d0b99a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f544d0b89a0"/>
        <function-ref name="start" scoped="" ref="0x7f544d0baa80"/>
        <function-ref name="stop" scoped="" ref="0x7f544d0b9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f544d0bb360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f544d0bb360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f544d0bb6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f544d0b5440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f544d0b5440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f544d0b57c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f544d0b5950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f544d0b5ae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f544d0b5c70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f544d0b5e00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f544d0b4020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f544d0b41b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f544d0b4340"/>
        <function-ref name="setControl" scoped="" ref="0x7f544d0b44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f544d7f6020" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f544d7f6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544d7f6e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544d7f5800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544d7f5340"/>
        <function-ref name="overflow" scoped="" ref="0x7f544d7f5cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f544d7d3950" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f544d7d3950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544d7d2780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544d7d1150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544d7d2c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f544d7d1610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f544d7f05f0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f544d7f05f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544d7d5430"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544d7d5db0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544d7d58f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f544d7d32a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f544d0d15f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f544d0d15f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d0cfe50"/>
        <function-ref name="fired" scoped="" ref="0x7f544d0d0e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f544d0cf800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d0cf340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f544d0cd340"/>
        <function-ref name="start" scoped="" ref="0x7f544d0d0430"/>
        <function-ref name="stop" scoped="" ref="0x7f544d0d0940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f544d0cbd20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f544d0cbd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31d2d0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f544e31d640"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d0c7670"/>
        <function-ref name="fired" scoped="" ref="0x7f544d0c9550"/>
        <function-ref name="startAt" scoped="" ref="0x7f544d0c7020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d0c9a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f544d0c7b30"/>
        <function-ref name="start" scoped="" ref="0x7f544d0cab60"/>
        <function-ref name="stop" scoped="" ref="0x7f544d0c9090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f544d0cd9b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f544d0cd9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544d0cc7e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544d0cb1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544d0ccca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f544d0cb670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f544d75f490" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f544d75f490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544d75f810"/>
        <function-ref name="runTask" scoped="" ref="0x7f544d75f9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f544d7621d0" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f544d7621d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d760b30"/>
        <function-ref name="fired" scoped="" ref="0x7f544d7619f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f544d7604e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d760020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f544d75f020"/>
        <function-ref name="start" scoped="" ref="0x7f544d761020"/>
        <function-ref name="stop" scoped="" ref="0x7f544d761530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f544d769cf0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544d769cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d764220"/>
        <function-ref name="fired" scoped="" ref="0x7f544d7667c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f544d765590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f544d765110"/>
        <function-ref name="getdt" scoped="" ref="0x7f544d764b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f544d7646a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d766c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f544d767940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f544d765ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f544d767e10"/>
        <function-ref name="stop" scoped="" ref="0x7f544d766340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f544d70fe80" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f544d70fe80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f544d70d220"/>
        <function-ref name="runTask" scoped="" ref="0x7f544d70d3b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f544d714c30" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f544d714c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d70f110"/>
        <function-ref name="fired" scoped="" ref="0x7f544d7116a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f544d7104a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f544d710020"/>
        <function-ref name="getdt" scoped="" ref="0x7f544d70fa10"/>
        <function-ref name="gett0" scoped="" ref="0x7f544d70f590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d711b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f544d712860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f544d710ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f544d712d30"/>
        <function-ref name="stop" scoped="" ref="0x7f544d711220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f544d71a690" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f544d71a690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f544d715cf0"/>
        <function-ref name="fired" scoped="" ref="0x7f544d717260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f544d715090"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f544d717ba0"/>
        <function-ref name="getdt" scoped="" ref="0x7f544d714680"/>
        <function-ref name="gett0" scoped="" ref="0x7f544d7141e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f544d717700"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f544d718390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f544d7156c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f544d718880"/>
        <function-ref name="stop" scoped="" ref="0x7f544d718d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f544d70bcf0" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f544d70bcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544d70a980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f544d700020" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f544d700020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f544e31e6f0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f544e31ee60"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f544d700e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f544d6ff800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f544d6ff340"/>
        <function-ref name="overflow" scoped="" ref="0x7f544d6ffcc0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f544e314d30" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f544e2ab020" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f544e2ca9d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f544e2ad5e0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f544e2ca9d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f544e2ad960" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544e2adc90" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f544e2a5660" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544e2a5060" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544e2a5390" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f544e2a6790" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f544e2aa390" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544e2aa110" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f544e2a88b0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544e2a82d0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f544e2a8620" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f544e296d30" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544e296ab0" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f544e292de0" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544e292b60" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f544e28d2f0" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544e28fb60" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544e28d020" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f544e28f270" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f544e2902f0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544e293cf0" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544e290060" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <function event="" provided="0" name="receive" ref="0x7f544e2b9bf0" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
              <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544e2b9290" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f544e2b95e0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544e2b9910" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f544e309a10" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f544e309a10"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f544e29b7c0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f544e29f020" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f544e29eda0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f544e29e7d0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f544e29eb10" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f544e29e020" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f544e29a8a0" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f544e29a020" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f544e29f800" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f544e2a25b0" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f544e2a2330" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f544e29ddc0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f544e29d7f0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f544e29db30" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f544e2a00b0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f544e2a2df0" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f544e2a08b0" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f544e311b20" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f544e310350" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f544e310b30" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f544e30eb00" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f544e30c2b0" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f544e30cac0" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f544e30e350" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f544e30b670" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f544e30b3f0" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f544e311390" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f544e30d350" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f544e30dae0" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f544e317af0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f544e317870" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f544e315020" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f544e316d70" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f544e31be50" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f544e316390" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f544e269a60" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f544e2681f0" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f544e26abb0" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f544e267070" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f544e269350" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f544e268910" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f544e26fdd0" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f544e26a4c0" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f544e26e2b0" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f544e23dc20" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f544e23c390" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f544e238c10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f544e238990" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f544e23e4a0" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f544e23b270" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f544e237520" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f544e23cad0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f544e23d480" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f544e239940" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f544e23ec40" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f544e2405f0" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f544e23b9f0" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f544e238120" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f544e2391f0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f544e240d20" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f544e057740" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f544e05a990" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f544e057020" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f544e05a2b0" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f544e059120" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f544e05b4d0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f544e05bbb0" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f544e059840" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f544e5fd020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f544e8be3a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f544e005020" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f544e006cc0" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f544e009390" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f544e04fb60"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f544e04e650"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f544e005890" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f544e0037b0" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f544e006560" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f544e003020" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f544e009b30" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f544e007350" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f544e007da0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f544e04fb60"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f544e04e650"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f544e007b20" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f544e04fb60"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f544e04e650"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f544dff70e0" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f544dff5730" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f544dff54b0" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f544dff32e0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f544dff3060" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f544dff6ca0" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f544dff63e0" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f544dff7a90" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f544dff7810" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f544dffe3e0" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f544dffed60" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f544dffeae0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f544dffd790" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f544dffd510" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f544dffc2a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f544dffc020" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f544dffc990" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f544e00e810" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f544e00c2a0" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f544e00c020" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f544e00d020" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f544e014aa0" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f544e00d760" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f544e0119b0" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f544e00e120" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f544e011270" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f544e0100e0" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f544e0109f0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f544e010770" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f544e00ccb0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f544e00ca30" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f544dfd19f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f544e34f7f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f544e34c020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f544e34f020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f544e7d7810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f544e97d020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f544e97c020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f544e97d790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f544e971270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f544e971ac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f544de14ad0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544de14850" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f544de12cd0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544de12a50" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f544de11020" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544de13ce0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f544de19d30" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f544e2ca5f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f544de19ab0" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f544de24870" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f544e2ca9d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f544de245f0" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f544de28ca0" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f544e2ca9d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f544de25780" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f544e2ca9d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f544de25500" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f544de20360" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f544e2ca9d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f544de22d30" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f544de200d0" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f544e2ca9d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f544de21c70" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f544e2ca9d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f544de21690" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f544de219e0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f544e2ca9d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f544de1d810" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f544e2ca210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f544de1d590" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f544de1bb90" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f544e2ca210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f544de1b5e0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f544de1b900" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f544e2ca210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f544de1f600" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f544de1f380" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f544de182f0" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f544e2ca5f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f544de1acf0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f544de18060" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f544e2ca5f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f544de17190" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f544e2ca5f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f544de04850" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544de04290" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544de045c0" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f544ddfe020" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544ddff890" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544ddffbc0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f544ddff020" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f544de02b50" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544de028d0" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f544de00050" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544de01a40" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f544de01d90" loc="100:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f544dd9fb00" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544dd9f4f0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f544dd9f870" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f544dda4c70" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f544dda1b60" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f544dda1560" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f544e2bc3c0"/>
                <typename><typedef-ref name="message_t" ref="0x7f544e2baa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f544dda18d0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f544dd82390" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f544dd82ba0" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f544dd809e0" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f544dd80270" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f544dd8b270" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f544dd896c0" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f544dd87390" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f544dd87110" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f544dd88020" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f544dd8bde0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f544dd8bb60" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f544dd87bf0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f544dd888d0" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f544dd93d70" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f544dd91750" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f544dd93400" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f544dd93180" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f544dd90350" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f544dd900d0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f544dd8e020" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f544dd8ec40" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f544dd8e9c0" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f544dd8d730" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f544dd8d4b0" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f544dc58c40" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f544dc58670" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544dc589b0" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f544dc52a70" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f544dc527f0" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f544dc51890" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f544dc512c0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544dc51600" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f544dc54610" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f544dc502c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f544dc4f820" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544dc4fb60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f544dc50020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f544dc52020" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f544dc56610" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f544dc55bd0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f544dc56020" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f544dc56370" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f544dc2f5b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f544dc2f330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f544dc2fdf0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f544dc2ecf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f544dc2e700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f544dc2ea60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f544dc2cb50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f544dbd3270" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f544dbd3ba0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f544dbce070" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f544dbf6450"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f544dbf6870"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f544dbd69c0" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f544dbd7990" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f544dbd7020" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f544dbd61f0" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f544dbd5470" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f544dbc7510" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f544dbcbcb0" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f544dbbf2a0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f544dbbf020" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f544dbc0780" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f544db9aaf0" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f544dba5790" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f544dbb2530" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f544dc26360"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f544dc26ba0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f544dbb22b0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f544dc26360"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f544dc26ba0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f544dba8870" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f544dbafa40" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f544dc212d0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f544dc21b10"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f544dbaf7c0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f544dc212d0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f544dc21b10"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f544db9fe70" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f544db9b480" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f544dbaf020" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f544dc24230"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f544dc249c0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f544dbae270" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f544dc212d0"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f544dc21b10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f544dbaa020" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f544dbacd30" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f544dbac610" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f544db9f740" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f544dbb1780" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f544dc24230"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f544dc249c0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f544dbb1500" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f544dc24230"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f544dc249c0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f544dbad420" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f544db9e5d0" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f544dbade00" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f544dbadb80" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f544dba9910" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f544dba80e0" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f544dba0840" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f544dba3790" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f544dba67e0" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f544db9f020" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f544dba4020" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f544db9ecf0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f544dbaa800" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f544dc30320"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f544dc28a10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f544db9c4c0" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f544db9a350" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f544dbaec10" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f544dbae990" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f544db994d0" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f544db99250" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f544dbb2d10" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f544dc26360"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f544dc26ba0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f544dba6020" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f544dba4770" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f544dba0020" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f544dbf6450"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f544dbf6870"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f544dba1cf0" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f544dbf6450"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f544dbf6870"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f544dba12a0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f544dc0a420"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f544dc0a840"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f544dba1020" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f544dc0a420"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f544dc0a840"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f544db99d90" loc="231:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f544db9ccb0" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f544dba9070" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f544db9bbe0" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f544dba3020" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f544dba5020" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f544db91410" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f544db91410"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f544db91650" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544db91650"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f544db90020" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544db91650"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f544db8f120" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f544db908a0" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f544db8f880" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f544db1b930" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f544daf1780" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f544db04c90" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f544daf8020" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f544daf9ca0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f544db0c390" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f544daf57a0" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f544dafd020" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f544db06da0" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f544db03b70" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f544db07d40" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f544db07ac0" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f544db08270" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f544db01900" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f544daf6020" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f544daf1020" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f544daf9560" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f544daec1f0" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f544dae9880" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f544db0b270" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f544db01190" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f544daffa90" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f544db06650" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f544db0d190" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f544dafad40" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f544dafaac0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f544db119f0" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f544daf5020" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f544daf0020" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f544daeb9a0" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f544dae9120" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f544daf4790" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f544daf0750" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f544daf87b0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f544daee1f0" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f544db0b990" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f544dafc1f0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f544daef630" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f544daf3790" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f544dafe760" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f544dafe4e0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f544daea190" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f544dafa390" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f544daf4020" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f544db0dc10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f544dbe3240"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f544dbe3660"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f544db0d990" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f544dbe3240"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f544dbe3660"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f544db02a00" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f544db0aa80" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f544db0a800" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f544daff2a0" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f544daff020" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f544daee9c0" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f544db073b0" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f544db0a120" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f544dafcbb0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f544dafc930" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f544f357520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f544db0cac0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f544daf0e70" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f544daf3020" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f544daf6790" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f544dafd9f0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f544dafd770" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f544db022b0" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f544db04530" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f544daea900" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f544db08bf0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f544db08970" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f544daec9b0" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f544db03420" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f544daeb1f0" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f544da28460" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f544da28cc0" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f544f357160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f544d9f2e00" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f544d9f0020" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f544d9f2570" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f544d9f16d0" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f544d9f0950" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f544d9e4020" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f544e978c20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f544d9eb090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f544d9e5d20" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f544d9eb090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f544d9e6020" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f544d9e6b20" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f544d9eb090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f544d9e68a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f544d9eb090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f544d9e5470" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f544d9eb090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f544d870910" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f544d870910"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f544d86d270" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f544f357920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f544d869c70" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f544d869c70"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f544d866020" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544d866020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f544d863c50" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544d866020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f544d865ba0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f544d8632b0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544d866020"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544d866020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f544d864bd0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544d866020"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f544d863020" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544d866020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f544d8643b0" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f544e981090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f544d861480" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544d866020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f544d866b80" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544d866020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f544d866900" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f544d866020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f544d8653e0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
