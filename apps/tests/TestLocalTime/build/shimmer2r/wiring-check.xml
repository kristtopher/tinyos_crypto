<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="64:TestLocalTimeAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fb47082c130"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fb470377aa0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7fb470377aa0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7fb4703737e0"/></to>
    </wire>
    <wire loc="65:TestLocalTimeAppC.nc">
      <from><interface-ref name="Control" scoped="" ref="0x7fb47083a460"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fb470376af0"/></to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fb470376af0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fb4702d38d0"/></to>
    </wire>
    <wire loc="66:TestLocalTimeAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fb4707cb5a0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fb470364b20"/>
      <arguments>
        <value cst="I:88">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:TestLocalTimeAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fb470830b50"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fb4707ac210"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fb4707ac210"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fb4707a59f0"/></to>
    </wire>
    <wire loc="68:TestLocalTimeAppC.nc">
      <from><interface-ref name="MilliTimer" scoped="" ref="0x7fb4707c3e50"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb46fd32640"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb46fd32640"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fb46fd292c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:TestLocalTimeAppC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fb4707bc750"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fb46fb9ec90"/></to>
    </wire>
    <wire loc="26:../../../tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fb46fb9ec90"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fb46fd1a2e0"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fb47077e2e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb4707a53f0"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fb4707a4060"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7fb4707a9b10"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7fb4707a9b10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fb47039e020"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fb4707a3340"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7fb470781e70"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7fb470781e70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fb47038ab90"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fb47079e660"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7fb47077f0f0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7fb47077f0f0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7fb470384710"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7fb4705c4800"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb47077e2e0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fb47038d2f0"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7fb470740810"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7fb470740810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47063de60"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fb470389de0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7fb47073c9a0"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7fb47073c9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470633460"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7fb470383930"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7fb47073a9a0"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7fb47073a9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47062fe00"/></to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7fb470769810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47069d740"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7fb470754810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47066d100"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7fb47070bca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47065e100"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7fb4706e6cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705d4740"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7fb470709cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47065ad10"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7fb470750810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470663740"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7fb4707279a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470604d10"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7fb4707179a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705dd100"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7fb470703cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470650100"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7fb4706f2cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705f0740"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7fb4706decc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705ce100"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7fb470763810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47068f740"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7fb470701cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47064cd10"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7fb47075f810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470685d10"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7fb47074a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470655740"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7fb4707369a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470625100"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7fb4707219a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705f5d10"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7fb4707119a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705ce100"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7fb47076d810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4706a6100"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7fb470758810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470677d80"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7fb470744810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470647740"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7fb47070dcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47065e100"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7fb4706eccb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705e2740"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7fb4706e0cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705ce100"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7fb4706f8cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470608100"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7fb47072b9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47060d740"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7fb47071b9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705e7d10"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7fb4706eacb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705dd100"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7fb4706fecb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470616100"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7fb470767810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470698100"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7fb470752810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470669d10"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7fb47071f9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705f0740"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7fb47074e810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47065e100"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7fb4707259a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705ff740"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7fb4707159a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705d9d10"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7fb4706facc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47060d740"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7fb47076f870"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4706d7d10"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7fb47075c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470680740"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7fb470748810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470650100"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7fb4707349a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470621d10"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7fb4706f6cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470647740"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7fb4706f0cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705eb100"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7fb4706e4cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705ce100"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7fb4707309a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470616100"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7fb4706f4cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470642100"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7fb47076b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4706a2d10"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7fb470756810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470672740"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7fb470742810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470642100"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7fb4706fccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470612d10"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7fb4706e8cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705d9d10"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7fb47073e9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4706389f0"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7fb4707299a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470608100"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7fb4707199a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705e2740"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7fb470765810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470694d10"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7fb47071d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705eb100"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7fb470761810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47068a100"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7fb47074c810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47065ad10"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7fb4707389a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47062a740"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7fb4707239a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705fa100"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7fb4707139a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705d4740"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7fb470779810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4706ab740"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7fb47075a810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47067b100"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7fb470746810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47064cd10"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7fb4707329a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb47061c740"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7fb470705ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470655740"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7fb4706eecb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705e7d10"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7fb470707cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470655740"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7fb47072d9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470612d10"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7fb4706e2cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705d4740"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7fb4706dccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb4705f5d10"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7fb47070f9f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7fb470663740"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fb4705cb4f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb4705c72f0"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fb4705c7a00"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7fb4705c5500"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7fb4705c5500"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb470598440"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7fb4705c4120"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb4705be080"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fb470598440"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb47057f940"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fb47058f9e0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fb47057e020"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7fb470b224c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7fb47057d360"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7fb47053a5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb4704776d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7fb470527020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb470470b30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7fb470531700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb47047c160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7fb470515a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb470456cb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7fb470537aa0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb47047e480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7fb47051b020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb470456020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7fb470512a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb47043fcb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7fb4705225a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb470450220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7fb47053bb10"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb4704cd9d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7fb470517a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb4704652f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7fb47051d3e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb470466610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7fb4705265a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb470467220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7fb470530700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb4704757a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7fb470514a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb47044e2f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7fb470525be0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb4704606d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7fb470536890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb470476ac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7fb47054a060"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704dcc80"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7fb47051bda0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb47044f610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7fb4705410c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb47047f020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7fb470521a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb4704486d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7fb47052b6d0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb470485a90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7fb470516a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb47045e7a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7fb470533cf0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb470486de0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7fb47051c1f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb47045fac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7fb470513a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb4704467a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7fb4705230c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb470458b30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704d4c80"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7fb47051ab80"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb470447ac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7fb470518a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7fb47046ecb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7fb470519a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb47043f020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7fb47051e570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7fb47046e020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7fb47051f020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7fb470441b30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fb4704dac20"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704da5b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fb4704d82f0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7fb470439a90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fb4704d8940"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7fb470436260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb470484930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704dcc80"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb470482020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704da5b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb47047b020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704dcc80"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb47047a7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704da5b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb470474610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704dcc80"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb470473c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704da5b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7fb4704d2c20"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704d25b0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7fb4704d12f0"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7fb4704369f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7fb4704d1940"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7fb470435240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb47046cb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704d4c80"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb47046a2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704d25b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb470464160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704d4c80"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb4704637a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704d25b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb47045c610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704d4c80"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb47045bc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704d25b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb470455b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704d4c80"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb4704532f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704d25b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb47044d160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704d4c80"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb47044b7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704d25b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb470445610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704d4c80"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb470444c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704d25b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7fb47043eb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb4704d4c80"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7fb47043b2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7fb4704d25b0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fb4703741d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb46fd21080"/></to>
    </wire>
    <wire loc="103:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fb4703741d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb46f5c6920"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fb4703741d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb4702d3280"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fb470373e50"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fb470ea13a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7fb470ea13a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7fb470879c30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7fb4703708b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb4705cb4f0"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7fb47036f020"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7fb4703741d0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470878b70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7fb4708712c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7fb470e933b0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7fb4702d38d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7fb4702c2810"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7fb470364b20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7fb4702dc110"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7fb4703525f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7fb4702daa40"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fb47035cb10"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fb4702dce70"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fb47033c9f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fb4702d9720"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7fb4703424e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7fb4702db490"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fb4702d3280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb4702c21c0"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fb4702cedc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fb470353490"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7fb4702d8120"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fb4702d1480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7fb4702d8d70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fb4702d2940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fb4702ce4a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7fb46fd45a30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7fb4702d1480"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7fb470191830"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7fb4702d2940"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7fb470191110"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7fb470190760"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fb4702ce4a0"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fb4702b7020"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fb4702cedc0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fb47018d590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fb4702cedc0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fb470185cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fb4702cedc0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fb47018f0e0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fb4702b8c40"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7fb47018f9d0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7fb4702bc7d0"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7fb4702ba020"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7fb470189b60"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7fb4702b00f0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fb47015f0c0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7fb47015f0c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7fb46fd570c0"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fb47017bd20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fb47015f8d0"/></to>
    </wire>
    <wire loc="45:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fb47015f8d0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fb46fd5e440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7fb47025be40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7fb470292d10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7fb47025d400"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fb4702560c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7fb47018cc50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7fb47018b480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fb47015d020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fb46fd5c440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fb46fd5c440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fb4700f1210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fb46fd5e440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fb4700f5b50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb46fd5b020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb46fd57920"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fb46fd56020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fb46fd5f020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fb46fd5f020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fb4700f7320"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46fd5fc70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46f6625d0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46f6625d0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46febe2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb4700ef600"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb46fd5b020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46f655a80"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb4700f3dd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fb4700f0370"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fb46f663880"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fb46f663880"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fb46febf020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fb4700eabe0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fb46f65c020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fb46f65c020"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fb46fec14d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb4700f3dd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb470062e70"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7fb4700f1210"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7fb47005f890"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7fb4700f5b50"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7fb470061790"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fb4700f7320"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fb4700620d0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb47005d3e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb4700ef600"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7fb47005e5b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7fb4700f0370"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7fb4700585b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7fb4700eabe0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7fb47005da50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fb47004eb60"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fb47004eb60"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fb470042360"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fb470057020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fb46fefd020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fb46fefd020"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fb46fef7020"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7fb470055120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7fb4707ac210"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fb470046bd0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fb47003d970"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fb4700476d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fb47003d020"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fb47000fa20"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7fb47070dcc0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7fb47000d990"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7fb470709cc0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fb47000b990"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7fb470707cc0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7fb470009990"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7fb470701cc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7fb470007990"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7fb470703cc0"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7fb470014bc0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7fb46fe1a940"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fb46fef7020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fb46fef30a0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fee22c0"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fb46f65c7c0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fb46fec03f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fb46f65cdd0"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fb46fe24d70"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fb46fe24d70"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7fb46fe1a940"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fb46f6615a0"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fb47004eb60"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46f662d70"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46febead0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46febead0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46fe2b400"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46febd8a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46f655a80"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46febe2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46fe2d020"/></to>
    </wire>
    <wire loc="106:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46fe2d020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46f5c1020"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7fb46fec14d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7fb46febad60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fb46febf020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fb46fe2e210"/></to>
    </wire>
    <wire loc="105:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7fb46fe2e210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7fb46f5c2210"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7fb46fec03f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7fb46feb9710"/></to>
    </wire>
    <wire loc="108:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46fe2b400"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46f5c0400"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46fe2bcd0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46febd8a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46fea8bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46fe2b400"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7fb46feb9d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fb4700476d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7fb46fea85e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fb470046bd0"/></to>
    </wire>
    <wire loc="107:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fb46fe2d7a0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fb46f5c17a0"/></to>
    </wire>
    <wire loc="109:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46f5c0cf0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46fe2bcd0"/></to>
    </wire>
    <wire loc="111:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7fb46f5bf500"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7fb46f5c5020"/></to>
    </wire>
    <wire loc="75:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7fb46f5bd7a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7fb46fe11700"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7fb470042360"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7fb46fe0c250"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7fb47070dcc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7fb46fe0a1f0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7fb470707cc0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fb46fd292c0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7fb46fd21e20"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7fb46fd21e20"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb46fbc5690"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fb46fd21080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb46fc41760"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7fb46fd1a2e0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7fb46fbb7cf0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fb46fc41760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb46f580a10"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7fb46fbbfc30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7fb46fc14cf0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fb46fc0e1d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fb46fc3f020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fb46fc3f020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fb46f5795f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fb46fbac020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fb46fca1020"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fb46fca1020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fb46fc9c5f0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7fb46f580a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7fb46f563360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7fb46f573d20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fb46f57f2a0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7fb46f57f2a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7fb46f563bf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7fb46f5769b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7fb46fca1020"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46f560dd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46f569020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46f569020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fcfbbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46f55e440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46f568760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46f568760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46fcf78b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46f55d760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46f567a80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46f567a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46fcf4210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fcfbbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46fcf78b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7fb470527020"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46fcf4210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7fb47051e570"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fcfbbf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46fcf78b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7fb4705265a0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46fcf4210"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7fb47051d3e0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fcfbbf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46fcf78b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7fb470525be0"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46fcf4210"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7fb47051c1f0"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fcfbbf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46fcf78b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7fb4705230c0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46fcf4210"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7fb47051b020"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fcfbbf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46fcf78b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7fb4705225a0"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46fcf4210"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7fb47051bda0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fcfbbf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46fcf78b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7fb470521a50"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46fcf4210"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7fb47051ab80"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fcfbbf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46fcf78b0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7fb47051f020"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46fcf4210"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7fb470519a20"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7fb46fc7f950"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fb46fef7020"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7fb46fc0a490"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7fb46fbbae80"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="TestLocalTimeC" loc="59:TestLocalTimeC.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="37:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart0P.UartP" loc="41(Msp430Uart0P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.7 $ $Date: 2008-06-04 05:31:15 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.2 $ $Date: 2010/07/29 13:19:06 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="39(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2013/04/09 14:28:58 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ShimmerSerialP" loc="35:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestLocalTimeAppC.TimerMilliC" loc="44(TestLocalTimeAppC.TimerMilliC):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:../../../tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:../../../tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7fb4706d6190" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7fb4706d6540" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7fb4706d68f0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7fb4706d6ca0" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7fb4706d4060" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7fb47050d230" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7fb47050d5d0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7fb47050d980" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7fb47050dd00" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7fb47050b0d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7fb47050b440" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7fb47050b7d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7fb47050bb60" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7fb47050a020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7fb4704cf950" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7fb4704cfd20" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart0C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.7 $ $Date: 2008-06-04 05:31:15 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fb46fef2120" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fb46fef2120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7fb46fea25b0" loc="89:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7fb46fe955b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7fb46fe7cd80" loc="52:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7fb46fcd79c0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7fb46fcd79c0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fb46fc9eba0" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fb46fc9eba0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fb46fc9a3b0" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fb46fc9a3b0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fb46fc9a7a0" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fb46fc9a7a0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fb46fc99020" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fb46fc99020"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fb46fc993f0" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7fb46fc99bf0" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7fb46fc99bf0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7fb46fc78020" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7fb46fc78020"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7fb46fc787f0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7fb46fc787f0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7fb46fc78be0" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7fb46fc78be0"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7fb46fc77400" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7fb46fc77400"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7fb46fc777d0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fb46fc394f0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fb46fc394f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fb46fc08d70" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fb46fc08d70"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7fb46fc050d0" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fb46fbb51f0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fb46fbb51f0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Boot" ref="0x7fb47082c130" loc="63:TestLocalTimeC.nc">
      <component-ref qname="TestLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fb47082c130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fb47082c4b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7fb4707cb5a0" loc="64:TestLocalTimeC.nc">
      <component-ref qname="TestLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fb4707cb5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb4707cb920"/>
        <function-ref name="getPayload" scoped="" ref="0x7fb4707cbab0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fb4707cbc40"/>
        <function-ref name="cancel" scoped="" ref="0x7fb4707cbdd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb47082e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x7fb4707bc750" loc="66:TestLocalTimeC.nc">
      <component-ref qname="TestLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fb4707bc750"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb4707be3d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MilliTimer" ref="0x7fb4707c3e50" loc="65:TestLocalTimeC.nc">
      <component-ref qname="TestLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MilliTimer" scoped="" ref="0x7fb4707c3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb4707c0390"/>
        <function-ref name="fired" scoped="" ref="0x7fb4707d1970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fb4707c1720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fb4707c12a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fb4707c0c90"/>
        <function-ref name="gett0" scoped="" ref="0x7fb4707c0810"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb4707d1df0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fb47082da80"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fb4707c1d30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fb4707d1020"/>
        <function-ref name="stop" scoped="" ref="0x7fb4707d14f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fb470830b50" loc="62:TestLocalTimeC.nc">
      <component-ref qname="TestLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb470830b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb47083d020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb47083d1b0"/>
        <function-ref name="led1On" scoped="" ref="0x7fb47083d340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb47083d4d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb47083d660"/>
        <function-ref name="get" scoped="" ref="0x7fb47083d7f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb47083d980"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb470839020"/>
        <function-ref name="set" scoped="" ref="0x7fb47083db10"/>
        <function-ref name="led0On" scoped="" ref="0x7fb47083dca0"/>
        <function-ref name="led2On" scoped="" ref="0x7fb47083de30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Control" ref="0x7fb47083a460" loc="61:TestLocalTimeC.nc">
      <component-ref qname="TestLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb47083a460"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fb47083a7e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7fb47083a970"/>
        <function-ref name="start" scoped="" ref="0x7fb47083ab00"/>
        <function-ref name="stop" scoped="" ref="0x7fb47083ac90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fb4707ac210" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb4707ac210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb4707ac590"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb4707ac720"/>
        <function-ref name="led1On" scoped="" ref="0x7fb4707ac8b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb4707aca40"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb4707acbd0"/>
        <function-ref name="get" scoped="" ref="0x7fb4707acd60"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb4707ab020"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb4707ab660"/>
        <function-ref name="set" scoped="" ref="0x7fb4707ab1b0"/>
        <function-ref name="led0On" scoped="" ref="0x7fb4707ab340"/>
        <function-ref name="led2On" scoped="" ref="0x7fb4707ab4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7fb4707a4060" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fb4707a4060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4707a43e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4707a4570"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707a4700"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707a4890"/>
        <function-ref name="get" scoped="" ref="0x7fb4707a4a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707a4bb0"/>
        <function-ref name="set" scoped="" ref="0x7fb4707a4d40"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707a3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb4707a53f0" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb4707a53f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4707a5770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7fb4707a3340" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fb4707a3340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4707a36c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4707a3850"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707a39e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707a3b70"/>
        <function-ref name="get" scoped="" ref="0x7fb4707a3d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47079e020"/>
        <function-ref name="set" scoped="" ref="0x7fb47079e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47079e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7fb4707a59f0" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb4707a59f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb4707a5d70"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb4707a7020"/>
        <function-ref name="led1On" scoped="" ref="0x7fb4707a71b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb4707a7340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb4707a74d0"/>
        <function-ref name="get" scoped="" ref="0x7fb4707a7660"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb4707a77f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb4707a7e30"/>
        <function-ref name="set" scoped="" ref="0x7fb4707a7980"/>
        <function-ref name="led0On" scoped="" ref="0x7fb4707a7b10"/>
        <function-ref name="led2On" scoped="" ref="0x7fb4707a7ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7fb47079e660" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fb47079e660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47079e9e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47079eb70"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47079ed00"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47079d020"/>
        <function-ref name="get" scoped="" ref="0x7fb47079d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47079d340"/>
        <function-ref name="set" scoped="" ref="0x7fb47079d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47079d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7fb4707a9b10" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7fb4707a9b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470781020"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4707811b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470781340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707814d0"/>
        <function-ref name="get" scoped="" ref="0x7fb470781660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707817f0"/>
        <function-ref name="set" scoped="" ref="0x7fb470781980"/>
        <function-ref name="clr" scoped="" ref="0x7fb470781b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7fb470781e70" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7fb470781e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470780220"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4707803b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470780540"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707806d0"/>
        <function-ref name="get" scoped="" ref="0x7fb470780860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707809f0"/>
        <function-ref name="set" scoped="" ref="0x7fb470780b80"/>
        <function-ref name="clr" scoped="" ref="0x7fb470780d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7fb47077e2e0" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb47077e2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb47077e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7fb47077f0f0" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7fb47077f0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47077f470"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47077f600"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47077f790"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47077f920"/>
        <function-ref name="get" scoped="" ref="0x7fb47077fab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47077fc40"/>
        <function-ref name="set" scoped="" ref="0x7fb47077fdd0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47077e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7fb470769810" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7fb470769810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470769b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470769d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470768020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707681b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470768340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707684d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470768660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707687f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470768980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470768b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470768ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470768e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470767020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707672b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470767440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7fb470754810" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7fb470754810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470754b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470754d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470753020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707531b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470753340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707534d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470753660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707537f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470753980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470753b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470753ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470753e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470752020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707522b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470752440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7fb47070bca0" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7fb47070bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47070a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47070a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47070a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47070a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47070a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47070a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47070aa00"/>
        <function-ref name="get" scoped="" ref="0x7fb47070ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47070ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470709020"/>
        <function-ref name="set" scoped="" ref="0x7fb4707091b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470709340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707094d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470709760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707098f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7fb4706e6cb0" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7fb4706e6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706e50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706e5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706e53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706e5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706e56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706e5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706e5a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706e5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706e5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706e4020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706e41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706e4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706e44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706e4760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706e48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7fb470709cc0" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7fb470709cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4707080a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470708230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707083c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470708550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707086e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470708870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470708a00"/>
        <function-ref name="get" scoped="" ref="0x7fb470708b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470708d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470707020"/>
        <function-ref name="set" scoped="" ref="0x7fb4707071b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470707340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707074d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470707760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707078f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7fb470750810" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7fb470750810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470750b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470750d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47074f020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47074f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47074f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47074f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47074f660"/>
        <function-ref name="get" scoped="" ref="0x7fb47074f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47074f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47074fb10"/>
        <function-ref name="set" scoped="" ref="0x7fb47074fca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47074fe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47074e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47074e2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47074e440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7fb47073c9a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7fb47073c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47073cd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47073b020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47073b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47073b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47073b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47073b660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47073b7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47073b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47073bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47073bca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47073be30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47073a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47073a1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47073a440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47073a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7fb4707279a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7fb4707279a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470727d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470726020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707261b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470726340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707264d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470726660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707267f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470726980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470726b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470726ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470726e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470725020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707251b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470725440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707255d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7fb4707179a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7fb4707179a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470717d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470716020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707161b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470716340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707164d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470716660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707167f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470716980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470716b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470716ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470716e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470715020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707151b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470715440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707155d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7fb470703cc0" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7fb470703cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4707020a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470702230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707023c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470702550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707026e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470702870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470702a00"/>
        <function-ref name="get" scoped="" ref="0x7fb470702b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470702d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470701020"/>
        <function-ref name="set" scoped="" ref="0x7fb4707011b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470701340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707014d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470701760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707018f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7fb4706f2cb0" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7fb4706f2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706f10a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706f1230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706f13c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706f1550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706f16e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706f1870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706f1a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706f1b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706f1d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706f0020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706f01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706f0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706f04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706f0760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706f08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7fb4706decc0" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7fb4706decc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706dd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706dd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706dd3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706dd550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706dd6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706dd870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706dda00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706ddb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706ddd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706dc020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706dc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706dc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706dc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706dc760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706dc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7fb470763810" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7fb470763810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470763b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470763d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470762020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707621b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470762340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707624d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470762660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707627f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470762980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470762b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470762ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470762e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470761020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707612b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470761440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7fb470701cc0" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7fb470701cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706ff0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706ff230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706ff3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706ff550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706ff6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706ff870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706ffa00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706ffb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706ffd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706fe020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706fe1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706fe340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706fe4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706fe760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706fe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7fb47075f810" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7fb47075f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47075fb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47075fd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47075d020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47075d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47075d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47075d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47075d660"/>
        <function-ref name="get" scoped="" ref="0x7fb47075d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47075d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47075db10"/>
        <function-ref name="set" scoped="" ref="0x7fb47075dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47075de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47075c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47075c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47075c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7fb47074a810" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7fb47074a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47074ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47074ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470749020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707491b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470749340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707494d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470749660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707497f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470749980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470749b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470749ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470749e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470748020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707482b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470748440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7fb4707369a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7fb4707369a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470736d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470735020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707351b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470735340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707354d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470735660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707357f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470735980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470735b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470735ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470735e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470734020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707341b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470734440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707345d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7fb4707219a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7fb4707219a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470721d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470720020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707201b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470720340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707204d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470720660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707207f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470720980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470720b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470720ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470720e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47071f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47071f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47071f440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47071f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7fb4707119a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7fb4707119a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470711d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470710020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707101b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470710340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707104d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470710660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707107f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470710980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470710b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470710ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470710e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47070f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47070f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47070f440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47070f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7fb47076d810" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7fb47076d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47076db90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47076dd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47076c020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47076c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47076c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47076c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47076c660"/>
        <function-ref name="get" scoped="" ref="0x7fb47076c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47076c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47076cb10"/>
        <function-ref name="set" scoped="" ref="0x7fb47076cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47076ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47076b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47076b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47076b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7fb470758810" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7fb470758810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470758c90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470758e20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470757020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707571b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470757340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707574d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470757660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707577f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470757980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470757b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470757ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470757e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470756020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707562b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470756440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7fb470744810" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7fb470744810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470744b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470744d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470743020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707431b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470743340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707434d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470743660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707437f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470743980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470743b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470743ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470743e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470742020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707422b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470742440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7fb47070dcc0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7fb47070dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47070c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47070c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47070c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47070c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47070c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47070c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47070ca00"/>
        <function-ref name="get" scoped="" ref="0x7fb47070cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47070cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47070b020"/>
        <function-ref name="set" scoped="" ref="0x7fb47070b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47070b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47070b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47070b760"/>
        <function-ref name="clr" scoped="" ref="0x7fb47070b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7fb4706eccb0" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7fb4706eccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706eb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706eb230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706eb3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706eb550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706eb6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706eb870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706eba00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706ebb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706ebd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706ea020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706ea1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706ea340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706ea4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706ea760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706ea8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7fb4706e0cb0" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7fb4706e0cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706df0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706df230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706df3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706df550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706df6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706df870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706dfa00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706dfb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706dfd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706de020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706de1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706de340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706de4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706de760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706de8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7fb4706f8cc0" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7fb4706f8cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706f70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706f7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706f73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706f7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706f76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706f7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706f7a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706f7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706f7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706f6020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706f61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706f6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706f64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706f6760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706f68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7fb470740810" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7fb470740810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470740d90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47073f020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47073f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47073f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47073f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47073f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47073f7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47073f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47073fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47073fca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47073fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47073e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47073e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47073e440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47073e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7fb47072b9a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7fb47072b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47072bd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47072a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47072a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47072a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47072a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47072a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47072a7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47072a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47072ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47072aca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47072ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470729020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707291b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470729440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707295d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7fb47071b9a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7fb47071b9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47071bd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47071a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47071a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47071a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47071a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47071a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47071a7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47071a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47071ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47071aca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47071ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470719020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707191b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470719440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707195d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7fb4706eacb0" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7fb4706eacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706e90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706e9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706e93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706e9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706e96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706e9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706e9a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706e9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706e9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706e8020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706e81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706e8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706e84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706e8760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706e88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7fb4706fecb0" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7fb4706fecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706fd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706fd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706fd3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706fd550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706fd6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706fd870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706fda00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706fdb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706fdd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706fc020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706fc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706fc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706fc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706fc760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706fc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7fb470767810" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7fb470767810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470767b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470767d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470766020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707661b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470766340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707664d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470766660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707667f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470766980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470766b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470766ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470766e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470765020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707652b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470765440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7fb470752810" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7fb470752810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470752b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470752d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470751020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707511b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470751340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707514d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470751660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707517f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470751980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470751b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470751ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470751e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470750020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707502b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470750440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7fb47071f9a0" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7fb47071f9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47071fd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47071e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47071e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47071e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47071e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47071e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47071e7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47071e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47071eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47071eca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47071ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47071d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47071d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47071d440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47071d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7fb47074e810" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7fb47074e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47074eb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47074ed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47074d020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47074d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47074d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47074d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47074d660"/>
        <function-ref name="get" scoped="" ref="0x7fb47074d7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47074d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47074db10"/>
        <function-ref name="set" scoped="" ref="0x7fb47074dca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47074de30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47074c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47074c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47074c440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7fb47073a9a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7fb47073a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47073ad20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470739020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707391b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470739340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707394d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470739660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707397f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470739980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470739b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470739ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470739e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470738020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707381b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470738440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707385d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7fb4707259a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7fb4707259a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470725d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470724020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707241b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470724340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707244d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470724660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707247f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470724980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470724b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470724ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470724e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470723020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707231b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470723440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707235d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7fb4707159a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7fb4707159a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470715d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470714020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707141b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470714340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707144d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470714660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707147f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470714980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470714b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470714ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470714e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470713020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707131b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470713440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707135d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7fb4706facc0" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7fb4706facc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706f90a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706f9230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706f93c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706f9550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706f96e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706f9870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706f9a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706f9b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706f9d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706f8020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706f81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706f8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706f84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706f8760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706f88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7fb47076f870" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7fb47076f870"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47076fbf0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47076fd80"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47077a020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47077a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47077a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47077a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47077a660"/>
        <function-ref name="get" scoped="" ref="0x7fb47077a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47077a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47077ab10"/>
        <function-ref name="set" scoped="" ref="0x7fb47077aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47077ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470779020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707792b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470779440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7fb47075c810" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7fb47075c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47075cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47075cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47075b020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47075b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47075b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47075b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47075b660"/>
        <function-ref name="get" scoped="" ref="0x7fb47075b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47075b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47075bb10"/>
        <function-ref name="set" scoped="" ref="0x7fb47075bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47075be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47075a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47075a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47075a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7fb470748810" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7fb470748810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470748b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470748d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470747020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707471b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470747340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707474d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470747660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707477f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470747980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470747b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470747ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470747e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470746020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707462b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470746440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7fb4707349a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7fb4707349a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470734d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470733020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707331b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470733340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707334d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470733660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707337f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470733980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470733b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470733ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470733e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470732020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707321b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470732440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707325d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7fb4706f6cc0" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7fb4706f6cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706f50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706f5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706f53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706f5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706f56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706f5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706f5a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706f5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706f5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706f4020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706f41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706f4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706f44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706f4760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706f48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7fb4706f0cb0" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7fb4706f0cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706ef0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706ef230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706ef3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706ef550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706ef6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706ef870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706efa00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706efb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706efd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706ee020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706ee1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706ee340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706ee4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706ee760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706ee8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7fb4706e4cb0" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7fb4706e4cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706e30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706e3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706e33c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706e3550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706e36e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706e3870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706e3a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706e3b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706e3d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706e2020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706e21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706e2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706e24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706e2760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706e28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7fb4707309a0" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7fb4707309a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470730d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47072e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47072e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47072e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47072e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47072e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47072e7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47072e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47072eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47072eca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47072ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47072d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47072d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47072d440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47072d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7fb4706f4cc0" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7fb4706f4cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706f30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706f3230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706f33c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706f3550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706f36e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706f3870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706f3a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706f3b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706f3d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706f2020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706f21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706f2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706f24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706f2760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706f28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7fb47076b810" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7fb47076b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47076bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47076bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47076a020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47076a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47076a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47076a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47076a660"/>
        <function-ref name="get" scoped="" ref="0x7fb47076a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47076a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47076ab10"/>
        <function-ref name="set" scoped="" ref="0x7fb47076aca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47076ae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470769020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707692b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470769440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7fb470756810" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7fb470756810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470756b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470756d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470755020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707551b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470755340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707554d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470755660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707557f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470755980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470755b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470755ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470755e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470754020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707542b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470754440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7fb470742810" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7fb470742810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470742b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470742d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470741020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707411b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470741340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707414d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470741660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707417f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470741980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470741b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470741ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470741e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470740020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707402b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470740440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7fb4706fccc0" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7fb4706fccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706fb0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706fb230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706fb3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706fb550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706fb6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706fb870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706fba00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706fbb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706fbd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706fa020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706fa1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706fa340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706fa4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706fa760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706fa8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7fb4706e8cb0" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7fb4706e8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706e70a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706e7230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706e73c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706e7550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706e76e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706e7870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706e7a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706e7b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706e7d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706e6020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706e61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706e6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706e64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706e6760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706e68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7fb47073e9a0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7fb47073e9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47073ed20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47073d020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47073d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47073d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47073d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47073d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47073d7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47073d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47073db10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47073dca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47073de30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47073c020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47073c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47073c440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47073c5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7fb4707299a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7fb4707299a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470729d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470728020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707281b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470728340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707284d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470728660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707287f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470728980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470728b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470728ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470728e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470727020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707271b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470727440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707275d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7fb4707199a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7fb4707199a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470719d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470718020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707181b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470718340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707184d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470718660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707187f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470718980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470718b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470718ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470718e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470717020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707171b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470717440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707175d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7fb470765810" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7fb470765810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470765b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470765d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470764020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707641b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470764340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707644d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470764660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707647f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470764980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470764b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470764ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470764e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470763020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707632b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470763440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7fb47071d9a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7fb47071d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47071dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47071c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47071c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47071c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47071c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47071c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47071c7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47071c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47071cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47071cca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47071ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47071b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47071b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47071b440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47071b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7fb470761810" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7fb470761810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470761b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470761d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470760020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707601b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470760340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707604d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470760660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707607f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470760980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470760b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470760ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470760e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47075f020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47075f2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47075f440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7fb47074c810" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7fb47074c810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47074cb90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47074cd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47074b020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47074b1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47074b340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47074b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47074b660"/>
        <function-ref name="get" scoped="" ref="0x7fb47074b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47074b980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47074bb10"/>
        <function-ref name="set" scoped="" ref="0x7fb47074bca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47074be30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47074a020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47074a2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47074a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7fb4707389a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7fb4707389a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470738d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470737020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707371b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470737340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707374d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470737660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707377f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470737980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470737b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470737ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470737e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470736020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707361b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470736440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707365d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7fb4707239a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7fb4707239a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470723d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470722020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707221b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470722340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707224d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470722660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707227f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470722980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470722b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470722ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470722e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470721020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707211b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470721440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707215d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7fb4707139a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7fb4707139a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470713d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470712020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707121b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470712340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707124d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470712660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707127f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470712980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470712b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470712ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470712e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470711020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707111b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470711440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707115d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7fb470779810" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7fb470779810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470779b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470779d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47076e020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47076e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47076e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47076e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47076e660"/>
        <function-ref name="get" scoped="" ref="0x7fb47076e7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47076e980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47076eb10"/>
        <function-ref name="set" scoped="" ref="0x7fb47076eca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47076ee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47076d020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47076d2b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47076d440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7fb47075a810" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7fb47075a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47075ab90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47075ad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470759020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707591b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470759340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707594d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470759660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707597f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470759980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470759b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470759ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470759e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470758020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707582b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470758440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7fb470746810" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7fb470746810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470746b90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470746d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470745020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4707451b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470745340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4707454d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470745660"/>
        <function-ref name="get" scoped="" ref="0x7fb4707457f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470745980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470745b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470745ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470745e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470744020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4707442b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470744440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7fb4707329a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7fb4707329a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470732d20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470731020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707311b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470731340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707314d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470731660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4707317f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470731980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470731b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470731ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470731e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470730020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707301b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470730440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707305d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7fb470705ca0" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7fb470705ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4707040a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470704230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707043c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470704550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707046e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470704870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470704a00"/>
        <function-ref name="get" scoped="" ref="0x7fb470704b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470704d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470703020"/>
        <function-ref name="set" scoped="" ref="0x7fb4707031b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470703340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707034d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470703760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707038f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7fb4706eecb0" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7fb4706eecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706ed0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706ed230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706ed3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706ed550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706ed6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706ed870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706eda00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706edb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706edd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706ec020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706ec1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706ec340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706ec4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706ec760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706ec8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7fb470707cc0" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7fb470707cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4707060a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470706230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4707063c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470706550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4707066e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470706870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470706a00"/>
        <function-ref name="get" scoped="" ref="0x7fb470706b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470706d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470705020"/>
        <function-ref name="set" scoped="" ref="0x7fb4707051b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470705340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4707054d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470705760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4707058f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7fb47072d9a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7fb47072d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47072dd20"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47072c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47072c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47072c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47072c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47072c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47072c7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47072c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47072cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47072cca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47072ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47072b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47072b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47072b440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47072b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7fb4706e2cb0" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7fb4706e2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706e10a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706e1230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706e13c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706e1550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706e16e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706e1870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706e1a00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706e1b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706e1d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706e0020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706e01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706e0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706e04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706e0760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706e08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7fb4706dccc0" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7fb4706dccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706db0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706db230"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706db3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706db550"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706db6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706db870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706dba00"/>
        <function-ref name="get" scoped="" ref="0x7fb4706dbb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706dbd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706da020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706da1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706da340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706da4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706da760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706da8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7fb47070f9f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7fb47070f9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47070e1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47070e350"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47070e4e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47070e670"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47070e800"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47070e990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47070eb20"/>
        <function-ref name="get" scoped="" ref="0x7fb47070ecb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47070ee40"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47070d020"/>
        <function-ref name="set" scoped="" ref="0x7fb47070d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47070d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47070d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47070d760"/>
        <function-ref name="clr" scoped="" ref="0x7fb47070d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4706d7d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4706d7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706af0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706af270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706af400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706af590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706af720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706af8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706afa40"/>
        <function-ref name="get" scoped="" ref="0x7fb4706afbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706afd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706ae020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706ae1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706ae340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706ae4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706ae760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706ae8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4706ab740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4706ab740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706abac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706abc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706abde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706aa020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706aa1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706aa340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706aa4d0"/>
        <function-ref name="get" scoped="" ref="0x7fb4706aa660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706aa7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706aa980"/>
        <function-ref name="set" scoped="" ref="0x7fb4706aab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706aaca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706aae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706a9120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706a92b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4706a6100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4706a6100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706a6480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706a6610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706a67a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706a6930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706a6ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706a6c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706a6de0"/>
        <function-ref name="get" scoped="" ref="0x7fb4706a5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706a51b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706a5340"/>
        <function-ref name="set" scoped="" ref="0x7fb4706a54d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706a5660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706a57f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706a5a80"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706a5c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4706a2d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4706a2d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706a10e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4706a1270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706a1400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4706a1590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706a1720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706a18b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706a1a40"/>
        <function-ref name="get" scoped="" ref="0x7fb4706a1bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706a1d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4706a0020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706a01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4706a0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706a04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4706a0760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706a08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47069d740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47069d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47069dac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47069dc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47069dde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47069c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47069c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47069c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47069c4d0"/>
        <function-ref name="get" scoped="" ref="0x7fb47069c660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47069c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47069c980"/>
        <function-ref name="set" scoped="" ref="0x7fb47069cb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47069cca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47069ce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47069b120"/>
        <function-ref name="clr" scoped="" ref="0x7fb47069b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470698100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470698100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470698480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470698610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706987a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470698930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470698ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470698c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470698de0"/>
        <function-ref name="get" scoped="" ref="0x7fb470697020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706971b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470697340"/>
        <function-ref name="set" scoped="" ref="0x7fb4706974d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470697660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706977f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470697a80"/>
        <function-ref name="clr" scoped="" ref="0x7fb470697c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470694d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470694d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706930e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470693270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470693400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470693590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470693720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706938b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470693a40"/>
        <function-ref name="get" scoped="" ref="0x7fb470693bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470693d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470692020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706921b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470692340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706924d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470692760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706928f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47068f740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47068f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47068fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47068fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47068fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47068e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47068e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47068e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47068e4d0"/>
        <function-ref name="get" scoped="" ref="0x7fb47068e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47068e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47068e980"/>
        <function-ref name="set" scoped="" ref="0x7fb47068eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47068eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47068ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47068d120"/>
        <function-ref name="clr" scoped="" ref="0x7fb47068d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47068a100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47068a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47068a480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47068a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47068a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47068a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47068aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47068ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47068ade0"/>
        <function-ref name="get" scoped="" ref="0x7fb470688020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706881b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470688340"/>
        <function-ref name="set" scoped="" ref="0x7fb4706884d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470688660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706887f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470688a80"/>
        <function-ref name="clr" scoped="" ref="0x7fb470688c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470685d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470685d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706840e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470684270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470684400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470684590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470684720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706848b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470684a40"/>
        <function-ref name="get" scoped="" ref="0x7fb470684bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470684d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470683020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706831b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470683340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706834d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470683760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706838f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470680740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470680740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470680ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470680c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470680de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47067f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47067f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47067f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47067f4d0"/>
        <function-ref name="get" scoped="" ref="0x7fb47067f660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47067f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47067f980"/>
        <function-ref name="set" scoped="" ref="0x7fb47067fb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47067fca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47067fe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47067e120"/>
        <function-ref name="clr" scoped="" ref="0x7fb47067e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47067b100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47067b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47067b480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47067b610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47067b7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47067b930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47067bac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47067bc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47067bde0"/>
        <function-ref name="get" scoped="" ref="0x7fb47067a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47067a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47067a340"/>
        <function-ref name="set" scoped="" ref="0x7fb47067a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47067a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47067a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47067aa80"/>
        <function-ref name="clr" scoped="" ref="0x7fb47067ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470677d80" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470677d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470676180"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470676310"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706764a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470676630"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706767c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470676950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470676ae0"/>
        <function-ref name="get" scoped="" ref="0x7fb470676c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470676e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470675020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706751b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470675340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706754d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470675760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706758f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470672740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470672740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470672ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470672c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470672de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470671020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706711b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470671340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706714d0"/>
        <function-ref name="get" scoped="" ref="0x7fb470671660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706717f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470671980"/>
        <function-ref name="set" scoped="" ref="0x7fb470671b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470671ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470671e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470670120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706702b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47066d100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47066d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47066d480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47066d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47066d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47066d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47066dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47066dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47066dde0"/>
        <function-ref name="get" scoped="" ref="0x7fb47066c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47066c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47066c340"/>
        <function-ref name="set" scoped="" ref="0x7fb47066c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47066c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47066c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47066ca80"/>
        <function-ref name="clr" scoped="" ref="0x7fb47066cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470669d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470669d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706680e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470668270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470668400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470668590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470668720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706688b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470668a40"/>
        <function-ref name="get" scoped="" ref="0x7fb470668bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470668d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470667020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706671b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470667340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706674d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470667760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706678f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470663740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470663740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470663ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470663c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470663de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470662020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706621b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470662340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706624d0"/>
        <function-ref name="get" scoped="" ref="0x7fb470662660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706627f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470662980"/>
        <function-ref name="set" scoped="" ref="0x7fb470662b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470662ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470662e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470661120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706612b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47065e100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47065e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47065e480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47065e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47065e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47065e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47065eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47065ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47065ede0"/>
        <function-ref name="get" scoped="" ref="0x7fb47065d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47065d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47065d340"/>
        <function-ref name="set" scoped="" ref="0x7fb47065d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47065d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47065d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47065da80"/>
        <function-ref name="clr" scoped="" ref="0x7fb47065dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47065ad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47065ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706590e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470659270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470659400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470659590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470659720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706598b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470659a40"/>
        <function-ref name="get" scoped="" ref="0x7fb470659bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470659d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470658020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706581b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470658340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706584d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470658760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706588f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470655740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470655740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470655ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470655c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470655de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470654020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706541b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470654340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706544d0"/>
        <function-ref name="get" scoped="" ref="0x7fb470654660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706547f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470654980"/>
        <function-ref name="set" scoped="" ref="0x7fb470654b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470654ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470654e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470653120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706532b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470650100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470650100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470650480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470650610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706507a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470650930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470650ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470650c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470650de0"/>
        <function-ref name="get" scoped="" ref="0x7fb47064f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47064f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47064f340"/>
        <function-ref name="set" scoped="" ref="0x7fb47064f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47064f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47064f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47064fa80"/>
        <function-ref name="clr" scoped="" ref="0x7fb47064fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47064cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47064cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47064b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47064b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47064b400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47064b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47064b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47064b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47064ba40"/>
        <function-ref name="get" scoped="" ref="0x7fb47064bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47064bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47064a020"/>
        <function-ref name="set" scoped="" ref="0x7fb47064a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47064a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47064a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47064a760"/>
        <function-ref name="clr" scoped="" ref="0x7fb47064a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470647740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470647740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470647ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470647c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470647de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470646020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706461b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470646340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706464d0"/>
        <function-ref name="get" scoped="" ref="0x7fb470646660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706467f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470646980"/>
        <function-ref name="set" scoped="" ref="0x7fb470646b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470646ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470646e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470645120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706452b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470642100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470642100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470642480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470642610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706427a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470642930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470642ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470642c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470642de0"/>
        <function-ref name="get" scoped="" ref="0x7fb470640020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706401b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470640340"/>
        <function-ref name="set" scoped="" ref="0x7fb4706404d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470640660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706407f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470640a80"/>
        <function-ref name="clr" scoped="" ref="0x7fb470640c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47063de60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47063de60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47063c210"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47063c3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47063c530"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47063c6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47063c850"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47063c9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47063cb70"/>
        <function-ref name="get" scoped="" ref="0x7fb47063cd00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47063b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47063b1b0"/>
        <function-ref name="set" scoped="" ref="0x7fb47063b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47063b4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47063b660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47063b8f0"/>
        <function-ref name="clr" scoped="" ref="0x7fb47063ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4706389f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4706389f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470638d70"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470637020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706371b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470637340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706374d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470637660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706377f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470637980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470637b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470637ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470637e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470636020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706361b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470636440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706365d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470633460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470633460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706337e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470633970"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470633b00"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470633c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470633e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470632020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706321b0"/>
        <function-ref name="get" scoped="" ref="0x7fb470632340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706324d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470632660"/>
        <function-ref name="set" scoped="" ref="0x7fb4706327f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470632980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470632b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470632da0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470631020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47062fe00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47062fe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47062e1c0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47062e350"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47062e4e0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47062e670"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47062e800"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47062e990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47062eb20"/>
        <function-ref name="get" scoped="" ref="0x7fb47062ecb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47062ee40"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47062d020"/>
        <function-ref name="set" scoped="" ref="0x7fb47062d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47062d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47062d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47062d760"/>
        <function-ref name="clr" scoped="" ref="0x7fb47062d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47062a740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47062a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47062aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47062ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47062ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470629020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4706291b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470629340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4706294d0"/>
        <function-ref name="get" scoped="" ref="0x7fb470629660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706297f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470629980"/>
        <function-ref name="set" scoped="" ref="0x7fb470629b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470629ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470629e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470628120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706282b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470625100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470625100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470625480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470625610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706257a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470625930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470625ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470625c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470625de0"/>
        <function-ref name="get" scoped="" ref="0x7fb470624020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706241b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470624340"/>
        <function-ref name="set" scoped="" ref="0x7fb4706244d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470624660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706247f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470624a80"/>
        <function-ref name="clr" scoped="" ref="0x7fb470624c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470621d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470621d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706200e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470620270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470620400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470620590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470620720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706208b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470620a40"/>
        <function-ref name="get" scoped="" ref="0x7fb470620bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470620d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47061f020"/>
        <function-ref name="set" scoped="" ref="0x7fb47061f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47061f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47061f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47061f760"/>
        <function-ref name="clr" scoped="" ref="0x7fb47061f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47061c740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47061c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47061cac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47061cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47061cde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47061a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47061a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47061a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47061a4d0"/>
        <function-ref name="get" scoped="" ref="0x7fb47061a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47061a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47061a980"/>
        <function-ref name="set" scoped="" ref="0x7fb47061ab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47061aca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47061ae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470619120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706192b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470616100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470616100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470616480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470616610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706167a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470616930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470616ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470616c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470616de0"/>
        <function-ref name="get" scoped="" ref="0x7fb470615020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706151b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470615340"/>
        <function-ref name="set" scoped="" ref="0x7fb4706154d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470615660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706157f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470615a80"/>
        <function-ref name="clr" scoped="" ref="0x7fb470615c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470612d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470612d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706110e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470611270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470611400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470611590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470611720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706118b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470611a40"/>
        <function-ref name="get" scoped="" ref="0x7fb470611bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470611d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470610020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706101b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470610340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706104d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470610760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706108f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb47060d740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb47060d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47060dac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47060dc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47060dde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47060c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47060c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47060c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47060c4d0"/>
        <function-ref name="get" scoped="" ref="0x7fb47060c660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47060c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47060c980"/>
        <function-ref name="set" scoped="" ref="0x7fb47060cb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47060cca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47060ce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47060b120"/>
        <function-ref name="clr" scoped="" ref="0x7fb47060b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470608100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470608100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470608480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470608610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4706087a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470608930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470608ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470608c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470608de0"/>
        <function-ref name="get" scoped="" ref="0x7fb470607020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4706071b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470607340"/>
        <function-ref name="set" scoped="" ref="0x7fb4706074d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470607660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706077f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470607a80"/>
        <function-ref name="clr" scoped="" ref="0x7fb470607c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb470604d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb470604d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4706030e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470603270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470603400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470603590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470603720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4706038b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470603a40"/>
        <function-ref name="get" scoped="" ref="0x7fb470603bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470603d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470602020"/>
        <function-ref name="set" scoped="" ref="0x7fb4706021b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470602340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4706024d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470602760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4706028f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705ff740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705ff740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705ffac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705ffc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705ffde0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705fe020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705fe1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705fe340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705fe4d0"/>
        <function-ref name="get" scoped="" ref="0x7fb4705fe660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705fe7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705fe980"/>
        <function-ref name="set" scoped="" ref="0x7fb4705feb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705feca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705fee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705fd120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705fd2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705fa100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705fa100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705fa480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705fa610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705fa7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705fa930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705faac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705fac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705fade0"/>
        <function-ref name="get" scoped="" ref="0x7fb4705f9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705f91b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705f9340"/>
        <function-ref name="set" scoped="" ref="0x7fb4705f94d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705f9660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705f97f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705f9a80"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705f9c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705f5d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705f5d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705f40e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705f4270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705f4400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705f4590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705f4720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705f48b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705f4a40"/>
        <function-ref name="get" scoped="" ref="0x7fb4705f4bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705f4d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705f3020"/>
        <function-ref name="set" scoped="" ref="0x7fb4705f31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705f3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705f34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705f3760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705f38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705f0740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705f0740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705f0ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705f0c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705f0de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705ef020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705ef1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705ef340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705ef4d0"/>
        <function-ref name="get" scoped="" ref="0x7fb4705ef660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705ef7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705ef980"/>
        <function-ref name="set" scoped="" ref="0x7fb4705efb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705efca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705efe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705ee120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705ee2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705eb100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705eb100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705eb480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705eb610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705eb7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705eb930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705ebac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705ebc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705ebde0"/>
        <function-ref name="get" scoped="" ref="0x7fb4705ea020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705ea1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705ea340"/>
        <function-ref name="set" scoped="" ref="0x7fb4705ea4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705ea660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705ea7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705eaa80"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705eac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705e7d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705e7d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705e60e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705e6270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705e6400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705e6590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705e6720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705e68b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705e6a40"/>
        <function-ref name="get" scoped="" ref="0x7fb4705e6bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705e6d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705e5020"/>
        <function-ref name="set" scoped="" ref="0x7fb4705e51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705e5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705e54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705e5760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705e58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705e2740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705e2740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705e2ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705e2c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705e2de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705e1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705e11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705e1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705e14d0"/>
        <function-ref name="get" scoped="" ref="0x7fb4705e1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705e17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705e1980"/>
        <function-ref name="set" scoped="" ref="0x7fb4705e1b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705e1ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705e1e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705e0120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705e02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705dd100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705dd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705dd480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705dd610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705dd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705dd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705ddac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705ddc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705ddde0"/>
        <function-ref name="get" scoped="" ref="0x7fb4705dc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705dc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705dc340"/>
        <function-ref name="set" scoped="" ref="0x7fb4705dc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705dc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705dc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705dca80"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705dcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705d9d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705d9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705d80e0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705d8270"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705d8400"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705d8590"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705d8720"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705d88b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705d8a40"/>
        <function-ref name="get" scoped="" ref="0x7fb4705d8bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705d8d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705d7020"/>
        <function-ref name="set" scoped="" ref="0x7fb4705d71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705d7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705d74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705d7760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705d78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705d4740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705d4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705d4ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705d4c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705d4de0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705d2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705d21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705d2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705d24d0"/>
        <function-ref name="get" scoped="" ref="0x7fb4705d2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705d27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705d2980"/>
        <function-ref name="set" scoped="" ref="0x7fb4705d2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705d2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705d2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705d1120"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705d12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7fb4705ce100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7fb4705ce100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb4705ce480"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4705ce610"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4705ce7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4705ce930"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4705ceac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4705cec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4705cede0"/>
        <function-ref name="get" scoped="" ref="0x7fb4705cd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb4705cd1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb4705cd340"/>
        <function-ref name="set" scoped="" ref="0x7fb4705cd4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb4705cd660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4705cd7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4705cda80"/>
        <function-ref name="clr" scoped="" ref="0x7fb4705cdc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb4705cb4f0" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb4705cb4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4705cb870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7fb4705c4120" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7fb4705c4120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4705c44a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb4705c72f0" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb4705c72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4705c7670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7fb4705c7a00" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fb4705c7a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4705c7d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7fb4705c4800" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7fb4705c4800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4705c4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb4705be080" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb4705be080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4705be400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7fb4705c5500" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7fb4705c5500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4705c5880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fb47058f9e0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fb47058f9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fb470595980"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fb470595020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fb4705951b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fb470595340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fb47058fd60"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fb4705954d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fb470595660"/>
        <function-ref name="initClocks" scoped="" ref="0x7fb4705957f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb470598440" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb470598440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4705987c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7fb47057e020" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7fb47057e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7fb47057d020"/>
        <function-ref name="initTimerB" scoped="" ref="0x7fb47057e530"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7fb47057e6c0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7fb47057e850"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7fb47057e3a0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7fb47057e9e0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7fb47057eb70"/>
        <function-ref name="initClocks" scoped="" ref="0x7fb47057ed00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7fb47057d360" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fb47057d360"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fb47057d6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb47057f940" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb47057f940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb47057fcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7fb47053a5a0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7fb47053a5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb47053a920"/>
        <function-ref name="getControl" scoped="" ref="0x7fb47053aab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47053ac40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb47053add0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470538020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb4705381b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470538340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb4705384d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fb470538660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7fb470527020" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7fb470527020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb4705273a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470527530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb4705276c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb470527850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb4705279e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470527b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470527d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470526020"/>
        <function-ref name="setControl" scoped="" ref="0x7fb4705261b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7fb470531700" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7fb470531700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470531a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470531c10"/>
        <function-ref name="captured" scoped="" ref="0x7fb470531da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470530020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4705301b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470530340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7fb470515a20" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7fb470515a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470515da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470514020"/>
        <function-ref name="captured" scoped="" ref="0x7fb4705141b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470514340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4705144d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470514660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7fb470537aa0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7fb470537aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470537e20"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb470536020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb4705361b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb470536340"/>
        <function-ref name="fired" scoped="" ref="0x7fb4705364d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7fb47051b020" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7fb47051b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47051b3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47051b530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47051b6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47051b850"/>
        <function-ref name="fired" scoped="" ref="0x7fb47051b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7fb470512a20" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7fb470512a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470512da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470511020"/>
        <function-ref name="captured" scoped="" ref="0x7fb4705111b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470511340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4705114d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470511660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7fb4705225a0" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7fb4705225a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470522920"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470522ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470522c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb470522dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470521020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb4705211b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470521340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb4705214d0"/>
        <function-ref name="setControl" scoped="" ref="0x7fb470521660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7fb47053bb10" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7fb47053bb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470542020"/>
        <function-ref name="getControl" scoped="" ref="0x7fb4705421b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470542340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb4705424d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470542660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb4705427f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470542980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470542b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fb470542ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7fb470517a20" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7fb470517a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470517da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470516020"/>
        <function-ref name="captured" scoped="" ref="0x7fb4705161b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470516340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4705164d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470516660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7fb47051d3e0" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7fb47051d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47051d760"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47051d8f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47051da80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47051dc10"/>
        <function-ref name="fired" scoped="" ref="0x7fb47051dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7fb4705265a0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7fb4705265a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470526a20"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470526bb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470526d40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb470525020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb4705251b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470525340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb4705254d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470525660"/>
        <function-ref name="setControl" scoped="" ref="0x7fb4705257f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7fb470530700" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7fb470530700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470530a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470530c10"/>
        <function-ref name="captured" scoped="" ref="0x7fb470530da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47052a020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47052a1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb47052a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7fb470514a20" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7fb470514a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470514da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470513020"/>
        <function-ref name="captured" scoped="" ref="0x7fb4705131b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470513340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4705134d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470513660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7fb470525be0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7fb470525be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470524020"/>
        <function-ref name="getControl" scoped="" ref="0x7fb4705241b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470524340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb4705244d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470524660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb4705247f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470524980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470524b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fb470524ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7fb470536890" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7fb470536890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470536c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb470536da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb470532020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb4705321b0"/>
        <function-ref name="fired" scoped="" ref="0x7fb470532340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7fb47054a060" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7fb47054a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb47054a3e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb47054a570"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47054a700"/>
        <function-ref name="get" scoped="" ref="0x7fb47054a890"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47054aa20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47054abb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb47054ad40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb470549020"/>
        <function-ref name="overflow" scoped="" ref="0x7fb4705491b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb470549340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb4705494d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7fb47051bda0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7fb47051bda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47051a180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47051a310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47051a4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47051a630"/>
        <function-ref name="fired" scoped="" ref="0x7fb47051a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7fb4705410c0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7fb4705410c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470541440"/>
        <function-ref name="getControl" scoped="" ref="0x7fb4705415d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470541760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb4705418f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470541a80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470541c10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470541da0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb47053a020"/>
        <function-ref name="setControl" scoped="" ref="0x7fb47053a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7fb470521a50" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7fb470521a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470521dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470520020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb4705201b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb470520340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb4705204d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470520660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb4705207f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470520980"/>
        <function-ref name="setControl" scoped="" ref="0x7fb470520b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7fb47052b6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7fb47052b6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47052ba50"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb47052bbe0"/>
        <function-ref name="captured" scoped="" ref="0x7fb47052bd70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470531020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4705311b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470531340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7fb470516a20" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7fb470516a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470516da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470515020"/>
        <function-ref name="captured" scoped="" ref="0x7fb4705151b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470515340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4705154d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470515660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7fb470533cf0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7fb470533cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb4705370a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb470537230"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb4705373c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb470537550"/>
        <function-ref name="fired" scoped="" ref="0x7fb4705376e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7fb47051c1f0" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7fb47051c1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47051c570"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47051c700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47051c890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47051ca20"/>
        <function-ref name="fired" scoped="" ref="0x7fb47051cbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7fb470513a20" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7fb470513a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470513da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470512020"/>
        <function-ref name="captured" scoped="" ref="0x7fb4705121b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470512340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4705124d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470512660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7fb4705230c0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7fb4705230c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470523440"/>
        <function-ref name="getControl" scoped="" ref="0x7fb4705235d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470523760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb4705238f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470523a80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470523c10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470523da0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470522020"/>
        <function-ref name="setControl" scoped="" ref="0x7fb4705221b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7fb47052a6c0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7fb47052a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb47052aa40"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb47052abd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47052ad60"/>
        <function-ref name="get" scoped="" ref="0x7fb470528020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb4705281b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470528340"/>
        <function-ref name="getMode" scoped="" ref="0x7fb4705284d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb470528660"/>
        <function-ref name="overflow" scoped="" ref="0x7fb4705287f0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb470528980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb470528b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7fb47051ab80" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7fb47051ab80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470519020"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb4705191b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb470519340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb4705194d0"/>
        <function-ref name="fired" scoped="" ref="0x7fb470519660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7fb470518a20" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7fb470518a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470518da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470517020"/>
        <function-ref name="captured" scoped="" ref="0x7fb4705171b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470517340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4705174d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470517660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7fb470519a20" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7fb470519a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470518020"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb4705181b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb470518340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb4705184d0"/>
        <function-ref name="fired" scoped="" ref="0x7fb470518660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7fb47051e570" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7fb47051e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47051e8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47051ea80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47051ec10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47051eda0"/>
        <function-ref name="fired" scoped="" ref="0x7fb47051d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7fb47051f020" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7fb47051f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb47051f3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fb47051f530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47051f6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb47051f850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb47051f9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47051fb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb47051fd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb47051e020"/>
        <function-ref name="setControl" scoped="" ref="0x7fb47051e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fb4704d82f0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fb4704d82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704d8670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fb4704dac20" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fb4704dac20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704d8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fb4704d8940" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fb4704d8940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704d8cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fb4704da5b0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb4704da5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704da950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fb4704dcc80" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb4704dcc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb4704db0a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb4704db230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb4704db3c0"/>
        <function-ref name="get" scoped="" ref="0x7fb4704db550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb4704db6e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb4704db870"/>
        <function-ref name="getMode" scoped="" ref="0x7fb4704dba00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4704dbb90"/>
        <function-ref name="overflow" scoped="" ref="0x7fb4704dbd20"/>
        <function-ref name="setMode" scoped="" ref="0x7fb4704da020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb4704da1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7fb4704d12f0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7fb4704d12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704d1670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7fb4704d2c20" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7fb4704d2c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704d1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7fb4704d1940" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7fb4704d1940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704d1cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7fb4704d25b0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb4704d25b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704d2950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fb4704d4c80" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb4704d4c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb4704d30a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb4704d3230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb4704d33c0"/>
        <function-ref name="get" scoped="" ref="0x7fb4704d3550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb4704d36e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb4704d3870"/>
        <function-ref name="getMode" scoped="" ref="0x7fb4704d3a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4704d3b90"/>
        <function-ref name="overflow" scoped="" ref="0x7fb4704d3d20"/>
        <function-ref name="setMode" scoped="" ref="0x7fb4704d2020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb4704d21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb470485a90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb470485a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470485e10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470484020"/>
        <function-ref name="captured" scoped="" ref="0x7fb4704841b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470484340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4704844d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470484660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb4704cd9d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb4704cd9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb4704cdd50"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470486020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb4704861b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb470486340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb4704864d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470486660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb4704867f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470486980"/>
        <function-ref name="setControl" scoped="" ref="0x7fb470486b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb470482020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb470482020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704823a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb470486de0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb470486de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470485180"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb470485310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb4704854a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb470485630"/>
        <function-ref name="fired" scoped="" ref="0x7fb4704857c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb470484930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb470484930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb470484cb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb470484e40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470483020"/>
        <function-ref name="get" scoped="" ref="0x7fb4704831b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470483340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb4704834d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb470483660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4704837f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fb470483980"/>
        <function-ref name="setMode" scoped="" ref="0x7fb470483b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb470483ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb47047c160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb47047c160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47047c4e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb47047c670"/>
        <function-ref name="captured" scoped="" ref="0x7fb47047c800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47047c990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47047cb20"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb47047ccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb47047f020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb47047f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb47047f3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fb47047f530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47047f6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb47047f850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb47047f9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47047fb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb47047fd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb47047e020"/>
        <function-ref name="setControl" scoped="" ref="0x7fb47047e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb47047a7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb47047a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb47047ab20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb47047e480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb47047e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47047e800"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47047e990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47047eb20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47047ecb0"/>
        <function-ref name="fired" scoped="" ref="0x7fb47047ee40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb47047b020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb47047b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb47047b3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb47047b530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47047b6c0"/>
        <function-ref name="get" scoped="" ref="0x7fb47047b850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47047b9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47047bb70"/>
        <function-ref name="getMode" scoped="" ref="0x7fb47047bd00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47047a020"/>
        <function-ref name="overflow" scoped="" ref="0x7fb47047a1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb47047a340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb47047a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb4704757a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb4704757a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470475b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470475cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fb470475e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470474020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4704741b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470474340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb4704776d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb4704776d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470477a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470477be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470477d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb470476020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb4704761b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470476340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb4704764d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470476660"/>
        <function-ref name="setControl" scoped="" ref="0x7fb4704767f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb470473c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb470473c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb470472020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb470476ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb470476ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470476e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb470475020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb4704751b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb470475340"/>
        <function-ref name="fired" scoped="" ref="0x7fb4704754d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb470474610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb470474610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb470474990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb470474b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470474cb0"/>
        <function-ref name="get" scoped="" ref="0x7fb470474e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470473020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb4704731b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb470473340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4704734d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fb470473660"/>
        <function-ref name="setMode" scoped="" ref="0x7fb4704737f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb470473980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb47046ecb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb47046ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47046c0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb47046c230"/>
        <function-ref name="captured" scoped="" ref="0x7fb47046c3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47046c550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47046c6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb47046c870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb470470b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb470470b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb47046f020"/>
        <function-ref name="getControl" scoped="" ref="0x7fb47046f1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47046f340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb47046f4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb47046f660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47046f7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb47046f980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb47046fb10"/>
        <function-ref name="setControl" scoped="" ref="0x7fb47046fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb47046a2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb47046a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb47046a670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb47046e020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb47046e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47046e3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47046e530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47046e6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47046e850"/>
        <function-ref name="fired" scoped="" ref="0x7fb47046e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb47046cb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb47046cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb47046b020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb47046b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47046b340"/>
        <function-ref name="get" scoped="" ref="0x7fb47046b4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47046b660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47046b7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb47046b980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47046bb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fb47046bca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb47046be30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb47046a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb4704652f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb4704652f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470465670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470465800"/>
        <function-ref name="captured" scoped="" ref="0x7fb470465990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470465b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb470465cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470465e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb470467220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb470467220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb4704675a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470467730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb4704678c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb470467a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470467be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470467d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470466020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb4704661b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fb470466340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb4704637a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb4704637a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb470463b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb470466610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb470466610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470466990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb470466b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb470466cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb470466e40"/>
        <function-ref name="fired" scoped="" ref="0x7fb470465020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb470464160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb470464160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb4704644e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb470464670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470464800"/>
        <function-ref name="get" scoped="" ref="0x7fb470464990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470464b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470464cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb470464e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb470463020"/>
        <function-ref name="overflow" scoped="" ref="0x7fb4704631b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb470463340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb4704634d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb47045e7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb47045e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47045eb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb47045ecb0"/>
        <function-ref name="captured" scoped="" ref="0x7fb47045ee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47045c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47045c1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb47045c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb4704606d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb4704606d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470460a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470460be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470460d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb47045f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb47045f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47045f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb47045f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb47045f660"/>
        <function-ref name="setControl" scoped="" ref="0x7fb47045f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb47045bc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb47045bc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb47045a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb47045fac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb47045fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47045fe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47045e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47045e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47045e340"/>
        <function-ref name="fired" scoped="" ref="0x7fb47045e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb47045c610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb47045c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb47045c990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb47045cb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47045ccb0"/>
        <function-ref name="get" scoped="" ref="0x7fb47045ce40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47045b020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47045b1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb47045b340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47045b4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fb47045b660"/>
        <function-ref name="setMode" scoped="" ref="0x7fb47045b7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb47045b980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb470456cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb470456cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb4704550a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470455230"/>
        <function-ref name="captured" scoped="" ref="0x7fb4704553c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470455550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4704556e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470455870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb470458b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb470458b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470457020"/>
        <function-ref name="getControl" scoped="" ref="0x7fb4704571b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470457340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb4704574d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470457660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb4704577f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470457980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470457b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fb470457ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb4704532f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb4704532f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb470453670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb470456020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb470456020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb4704563a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb470456530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb4704566c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb470456850"/>
        <function-ref name="fired" scoped="" ref="0x7fb4704569e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb470455b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb470455b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb470454020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb4704541b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470454340"/>
        <function-ref name="get" scoped="" ref="0x7fb4704544d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470454660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb4704547f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb470454980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb470454b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fb470454ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb470454e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb470453020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb47044e2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb47044e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47044e670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb47044e800"/>
        <function-ref name="captured" scoped="" ref="0x7fb47044e990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47044eb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47044ecb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb47044ee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb470450220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb470450220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb4704505a0"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470450730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb4704508c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb470450a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470450be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470450d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb47044f020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb47044f1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7fb47044f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb47044b7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb47044b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb47044bb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb47044f610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb47044f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47044f990"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47044fb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47044fcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47044fe40"/>
        <function-ref name="fired" scoped="" ref="0x7fb47044e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb47044d160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb47044d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb47044d4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb47044d670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47044d800"/>
        <function-ref name="get" scoped="" ref="0x7fb47044d990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47044db20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47044dcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb47044de40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47044b020"/>
        <function-ref name="overflow" scoped="" ref="0x7fb47044b1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb47044b340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb47044b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb4704467a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb4704467a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470446b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb470446cb0"/>
        <function-ref name="captured" scoped="" ref="0x7fb470446e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470445020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4704451b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb470445340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb4704486d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb4704486d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470448a50"/>
        <function-ref name="getControl" scoped="" ref="0x7fb470448be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470448d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb470447020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb4704471b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470447340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb4704474d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470447660"/>
        <function-ref name="setControl" scoped="" ref="0x7fb4704477f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb470444c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb470444c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb470443020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb470447ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb470447ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb470447e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb470446020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb4704461b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb470446340"/>
        <function-ref name="fired" scoped="" ref="0x7fb4704464d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb470445610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb470445610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb470445990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb470445b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470445cb0"/>
        <function-ref name="get" scoped="" ref="0x7fb470445e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb470444020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb4704441b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb470444340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb4704444d0"/>
        <function-ref name="overflow" scoped="" ref="0x7fb470444660"/>
        <function-ref name="setMode" scoped="" ref="0x7fb4704447f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb470444980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7fb47043fcb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7fb47043fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47043e0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7fb47043e230"/>
        <function-ref name="captured" scoped="" ref="0x7fb47043e3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47043e550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47043e6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7fb47043e870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7fb470441b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7fb470441b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb470440020"/>
        <function-ref name="getControl" scoped="" ref="0x7fb4704401b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb470440340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb4704404d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb470440660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb4704407f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb470440980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb470440b10"/>
        <function-ref name="setControl" scoped="" ref="0x7fb470440ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7fb47043b2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7fb47043b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb47043b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7fb47043f020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7fb47043f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb47043f3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb47043f530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb47043f6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb47043f850"/>
        <function-ref name="fired" scoped="" ref="0x7fb47043f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7fb47043eb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb47043eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb47043c020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb47043c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb47043c340"/>
        <function-ref name="get" scoped="" ref="0x7fb47043c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb47043c660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb47043c7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb47043c980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb47043cb10"/>
        <function-ref name="overflow" scoped="" ref="0x7fb47043cca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb47043ce30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb47043b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7fb470435240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7fb470435240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704355c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7fb470439a90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7fb470439a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb470439e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7fb470436260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7fb470436260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb4704365e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7fb4704369f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7fb4704369f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb470436d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7fb470b224c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7fb470b224c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7fb470b22840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7fb470e933b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fb470e933b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fb470e93730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fb470e938c0"/>
        <function-ref name="sleep" scoped="" ref="0x7fb470e93a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7fb470cfcbc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7fb470cfcbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7fb470e38020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fb47038d2f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fb47038d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47038d670"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47038d800"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47038d990"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47038db20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47038dcb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47038de40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47038c020"/>
        <function-ref name="get" scoped="" ref="0x7fb47038c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47038c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47038c4d0"/>
        <function-ref name="set" scoped="" ref="0x7fb47038c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47038c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47038c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47038cc10"/>
        <function-ref name="clr" scoped="" ref="0x7fb47038cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fb47039e020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fb47039e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47039e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47039e530"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47039e6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47039e850"/>
        <function-ref name="get" scoped="" ref="0x7fb47039e9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47039eb70"/>
        <function-ref name="set" scoped="" ref="0x7fb47039ed00"/>
        <function-ref name="clr" scoped="" ref="0x7fb47038d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fb470389de0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fb470389de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470387180"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470387310"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4703874a0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470387630"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4703877c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470387950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470387ae0"/>
        <function-ref name="get" scoped="" ref="0x7fb470387c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470387e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470386020"/>
        <function-ref name="set" scoped="" ref="0x7fb4703861b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470386340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4703864d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470386760"/>
        <function-ref name="clr" scoped="" ref="0x7fb4703868f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fb47038ab90" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fb47038ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470389020"/>
        <function-ref name="isInput" scoped="" ref="0x7fb4703891b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470389340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4703894d0"/>
        <function-ref name="get" scoped="" ref="0x7fb470389660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4703897f0"/>
        <function-ref name="set" scoped="" ref="0x7fb470389980"/>
        <function-ref name="clr" scoped="" ref="0x7fb470389b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7fb470383930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7fb470383930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470383cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470383e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb470382020"/>
        <function-ref name="toggle" scoped="" ref="0x7fb4703821b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470382340"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb4703824d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470382660"/>
        <function-ref name="get" scoped="" ref="0x7fb4703827f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470382980"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470382b10"/>
        <function-ref name="set" scoped="" ref="0x7fb470382ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470382e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb470381020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb4703812b0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470381440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7fb470384710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7fb470384710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470384a90"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470384c20"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470384db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb470383020"/>
        <function-ref name="get" scoped="" ref="0x7fb4703831b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb470383340"/>
        <function-ref name="set" scoped="" ref="0x7fb4703834d0"/>
        <function-ref name="clr" scoped="" ref="0x7fb470383660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fb4703741d0" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fb4703741d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb470374550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fb470377aa0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fb470377aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fb470377e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7fb47036f020" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7fb47036f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb47036f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7fb4703737e0" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7fb4703737e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7fb470373b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7fb4703708b0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7fb4703708b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb470370c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7fb470373e50" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fb470373e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb470370210"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fb4703703a0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fb470370530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fb470f10410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fb470f10410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb470f10790"/>
        <function-ref name="runTask" scoped="" ref="0x7fb470f10920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fb470ea13a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fb470ea13a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb470ea1720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fb470ea18b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fb470ea1a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7fb470878b70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7fb470878b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb470877020"/>
        <function-ref name="runTask" scoped="" ref="0x7fb4708771b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7fb4708712c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7fb4708712c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7fb470871640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7fb4708717d0"/>
        <function-ref name="sleep" scoped="" ref="0x7fb470871960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7fb470879c30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7fb470879c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb470878020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7fb4708781b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7fb470878340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fb470376af0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fb470376af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fb470376e70"/>
        <function-ref name="stopDone" scoped="" ref="0x7fb470364030"/>
        <function-ref name="start" scoped="" ref="0x7fb4703641c0"/>
        <function-ref name="stop" scoped="" ref="0x7fb470364350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fb470364b20" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fb470364b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fb4707ef210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb470363020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fb4703631b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fb470363340"/>
        <function-ref name="cancel" scoped="" ref="0x7fb4703634d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb470363660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fb4703525f0" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fb4703525f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb470352970"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fb470352b00"/>
        <function-ref name="getPayload" scoped="" ref="0x7fb470352c90"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fb470352e20"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fb470361020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fb47035cb10" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fb47035cb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fb4707ef210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fb470362020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fb470353490" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb470353490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb470353810"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb4703539a0"/>
        <function-ref name="led1On" scoped="" ref="0x7fb470353b30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb470353cc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb470353e50"/>
        <function-ref name="get" scoped="" ref="0x7fb470341020"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb4703411b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb4703417f0"/>
        <function-ref name="set" scoped="" ref="0x7fb470341340"/>
        <function-ref name="led0On" scoped="" ref="0x7fb4703414d0"/>
        <function-ref name="led2On" scoped="" ref="0x7fb470341660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fb47033c9f0" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fb47033c9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fb47033cd70"/>
        <function-ref name="noAck" scoped="" ref="0x7fb470353020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fb4703531b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fb4703424e0" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fb4703424e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fb470342860"/>
        <function-ref name="source" scoped="" ref="0x7fb4703429f0"/>
        <function-ref name="address" scoped="" ref="0x7fb470342b80"/>
        <function-ref name="destination" scoped="" ref="0x7fb470342d10"/>
        <function-ref name="setSource" scoped="" ref="0x7fb47035b020"/>
        <function-ref name="setDestination" scoped="" ref="0x7fb47035b1b0"/>
        <function-ref name="type" scoped="" ref="0x7fb47035b340"/>
        <function-ref name="setType" scoped="" ref="0x7fb47035b4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7fb47035b660"/>
        <function-ref name="setGroup" scoped="" ref="0x7fb47035b7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7fb47035b980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7fb4702d8120" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7fb4702d8120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb4702d84a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fb4702d8630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fb4702d87c0"/>
        <function-ref name="cancel" scoped="" ref="0x7fb4702d8950"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb4702d8ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7fb4702d8d70" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7fb4702d8d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fb4702d7180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7fb4702dc110" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7fb4702dc110"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fb4707ef210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb4702dc4b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fb4702dc640"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fb4702dc7d0"/>
        <function-ref name="cancel" scoped="" ref="0x7fb4702dc960"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb4702dcaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7fb4702daa40" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7fb4702daa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb4702dadc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7fb4702d9020"/>
        <function-ref name="getPayload" scoped="" ref="0x7fb4702d91b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fb4702d9340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7fb4702d94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fb4702dce70" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fb4702dce70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7fb4707ef210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fb4702db240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7fb4702d9720" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7fb4702d9720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7fb4702d9aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7fb4702d9c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7fb4702d9dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7fb4702db490" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7fb4702db490"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7fb4702db810"/>
        <function-ref name="source" scoped="" ref="0x7fb4702db9a0"/>
        <function-ref name="address" scoped="" ref="0x7fb4702dbb30"/>
        <function-ref name="destination" scoped="" ref="0x7fb4702dbcc0"/>
        <function-ref name="setSource" scoped="" ref="0x7fb4702dbe50"/>
        <function-ref name="setDestination" scoped="" ref="0x7fb4702da020"/>
        <function-ref name="type" scoped="" ref="0x7fb4702da1b0"/>
        <function-ref name="setType" scoped="" ref="0x7fb4702da340"/>
        <function-ref name="isForMe" scoped="" ref="0x7fb4702da4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7fb4702da660"/>
        <function-ref name="localGroup" scoped="" ref="0x7fb4702da7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fb4702d38d0" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fb4702d38d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fb4702d3c50"/>
        <function-ref name="stopDone" scoped="" ref="0x7fb4702d3de0"/>
        <function-ref name="start" scoped="" ref="0x7fb4702d2020"/>
        <function-ref name="stop" scoped="" ref="0x7fb4702d21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fb4702d1480" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fb4702d1480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fb4707eed70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb4702d1800"/>
        <function-ref name="getPayload" scoped="" ref="0x7fb4702d1990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fb4702d1b20"/>
        <function-ref name="cancel" scoped="" ref="0x7fb4702d1cb0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb4702d1e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb4702d3280" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb4702d3280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4702d3600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fb4702d2940" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fb4702d2940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fb4707eed70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fb4702d2cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fb4702cedc0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb4702cedc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb4702ca180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb4702ca310"/>
        <function-ref name="led1On" scoped="" ref="0x7fb4702ca4a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb4702ca630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb4702ca7c0"/>
        <function-ref name="get" scoped="" ref="0x7fb4702ca950"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb4702caae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb4702c91b0"/>
        <function-ref name="set" scoped="" ref="0x7fb4702cac70"/>
        <function-ref name="led0On" scoped="" ref="0x7fb4702cae00"/>
        <function-ref name="led2On" scoped="" ref="0x7fb4702c9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7fb4702ce4a0" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7fb4702ce4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fb4707eed70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fb4702ce820"/>
        <function-ref name="offset" scoped="" ref="0x7fb4702ce9b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fb4702ceb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7fb4702c2810" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7fb4702c2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7fb4702c2b90"/>
        <function-ref name="stopDone" scoped="" ref="0x7fb4702c2d20"/>
        <function-ref name="start" scoped="" ref="0x7fb4702c1020"/>
        <function-ref name="stop" scoped="" ref="0x7fb4702c11b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7fb47025be40" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7fb47025be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb47025a1e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fb47025a370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7fb4702b00f0" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7fb4702b00f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fb4702b0470"/>
        <function-ref name="stop" scoped="" ref="0x7fb4702b0600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7fb470292d10" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7fb470292d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb4702910e0"/>
        <function-ref name="runTask" scoped="" ref="0x7fb470291270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb4702c21c0" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb4702c21c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb4702c2540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7fb4702accd0" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7fb4702accd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7fb4702af0a0"/>
        <function-ref name="flush" scoped="" ref="0x7fb4702af230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7fb47025d400" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7fb47025d400"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb47025d780"/>
        <function-ref name="runTask" scoped="" ref="0x7fb47025d910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7fb4702ba020" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fb4702ba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fb4702ba3a0"/>
        <function-ref name="resetSend" scoped="" ref="0x7fb4702ba530"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fb4702ba6c0"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fb4702ba850"/>
        <function-ref name="putData" scoped="" ref="0x7fb4702ba9e0"/>
        <function-ref name="putDone" scoped="" ref="0x7fb4702bab70"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fb4702bad00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fb4702b7020" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb4702b7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb4702b73a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb4702b7530"/>
        <function-ref name="led1On" scoped="" ref="0x7fb4702b76c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb4702b7850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb4702b79e0"/>
        <function-ref name="get" scoped="" ref="0x7fb4702b7b70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb4702b7d00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb4702b14d0"/>
        <function-ref name="set" scoped="" ref="0x7fb4702b1020"/>
        <function-ref name="led0On" scoped="" ref="0x7fb4702b11b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fb4702b1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7fb4702560c0" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7fb4702560c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb470256440"/>
        <function-ref name="runTask" scoped="" ref="0x7fb4702565d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7fb4702bc7d0" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fb4702bc7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fb4702bcb50"/>
        <function-ref name="nextByte" scoped="" ref="0x7fb4702bcce0"/>
        <function-ref name="startSend" scoped="" ref="0x7fb4702bce70"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fb4702c0030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7fb4702b8c40" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fb4702b8c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fb4702bb020"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fb4702bb1b0"/>
        <function-ref name="endPacket" scoped="" ref="0x7fb4702bb340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7fb47018cc50" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7fb47018cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb47018b020"/>
        <function-ref name="runTask" scoped="" ref="0x7fb47018b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7fb470191830" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7fb470191830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fb4707eed70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb470191bd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7fb470191d60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7fb470190020"/>
        <function-ref name="cancel" scoped="" ref="0x7fb4701901b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb470190340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7fb47018b480" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7fb47018b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb47018b800"/>
        <function-ref name="runTask" scoped="" ref="0x7fb47018b990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7fb470191110" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7fb470191110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fb4707eed70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7fb4701914b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7fb470190760" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7fb470190760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7fb4707eed70"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fb470190b00"/>
        <function-ref name="offset" scoped="" ref="0x7fb470190c90"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fb470190e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fb47018d590" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb47018d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb47018d910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb47018daa0"/>
        <function-ref name="led1On" scoped="" ref="0x7fb47018dc30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb47018ddc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb47018c020"/>
        <function-ref name="get" scoped="" ref="0x7fb47018c1b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb47018c340"/>
        <function-ref name="led2On" scoped="" ref="0x7fb47018c980"/>
        <function-ref name="set" scoped="" ref="0x7fb47018c660"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb47018c4d0"/>
        <function-ref name="led0On" scoped="" ref="0x7fb47018c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7fb47018f9d0" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7fb47018f9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7fb47018fd50"/>
        <function-ref name="nextByte" scoped="" ref="0x7fb47018d020"/>
        <function-ref name="startSend" scoped="" ref="0x7fb47018d1b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7fb47018d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7fb47018f0e0" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7fb47018f0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7fb47018f460"/>
        <function-ref name="byteReceived" scoped="" ref="0x7fb47018f5f0"/>
        <function-ref name="endPacket" scoped="" ref="0x7fb47018f780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7fb47017bd20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fb47017bd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb4701850e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fb470185270"/>
        <function-ref name="receive" scoped="" ref="0x7fb470185400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fb470185590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fb470185720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fb4701858b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb470185a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7fb470189b60" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7fb470189b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7fb470186020"/>
        <function-ref name="resetSend" scoped="" ref="0x7fb4701861b0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7fb470186340"/>
        <function-ref name="resetReceive" scoped="" ref="0x7fb4701864d0"/>
        <function-ref name="putData" scoped="" ref="0x7fb470186660"/>
        <function-ref name="putDone" scoped="" ref="0x7fb4701867f0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7fb470186980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fb470185cc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb470185cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb4701840a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb470184230"/>
        <function-ref name="led1On" scoped="" ref="0x7fb4701843c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb470184550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb4701846e0"/>
        <function-ref name="get" scoped="" ref="0x7fb470184870"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb470184a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb4701791b0"/>
        <function-ref name="set" scoped="" ref="0x7fb470184b90"/>
        <function-ref name="led0On" scoped="" ref="0x7fb470184d20"/>
        <function-ref name="led2On" scoped="" ref="0x7fb470179020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fb47015d020" loc="40:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fb47015d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb47015d3a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fb47015d530"/>
        <function-ref name="receive" scoped="" ref="0x7fb47015d6c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fb47015d850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fb47015f8d0" loc="39:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fb47015f8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb47015fc50"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fb47015fde0"/>
        <function-ref name="receive" scoped="" ref="0x7fb47015e020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fb47015e1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fb47015e340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fb47015e4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb47015e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fb47015f0c0" loc="38:../../../tos/platforms/shimmer2r/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fb47015f0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fb47015f440"/>
        <function-ref name="stop" scoped="" ref="0x7fb47015f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fb46fd5fc70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46fd5fc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fb46fd5e020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fb46fd5e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fb46fd5c440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fb46fd5c440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb46fd5c7c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fb46fd5c950"/>
        <function-ref name="receive" scoped="" ref="0x7fb46fd5cae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fb46fd5cc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fb46fd5b020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb46fd5b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fb46fd5b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fb46fd5e440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fb46fd5e440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb46fd5e7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fb46fd5e950"/>
        <function-ref name="receive" scoped="" ref="0x7fb46fd5eae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fb46fd5ec70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fb46fd5ee00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fb46fd5c020"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb46fd5c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fb46fd5f020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fb46fd5f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb46fd5f3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb46fd5f530"/>
        <function-ref name="request" scoped="" ref="0x7fb46fd5f6c0"/>
        <function-ref name="granted" scoped="" ref="0x7fb46fd5f850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb46fd5f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fb4700f3dd0" loc="42:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb4700f3dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fb4700f5180"/>
        <function-ref name="configure" scoped="" ref="0x7fb4700f5310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fb4700f1210" loc="44:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fb4700f1210"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb4700f1590"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fb4700f1720"/>
        <function-ref name="receive" scoped="" ref="0x7fb4700f18b0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fb4700f1a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fb4700ef600" loc="47:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb4700ef600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fb4700ef980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fb4700f5b50" loc="43:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fb4700f5b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb4700f2020"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fb4700f21b0"/>
        <function-ref name="receive" scoped="" ref="0x7fb4700f2340"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fb4700f24d0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fb4700f2660"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fb4700f27f0"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb4700f2980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fb4700f0370" loc="46:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fb4700f0370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb4700f06f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb4700f0880"/>
        <function-ref name="request" scoped="" ref="0x7fb4700f0a10"/>
        <function-ref name="granted" scoped="" ref="0x7fb4700f0ba0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb4700f0d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fb4700f7320" loc="41:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fb4700f7320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb4700f76a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb4700f7830"/>
        <function-ref name="request" scoped="" ref="0x7fb4700f79c0"/>
        <function-ref name="granted" scoped="" ref="0x7fb4700f7b50"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb4700f7ce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fb4700eabe0" loc="48:../../../tos/chips/msp430/usart/Msp430Uart0P.nc">
      <component-ref qname="Msp430Uart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fb4700eabe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fb4700ed020"/>
        <function-ref name="txDone" scoped="" ref="0x7fb4700ed1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7fb470062e70" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb470062e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fb470061240"/>
        <function-ref name="configure" scoped="" ref="0x7fb4700613d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7fb47005f890" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7fb47005f890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb47005fc30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7fb47005fdc0"/>
        <function-ref name="receive" scoped="" ref="0x7fb47005e020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7fb47005e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7fb47005d3e0" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb47005d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fb47005d780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7fb47005da50" loc="50:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fb47005da50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fb47005ddd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fb47005c020"/>
        <function-ref name="setUctl" scoped="" ref="0x7fb47005c1b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fb47005c340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fb47005c4d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fb47005c660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fb47005c7f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fb47005c980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fb47005cb10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fb47005cca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fb47005ce30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fb47005b020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fb47005b1b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fb47005b440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fb47005b5d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fb47005b760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fb47005b8f0"/>
        <function-ref name="isUart" scoped="" ref="0x7fb47005ba80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fb47005bc10"/>
        <function-ref name="isSpi" scoped="" ref="0x7fb47005bda0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fb47005a020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fb47005a1b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fb47005a340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fb47005a4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb47005a660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fb47005a9f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fb47005ab80"/>
        <function-ref name="setUbr" scoped="" ref="0x7fb47005ad10"/>
        <function-ref name="tx" scoped="" ref="0x7fb470059020"/>
        <function-ref name="getUctl" scoped="" ref="0x7fb4700591b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fb470059340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fb4700594d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fb470059660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fb4700597f0"/>
        <function-ref name="rx" scoped="" ref="0x7fb470059980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fb470059b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fb470059ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fb470059e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fb470058020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fb4700581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7fb470061790" loc="45:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7fb470061790"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7fb470061b30"/>
        <function-ref name="receivedByte" scoped="" ref="0x7fb470061cc0"/>
        <function-ref name="receive" scoped="" ref="0x7fb470061e50"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7fb47005f020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7fb47005f1b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7fb47005f340"/>
        <function-ref name="sendDone" scoped="" ref="0x7fb47005f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fb470057020" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fb470057020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb470057e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb470056800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb470056340"/>
        <function-ref name="overflow" scoped="" ref="0x7fb470056cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7fb47005e5b0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7fb47005e5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb47005e950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb47005eae0"/>
        <function-ref name="request" scoped="" ref="0x7fb47005ec70"/>
        <function-ref name="granted" scoped="" ref="0x7fb47005ee00"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb47005d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fb4700620d0" loc="43:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fb4700620d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb470062470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb470062600"/>
        <function-ref name="request" scoped="" ref="0x7fb470062790"/>
        <function-ref name="granted" scoped="" ref="0x7fb470062920"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb470062ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7fb4700585b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7fb4700585b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fb470058950"/>
        <function-ref name="txDone" scoped="" ref="0x7fb470058ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fb470055120" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart0P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb470055120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb4700554a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb470055630"/>
        <function-ref name="led1On" scoped="" ref="0x7fb4700557c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb470055950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb470055ae0"/>
        <function-ref name="get" scoped="" ref="0x7fb470055c70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb470055e00"/>
        <function-ref name="led2On" scoped="" ref="0x7fb4700534d0"/>
        <function-ref name="set" scoped="" ref="0x7fb4700531b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb470053020"/>
        <function-ref name="led0On" scoped="" ref="0x7fb470053340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7fb470046bd0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fb470046bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb470045020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fb4700476d0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fb4700476d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fb470047a50"/>
        <function-ref name="txDone" scoped="" ref="0x7fb470047be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fb47004eb60" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fb47004eb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fb47004b020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fb47004b1b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7fb47004b340"/>
        <function-ref name="enableUart" scoped="" ref="0x7fb47004b4d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fb47004b660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fb47004b7f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fb47004b980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fb47004bb10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fb47004bca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fb47004be30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fb47004a020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fb47004a1b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fb47004a340"/>
        <function-ref name="getUbr" scoped="" ref="0x7fb47004a5d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fb47004a760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fb47004a8f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fb47004aa80"/>
        <function-ref name="isUart" scoped="" ref="0x7fb47004ac10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fb47004ada0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fb470049020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fb4700491b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fb470049340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fb4700494d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fb470049660"/>
        <function-ref name="getMode" scoped="" ref="0x7fb4700497f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fb470049b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fb470049d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7fb470048020"/>
        <function-ref name="tx" scoped="" ref="0x7fb4700481b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7fb470048340"/>
        <function-ref name="disableUart" scoped="" ref="0x7fb4700484d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fb470048660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fb4700487f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fb470048980"/>
        <function-ref name="rx" scoped="" ref="0x7fb470048b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fb470048ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fb470048e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fb470047020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fb4700471b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fb470047340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fb47000b990" loc="82:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fb47000b990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47000bd10"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47000a020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47000a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47000a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47000a4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47000a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47000a7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47000a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47000ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47000aca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47000ae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470009020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4700091b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470009440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4700095d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fb47003d020" loc="76:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fb47003d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fb47003d3a0"/>
        <function-ref name="txDone" scoped="" ref="0x7fb47003d530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7fb470009990" loc="83:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7fb470009990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470009d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470008020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4700081b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470008340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4700084d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470008660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4700087f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470008980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470008b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470008ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470008e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470007020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4700071b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470007440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4700075d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7fb470007990" loc="84:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7fb470007990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb470007d10"/>
        <function-ref name="isInput" scoped="" ref="0x7fb470006020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb4700061b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb470006340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb4700064d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb470006660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb4700067f0"/>
        <function-ref name="get" scoped="" ref="0x7fb470006980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb470006b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb470006ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb470006e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb470005020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb4700051b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb470005440"/>
        <function-ref name="clr" scoped="" ref="0x7fb4700055d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7fb470042360" loc="75:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7fb470042360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fb4700426e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fb470042870"/>
        <function-ref name="setUctl" scoped="" ref="0x7fb470042a00"/>
        <function-ref name="enableUart" scoped="" ref="0x7fb470042b90"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fb470042d20"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fb470041020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fb4700411b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fb470041340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fb4700414d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fb470041660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fb4700417f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fb470041980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fb470041b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7fb470041da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fb470040020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fb4700401b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fb470040340"/>
        <function-ref name="isUart" scoped="" ref="0x7fb4700404d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fb470040660"/>
        <function-ref name="isSpi" scoped="" ref="0x7fb4700407f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fb470040980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fb470040b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fb470040ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fb470040e30"/>
        <function-ref name="getMode" scoped="" ref="0x7fb47003f020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fb47003f3b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fb47003f540"/>
        <function-ref name="setUbr" scoped="" ref="0x7fb47003f6d0"/>
        <function-ref name="tx" scoped="" ref="0x7fb47003f860"/>
        <function-ref name="getUctl" scoped="" ref="0x7fb47003f9f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7fb47003fb80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fb47003fd10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fb47003e020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fb47003e1b0"/>
        <function-ref name="rx" scoped="" ref="0x7fb47003e340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fb47003e4d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fb47003e660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fb47003e7f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fb47003e980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fb47003eb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fb470005890" loc="86:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb470005890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb470005c10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb470005da0"/>
        <function-ref name="led1On" scoped="" ref="0x7fb470004020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb4700041b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb470004340"/>
        <function-ref name="get" scoped="" ref="0x7fb4700044d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb470004660"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb470004ca0"/>
        <function-ref name="set" scoped="" ref="0x7fb4700047f0"/>
        <function-ref name="led0On" scoped="" ref="0x7fb470004980"/>
        <function-ref name="led2On" scoped="" ref="0x7fb470004b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7fb470014bc0" loc="79:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fb470014bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fb47003b020"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fb47003b1b0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fb47003b340"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fb47003b4d0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fb47003b660"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fb47003b7f0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fb47003b980"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fb47003bb10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb47003bca0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fb47003be30"/>
        <function-ref name="getData" scoped="" ref="0x7fb47003a020"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fb47003a1b0"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fb47003a340"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fb47003a5d0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fb47003a760"/>
        <function-ref name="getIV" scoped="" ref="0x7fb47003a8f0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fb47003aa80"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fb47003ac10"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fb47003ada0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fb470013020"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fb4700131b0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fb470013340"/>
        <function-ref name="isI2C" scoped="" ref="0x7fb4700134d0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fb470013660"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fb4700137f0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fb470013b80"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fb470013d10"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fb470012020"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fb4700121b0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fb470012340"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fb4700124d0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fb470012660"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fb4700127f0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fb470012980"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fb470012b10"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fb470012ca0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fb470012e30"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fb470011020"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fb4700111b0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fb470011340"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fb4700114d0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fb470011660"/>
        <function-ref name="setData" scoped="" ref="0x7fb4700117f0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fb470011980"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fb470011b10"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fb470011ca0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fb470011e30"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fb470010020"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fb4700101b0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fb470010740"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fb4700108d0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fb470010a60"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fb470010bf0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fb470010d80"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fb47000f020"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fb47000f1b0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fb47000f340"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fb47000f4d0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fb47000f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7fb47000d990" loc="81:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7fb47000d990"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47000dd10"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47000c020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47000c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47000c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47000c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47000c660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47000c7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47000c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47000cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47000cca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47000ce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47000b020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47000b1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47000b440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47000b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fb47003d970" loc="77:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fb47003d970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb47003dcf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fb47000fa20" loc="80:../../../tos/platforms/shimmer/chips/msp430/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fb47000fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb47000fda0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb47000e020"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb47000e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb47000e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb47000e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb47000e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb47000e7f0"/>
        <function-ref name="get" scoped="" ref="0x7fb47000e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb47000eb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb47000eca0"/>
        <function-ref name="set" scoped="" ref="0x7fb47000ee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb47000d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb47000d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb47000d440"/>
        <function-ref name="clr" scoped="" ref="0x7fb47000d5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fb46fefd020" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fb46fefd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fefde30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46fefc800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46fefc340"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46fefccc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7fb46fef7020" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7fb46fef7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fef7e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46fef6800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46fef6340"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46fef6cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fb46fee22c0" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fee22c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb46fee2640"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb46fee27d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb46fee2960"/>
        <function-ref name="get" scoped="" ref="0x7fb46fee2af0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb46fee2c80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46fee2e10"/>
        <function-ref name="getMode" scoped="" ref="0x7fb46fee1020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46fee11b0"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46fee1340"/>
        <function-ref name="setMode" scoped="" ref="0x7fb46fee14d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb46fee1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fb46fef30a0" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fb46fef30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fee3020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46fee39a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46fee34e0"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46fee3e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fb46f6625d0" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46f6625d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fb46f662950"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fb46f662ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7fb46f65c7c0" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7fb46f65c7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb46f65cb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fb46f655a80" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46f655a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fb46f655e00"/>
        <function-ref name="configure" scoped="" ref="0x7fb46f654020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7fb46f65cdd0" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fb46f65cdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fb46f65b180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fb46f65b310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fb46f65b4a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fb46f65b630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fb46f65b7c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fb46f65b950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fb46f65bae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fb46f65bc70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb46f65be00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fb46f65a020"/>
        <function-ref name="getData" scoped="" ref="0x7fb46f65a1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fb46f65a340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fb46f65a4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fb46f65a760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fb46f65a8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7fb46f65aa80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fb46f65ac10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fb46f65ada0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fb46f659020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fb46f6591b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fb46f659340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fb46f6594d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7fb46f659660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fb46f6597f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fb46f659980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fb46f659d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fb46f658020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fb46f6581b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fb46f658340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fb46f6584d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fb46f658660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fb46f6587f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fb46f658980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fb46f658b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fb46f658ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fb46f658e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fb46f657020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fb46f6571b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fb46f657340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fb46f6574d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fb46f657660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fb46f6577f0"/>
        <function-ref name="setData" scoped="" ref="0x7fb46f657980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fb46f657b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fb46f657ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fb46f657e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fb46f656020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fb46f6561b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fb46f656340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fb46f6568d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fb46f656a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fb46f656bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fb46f656d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fb46f655020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fb46f6551b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fb46f655340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fb46f6554d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fb46f655660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fb46f6557f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7fb46f65c020" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7fb46f65c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fb46f65c3a0"/>
        <function-ref name="txDone" scoped="" ref="0x7fb46f65c530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fb46f663880" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fb46f663880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb46f663c00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb46f663d90"/>
        <function-ref name="request" scoped="" ref="0x7fb46f662020"/>
        <function-ref name="granted" scoped="" ref="0x7fb46f6621b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb46f662340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7fb46f6615a0" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7fb46f6615a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fb46f661920"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fb46f661ab0"/>
        <function-ref name="setUctl" scoped="" ref="0x7fb46f661c40"/>
        <function-ref name="enableUart" scoped="" ref="0x7fb46f661dd0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fb46f660020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fb46f6601b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fb46f660340"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fb46f6604d0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fb46f660660"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fb46f6607f0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fb46f660980"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fb46f660b10"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fb46f660ca0"/>
        <function-ref name="getUbr" scoped="" ref="0x7fb46f65f020"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fb46f65f1b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fb46f65f340"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fb46f65f4d0"/>
        <function-ref name="isUart" scoped="" ref="0x7fb46f65f660"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fb46f65f7f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fb46f65f980"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fb46f65fb10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fb46f65fca0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fb46f65fe30"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fb46f65e020"/>
        <function-ref name="getMode" scoped="" ref="0x7fb46f65e1b0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fb46f65e540"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fb46f65e6d0"/>
        <function-ref name="setUbr" scoped="" ref="0x7fb46f65e860"/>
        <function-ref name="tx" scoped="" ref="0x7fb46f65e9f0"/>
        <function-ref name="getUctl" scoped="" ref="0x7fb46f65eb80"/>
        <function-ref name="disableUart" scoped="" ref="0x7fb46f65ed10"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fb46f65d020"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fb46f65d1b0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fb46f65d340"/>
        <function-ref name="rx" scoped="" ref="0x7fb46f65d4d0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fb46f65d660"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fb46f65d7f0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fb46f65d980"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fb46f65db10"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fb46f65dca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fb46f662d70" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46f662d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fb46f661180"/>
        <function-ref name="userId" scoped="" ref="0x7fb46f661310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fb46febe2c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46febe2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fb46febe640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fb46febe7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fb46febd8a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46febd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fb46febdc20"/>
        <function-ref name="configure" scoped="" ref="0x7fb46febddb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fb46fec14d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fb46fec14d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fb46fec1850"/>
        <function-ref name="txDone" scoped="" ref="0x7fb46fec19e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fb46febf020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fb46febf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb46febf3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb46febf530"/>
        <function-ref name="request" scoped="" ref="0x7fb46febf6c0"/>
        <function-ref name="granted" scoped="" ref="0x7fb46febf850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb46febf9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fb46fec03f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fb46fec03f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb46fec0770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fb46febead0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46febead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fb46febee50"/>
        <function-ref name="userId" scoped="" ref="0x7fb46febd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7fb46fea8bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46fea8bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fb46fea7020"/>
        <function-ref name="userId" scoped="" ref="0x7fb46fea71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7fb46febad60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7fb46febad60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fb46feb9180"/>
        <function-ref name="txDone" scoped="" ref="0x7fb46feb9310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7fb46fea85e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7fb46fea85e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb46fea8960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7fb46feb9710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7fb46feb9710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7fb46feb9ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7fb46feb9d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7fb46feb9d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7fb46fea8180"/>
        <function-ref name="txDone" scoped="" ref="0x7fb46fea8310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fb46fe2d020" loc="92:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46fe2d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fb46fe2d3c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fb46fe2d550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fb46fe2bcd0" loc="96:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46fe2bcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fb46fe2a0a0"/>
        <function-ref name="configure" scoped="" ref="0x7fb46fe2a230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fb46fe2d7a0" loc="93:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fb46fe2d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb46fe2db20"/>
        <function-ref name="requested" scoped="" ref="0x7fb46fe2dcb0"/>
        <function-ref name="granted" scoped="" ref="0x7fb46fe2de40"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb46fe2b020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fb46fe2b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fb46fe2e210" loc="91:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fb46fe2e210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb46fe2e5b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb46fe2e740"/>
        <function-ref name="request" scoped="" ref="0x7fb46fe2e8d0"/>
        <function-ref name="granted" scoped="" ref="0x7fb46fe2ea60"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb46fe2ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fb46fe2b400" loc="94:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46fe2b400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fb46fe2b780"/>
        <function-ref name="userId" scoped="" ref="0x7fb46fe2b910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb46f5c6920" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb46f5c6920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb46f5c6ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7fb46f5c5020" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7fb46f5c5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fb46f5c53a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fb46f5c5530"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fb46f5c56c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fb46f5c5850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7fb46f5c1020" loc="55:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7fb46f5c1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7fb46f5c13c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fb46f5c1550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7fb46f5c0cf0" loc="60:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7fb46f5c0cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7fb46f5bf0e0"/>
        <function-ref name="configure" scoped="" ref="0x7fb46f5bf270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7fb46f5bf500" loc="61:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7fb46f5bf500"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7fb46f5bf880"/>
        <function-ref name="isEmpty" scoped="" ref="0x7fb46f5bfa10"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7fb46f5bfba0"/>
        <function-ref name="dequeue" scoped="" ref="0x7fb46f5bfd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7fb46f5c17a0" loc="56:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7fb46f5c17a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb46f5c1b20"/>
        <function-ref name="requested" scoped="" ref="0x7fb46f5c1cb0"/>
        <function-ref name="granted" scoped="" ref="0x7fb46f5c1e40"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb46f5c0020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7fb46f5c01b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7fb46f5be020" loc="62:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7fb46f5be020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7fb46f5be3a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7fb46f5be530"/>
        <function-ref name="led1On" scoped="" ref="0x7fb46f5be6c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7fb46f5be850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7fb46f5be9e0"/>
        <function-ref name="get" scoped="" ref="0x7fb46f5beb70"/>
        <function-ref name="led1Off" scoped="" ref="0x7fb46f5bed00"/>
        <function-ref name="led0On" scoped="" ref="0x7fb46f5bd4d0"/>
        <function-ref name="set" scoped="" ref="0x7fb46f5bd1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7fb46f5bd020"/>
        <function-ref name="led2Off" scoped="" ref="0x7fb46f5bd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7fb46f5c2210" loc="54:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fb46f5c2210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb46f5c25b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb46f5c2740"/>
        <function-ref name="request" scoped="" ref="0x7fb46f5c28d0"/>
        <function-ref name="granted" scoped="" ref="0x7fb46f5c2a60"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb46f5c2bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7fb46f5c0400" loc="57:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7fb46f5c0400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7fb46f5c0780"/>
        <function-ref name="userId" scoped="" ref="0x7fb46f5c0910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7fb46f5bd7a0" loc="75:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7fb46f5bd7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb46f5bdb20"/>
        <function-ref name="runTask" scoped="" ref="0x7fb46f5bdcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7fb46fe24d70" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7fb46fe24d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fb46fe21180"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fb46fe21310"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fb46fe214a0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fb46fe21630"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fb46fe217c0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fb46fe21950"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fb46fe21ae0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fb46fe21c70"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb46fe21e00"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fb46fe20020"/>
        <function-ref name="getData" scoped="" ref="0x7fb46fe201b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fb46fe20340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fb46fe204d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fb46fe20760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fb46fe208f0"/>
        <function-ref name="getIV" scoped="" ref="0x7fb46fe20a80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fb46fe20c10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fb46fe20da0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fb46fe1f020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fb46fe1f1b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fb46fe1f340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fb46fe1f4d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7fb46fe1f660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fb46fe1f7f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fb46fe1f980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fb46fe1fd10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fb46fe1e020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fb46fe1e1b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fb46fe1e340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fb46fe1e4d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fb46fe1e660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fb46fe1e7f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fb46fe1e980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fb46fe1eb10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fb46fe1eca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fb46fe1ee30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fb46fe1d020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fb46fe1d1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fb46fe1d340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fb46fe1d4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fb46fe1d660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fb46fe1d7f0"/>
        <function-ref name="setData" scoped="" ref="0x7fb46fe1d980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fb46fe1db10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fb46fe1dca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fb46fe1de30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fb46fe1c020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fb46fe1c1b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fb46fe1c340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fb46fe1c8d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fb46fe1ca60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fb46fe1cbf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fb46fe1cd80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fb46fe1b020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fb46fe1b1b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fb46fe1b340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fb46fe1b4d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fb46fe1b660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fb46fe1b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7fb46fe11700" loc="41:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7fb46fe11700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7fb46fe11a80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7fb46fe11c10"/>
        <function-ref name="setUctl" scoped="" ref="0x7fb46fe11da0"/>
        <function-ref name="enableUart" scoped="" ref="0x7fb46fe10020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7fb46fe101b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7fb46fe10340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7fb46fe104d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7fb46fe10660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7fb46fe107f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7fb46fe10980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7fb46fe10b10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7fb46fe10ca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7fb46fe10e30"/>
        <function-ref name="getUbr" scoped="" ref="0x7fb46fe0f120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7fb46fe0f2b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7fb46fe0f440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7fb46fe0f5d0"/>
        <function-ref name="isUart" scoped="" ref="0x7fb46fe0f760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7fb46fe0f8f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7fb46fe0fa80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7fb46fe0fc10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7fb46fe0fda0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7fb46fe0e020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7fb46fe0e1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb46fe0e340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7fb46fe0e6d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7fb46fe0e860"/>
        <function-ref name="setUbr" scoped="" ref="0x7fb46fe0e9f0"/>
        <function-ref name="tx" scoped="" ref="0x7fb46fe0eb80"/>
        <function-ref name="getUctl" scoped="" ref="0x7fb46fe0ed10"/>
        <function-ref name="disableUart" scoped="" ref="0x7fb46fe0d020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7fb46fe0d1b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7fb46fe0d340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7fb46fe0d4d0"/>
        <function-ref name="rx" scoped="" ref="0x7fb46fe0d660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7fb46fe0d7f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7fb46fe0d980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7fb46fe0db10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7fb46fe0dca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7fb46fe0de30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7fb46fe0a1f0" loc="43:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7fb46fe0a1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb46fe0a570"/>
        <function-ref name="isInput" scoped="" ref="0x7fb46fe0a700"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb46fe0a890"/>
        <function-ref name="toggle" scoped="" ref="0x7fb46fe0aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb46fe0abb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb46fe0ad40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb46fe09020"/>
        <function-ref name="get" scoped="" ref="0x7fb46fe091b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb46fe09340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb46fe094d0"/>
        <function-ref name="set" scoped="" ref="0x7fb46fe09660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb46fe097f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb46fe09980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb46fe09c10"/>
        <function-ref name="clr" scoped="" ref="0x7fb46fe09da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7fb46fe1a940" loc="39:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7fb46fe1a940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7fb46fe1acc0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7fb46fe1ae50"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7fb46fe17020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7fb46fe171b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7fb46fe17340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7fb46fe174d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7fb46fe17660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7fb46fe177f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb46fe17980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7fb46fe17b10"/>
        <function-ref name="getData" scoped="" ref="0x7fb46fe17ca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7fb46fe17e30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7fb46fe16020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7fb46fe162b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7fb46fe16440"/>
        <function-ref name="getIV" scoped="" ref="0x7fb46fe165d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7fb46fe16760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7fb46fe168f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7fb46fe16a80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7fb46fe16c10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7fb46fe16da0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7fb46fe15020"/>
        <function-ref name="isI2C" scoped="" ref="0x7fb46fe151b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7fb46fe15340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7fb46fe154d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7fb46fe15860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7fb46fe159f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7fb46fe15b80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7fb46fe15d10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7fb46fe14020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7fb46fe141b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7fb46fe14340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7fb46fe144d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7fb46fe14660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7fb46fe147f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7fb46fe14980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7fb46fe14b10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7fb46fe14ca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7fb46fe14e30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7fb46fe13020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7fb46fe131b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7fb46fe13340"/>
        <function-ref name="setData" scoped="" ref="0x7fb46fe134d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7fb46fe13660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7fb46fe137f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7fb46fe13980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7fb46fe13b10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7fb46fe13ca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7fb46fe13e30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7fb46fe12420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7fb46fe125b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7fb46fe12740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7fb46fe128d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7fb46fe12a60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7fb46fe12bf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7fb46fe12d80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7fb46fe11020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7fb46fe111b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7fb46fe11340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7fb46fe0c250" loc="42:../../../tos/platforms/shimmer/chips/msp430/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7fb46fe0c250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7fb46fe0c5d0"/>
        <function-ref name="isInput" scoped="" ref="0x7fb46fe0c760"/>
        <function-ref name="setResistor" scoped="" ref="0x7fb46fe0c8f0"/>
        <function-ref name="toggle" scoped="" ref="0x7fb46fe0ca80"/>
        <function-ref name="isOutput" scoped="" ref="0x7fb46fe0cc10"/>
        <function-ref name="getResistor" scoped="" ref="0x7fb46fe0cda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7fb46fe0b020"/>
        <function-ref name="get" scoped="" ref="0x7fb46fe0b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7fb46fe0b340"/>
        <function-ref name="getRaw" scoped="" ref="0x7fb46fe0b4d0"/>
        <function-ref name="set" scoped="" ref="0x7fb46fe0b660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7fb46fe0b7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7fb46fe0b980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7fb46fe0bc10"/>
        <function-ref name="clr" scoped="" ref="0x7fb46fe0bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7fb46fd57920" loc="37:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7fb46fd57920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7fb46fd57ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7fb46fd56020" loc="38:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7fb46fd56020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7fb46fd563a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7fb46fd56530"/>
        <function-ref name="request" scoped="" ref="0x7fb46fd566c0"/>
        <function-ref name="granted" scoped="" ref="0x7fb46fd56850"/>
        <function-ref name="isOwner" scoped="" ref="0x7fb46fd569e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7fb46fd570c0" loc="36:../../../tos/platforms/shimmer2r/ShimmerSerialP.nc">
      <component-ref qname="ShimmerSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7fb46fd570c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7fb46fd57440"/>
        <function-ref name="stop" scoped="" ref="0x7fb46fd575d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7fb46fd45a30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7fb46fd45a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7fb46fd45db0"/>
        <function-ref name="offset" scoped="" ref="0x7fb46fd42020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7fb46fd421b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fb46fd32640" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="TestLocalTimeAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb46fd32640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46fba1c40"/>
        <function-ref name="fired" scoped="" ref="0x7fb46fba21e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fb46fba1020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fb46fba2ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7fb46fba0590"/>
        <function-ref name="gett0" scoped="" ref="0x7fb46fba0110"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46fba2660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fb46fba3390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fb46fba1630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fb46fba3860"/>
        <function-ref name="stop" scoped="" ref="0x7fb46fba3d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fb46fd292c0" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fb46fd292c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46fd26870"/>
        <function-ref name="fired" scoped="" ref="0x7fb46fd28e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fb46fd27c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fb46fd27780"/>
        <function-ref name="getdt" scoped="" ref="0x7fb46fd241e0"/>
        <function-ref name="gett0" scoped="" ref="0x7fb46fd26cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46fd27300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fb46fd28020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fb46fd26260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fb46fd284f0"/>
        <function-ref name="stop" scoped="" ref="0x7fb46fd289c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7fb46fd21e20" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7fb46fd21e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46fd1c390"/>
        <function-ref name="fired" scoped="" ref="0x7fb46fd1f970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fb46fd1d720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fb46fd1d2a0"/>
        <function-ref name="getdt" scoped="" ref="0x7fb46fd1cc90"/>
        <function-ref name="gett0" scoped="" ref="0x7fb46fd1c810"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46fd1fdf0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fb46fd20a80"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fb46fd1dd30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fb46fd1f020"/>
        <function-ref name="stop" scoped="" ref="0x7fb46fd1f4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fb46fd1a2e0" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fb46fd1a2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fd19020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb46fd21080" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb46fd21080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb46fd21400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fb46fc3f020" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fb46fc3f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46fc3d870"/>
        <function-ref name="fired" scoped="" ref="0x7fb46fc3e840"/>
        <function-ref name="startAt" scoped="" ref="0x7fb46fc3d220"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46fc3ed00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fb46fc3dd30"/>
        <function-ref name="start" scoped="" ref="0x7fb46fc3fe30"/>
        <function-ref name="stop" scoped="" ref="0x7fb46fc3e380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb46fc41760" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb46fc41760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb46fc41ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fb46f57f2a0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fb46f57f2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46f57db30"/>
        <function-ref name="fired" scoped="" ref="0x7fb46f57eaa0"/>
        <function-ref name="startAt" scoped="" ref="0x7fb46f57d4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46f57d020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fb46f57b020"/>
        <function-ref name="start" scoped="" ref="0x7fb46f57e0d0"/>
        <function-ref name="stop" scoped="" ref="0x7fb46f57e5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb46f580a10" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb46f580a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb46f580d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fb46f567a80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46f567a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb46f567e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb46f565020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb46f5651b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb46f565340"/>
        <function-ref name="fired" scoped="" ref="0x7fb46f5654d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fb46f569020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46f569020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb46f5693a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb46f569530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb46f5696c0"/>
        <function-ref name="get" scoped="" ref="0x7fb46f569850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb46f5699e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46f569b70"/>
        <function-ref name="getMode" scoped="" ref="0x7fb46f569d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46f568020"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46f5681b0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb46f568340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb46f5684d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fb46f568760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46f568760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb46f568ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7fb46f568c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb46f568e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb46f567020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb46f5671b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb46f567340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb46f5674d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb46f567660"/>
        <function-ref name="setControl" scoped="" ref="0x7fb46f5677f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7fb46fcf4210" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46fcf4210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb46fcf4590"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb46fcf4720"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb46fcf48b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb46fcf4a40"/>
        <function-ref name="fired" scoped="" ref="0x7fb46fcf4bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7fb46fcfbbf0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46fcfbbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb46fcf8020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb46fcf81b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb46fcf8340"/>
        <function-ref name="get" scoped="" ref="0x7fb46fcf84d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb46fcf8660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46fcf87f0"/>
        <function-ref name="getMode" scoped="" ref="0x7fb46fcf8980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46fcf8b10"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46fcf8ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7fb46fcf8e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb46fcf7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7fb46fcf78b0" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46fcf78b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb46fcf7c30"/>
        <function-ref name="getControl" scoped="" ref="0x7fb46fcf7dc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb46fcf6020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb46fcf61b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb46fcf6340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb46fcf64d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb46fcf6660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb46fcf67f0"/>
        <function-ref name="setControl" scoped="" ref="0x7fb46fcf6980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7fb46f55d760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7fb46f55d760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7fb46f55dae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7fb46f55dc70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7fb46f55de00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7fb46f55b020"/>
        <function-ref name="fired" scoped="" ref="0x7fb46f55b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7fb46f560dd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7fb46f560dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7fb46f55f180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7fb46f55f310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb46f55f4a0"/>
        <function-ref name="get" scoped="" ref="0x7fb46f55f630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb46f55f7c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46f55f950"/>
        <function-ref name="getMode" scoped="" ref="0x7fb46f55fae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46f55fc70"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46f55fe00"/>
        <function-ref name="setMode" scoped="" ref="0x7fb46f55e020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7fb46f55e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fb46f563bf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fb46f563bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46f5604e0"/>
        <function-ref name="fired" scoped="" ref="0x7fb46f5614e0"/>
        <function-ref name="startAt" scoped="" ref="0x7fb46f561e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46f5619a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fb46f5609a0"/>
        <function-ref name="start" scoped="" ref="0x7fb46f562a80"/>
        <function-ref name="stop" scoped="" ref="0x7fb46f561020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7fb46f563360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7fb46f563360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7fb46f5636e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7fb46f55e440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7fb46f55e440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7fb46f55e7c0"/>
        <function-ref name="getControl" scoped="" ref="0x7fb46f55e950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7fb46f55eae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7fb46f55ec70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7fb46f55ee00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7fb46f55d020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7fb46f55d1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7fb46f55d340"/>
        <function-ref name="setControl" scoped="" ref="0x7fb46f55d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fb46fca1020" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fb46fca1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fca1e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46fca0800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46fca0340"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46fca0cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7fb46fc7f950" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7fb46fc7f950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fc7e780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46fc7c150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46fc7ec40"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46fc7c610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7fb46fc9c5f0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fb46fc9c5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fc80430"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46fc80db0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46fc808f0"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46fc7f2a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7fb46f5795f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fb46f5795f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46f577e50"/>
        <function-ref name="fired" scoped="" ref="0x7fb46f578e00"/>
        <function-ref name="startAt" scoped="" ref="0x7fb46f577800"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46f577340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fb46f576340"/>
        <function-ref name="start" scoped="" ref="0x7fb46f578430"/>
        <function-ref name="stop" scoped="" ref="0x7fb46f578940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7fb46f573d20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7fb46f573d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb4708421f0"/>
            <typename><typedef-ref name="T32khz" ref="0x7fb470842560"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46f570670"/>
        <function-ref name="fired" scoped="" ref="0x7fb46f571550"/>
        <function-ref name="startAt" scoped="" ref="0x7fb46f570020"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46f571a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fb46f570b30"/>
        <function-ref name="start" scoped="" ref="0x7fb46f572b60"/>
        <function-ref name="stop" scoped="" ref="0x7fb46f571090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fb46f5769b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fb46f5769b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46f5747e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46f5731b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46f574ca0"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46f573670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7fb46fc0a490" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7fb46fc0a490"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb46fc0a810"/>
        <function-ref name="runTask" scoped="" ref="0x7fb46fc0a9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7fb46fc0e1d0" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7fb46fc0e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46fc0cb30"/>
        <function-ref name="fired" scoped="" ref="0x7fb46fc0d9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7fb46fc0c4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46fc0c020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7fb46fc0a020"/>
        <function-ref name="start" scoped="" ref="0x7fb46fc0d020"/>
        <function-ref name="stop" scoped="" ref="0x7fb46fc0d530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fb46fc14cf0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb46fc14cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46fc0f220"/>
        <function-ref name="fired" scoped="" ref="0x7fb46fc127c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fb46fc11590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fb46fc11110"/>
        <function-ref name="getdt" scoped="" ref="0x7fb46fc0fb20"/>
        <function-ref name="gett0" scoped="" ref="0x7fb46fc0f6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46fc12c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fb46fc13940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fb46fc11ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fb46fc13e10"/>
        <function-ref name="stop" scoped="" ref="0x7fb46fc12340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7fb46fbbae80" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7fb46fbbae80"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7fb46fbb9220"/>
        <function-ref name="runTask" scoped="" ref="0x7fb46fbb93b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7fb46fbbfc30" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7fb46fbbfc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46fbba110"/>
        <function-ref name="fired" scoped="" ref="0x7fb46fbbd6a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fb46fbbb4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fb46fbbb020"/>
        <function-ref name="getdt" scoped="" ref="0x7fb46fbbaa10"/>
        <function-ref name="gett0" scoped="" ref="0x7fb46fbba590"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46fbbdb20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fb46fbbe860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fb46fbbbab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fb46fbbed30"/>
        <function-ref name="stop" scoped="" ref="0x7fb46fbbd220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7fb46fbc5690" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7fb46fbc5690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7fb46fbc1cf0"/>
        <function-ref name="fired" scoped="" ref="0x7fb46fbc2260"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7fb46fbc1090"/>
        <function-ref name="isOneShot" scoped="" ref="0x7fb46fbc2ba0"/>
        <function-ref name="getdt" scoped="" ref="0x7fb46fbbf680"/>
        <function-ref name="gett0" scoped="" ref="0x7fb46fbbf1e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7fb46fbc2700"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7fb46fbc4390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7fb46fbc16c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7fb46fbc4880"/>
        <function-ref name="stop" scoped="" ref="0x7fb46fbc4d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fb46fbb7cf0" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fb46fbb7cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fbb6980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7fb46fbac020" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7fb46fbac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fbace30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7fb46fbaa800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7fb46fbaa340"/>
        <function-ref name="overflow" scoped="" ref="0x7fb46fbaacc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7fb46fb9ec90" loc="20:../../../tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7fb46fb9ec90"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7fb470843600"/>
            <typename><typedef-ref name="TMilli" ref="0x7fb470843d70"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7fb46fb9b8e0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7fb470839d30" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7fb4707debb0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fb4707ef9d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fb4707de260" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fb4707ef9d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7fb4707de5e0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb4707de910" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fb4707cf620" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb4707cf020" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb4707cf350" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fb4707ce6d0" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fb4707d22a0" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb4707d2020" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fb4707d07f0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb4707d0210" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fb4707d0560" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fb4707bf8b0" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fb4707bf8b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fb4707bc270" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fb47082ea10" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fb47082ea10"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fb4707c47c0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fb4707c8020" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7fb4707c7da0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fb4707c77d0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fb4707c7b10" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7fb4707c7020" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7fb4707c38a0" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7fb4707c3020" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fb4707c8800" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7fb4707cc5b0" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fb4707cc330" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7fb4707c6dc0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fb4707c67f0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7fb4707c6b30" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7fb4707c90b0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fb4707ccdf0" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7fb47187c920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fb4707c98b0" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7fb470836b20" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7fb470835350" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7fb470835b30" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7fb470833b00" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7fb4708312b0" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fb470831ac0" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7fb470833350" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fb470830670" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7fb4708303f0" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7fb470836390" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7fb470832350" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7fb470832ae0" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7fb47083cab0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fb47083c830" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7fb47083a020" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fb47083bd30" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fb470840d80" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fb47083b350" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fb4707a0730" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fb4707a0e60" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fb4707a2880" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fb47079fcf0" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fb4707a0020" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fb47079f5b0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fb4707a6a90" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fb4707a2190" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fb4707a5020" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7fb4707757c0" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7fb470774020" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7fb470770b10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fb470770890" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7fb470776020" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7fb470773020" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7fb47076f490" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7fb470774760" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fb470775020" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7fb470771770" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7fb4707767c0" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7fb470778020" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7fb4707737a0" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7fb470770020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7fb470771020" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7fb470778750" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7fb47058f740" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7fb470591990" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7fb47058f020" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7fb4705912b0" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7fb470590120" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7fb4705934d0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7fb470593bb0" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7fb470590840" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7fb470b22020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7fb470de33a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7fb47053c020" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fb47053dcc0" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7fb470540390" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fb470586b60"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fb470585650"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fb47053c890" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7fb47053b7b0" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7fb47053d560" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fb47053b020" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7fb470540b30" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7fb47053f350" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7fb47053fda0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fb470586b60"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fb470585650"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fb47053fb20" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7fb470586b60"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7fb470585650"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fb47052e0e0" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7fb47052c730" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7fb47052c4b0" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7fb47052b2e0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fb47052b060" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fb47052dca0" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fb47052d3e0" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7fb47052ea90" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7fb47052e810" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7fb4705353e0" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7fb470535d60" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7fb470535ae0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7fb470534790" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fb470534510" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7fb4705332a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7fb470533020" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fb470533990" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fb470546810" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fb4705432a0" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7fb470543020" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7fb470544020" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7fb47054baa0" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7fb470544760" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fb4705489b0" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fb470546120" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fb470548270" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fb4705470e0" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7fb4705479f0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fb470547770" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7fb470543cb0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7fb470543a30" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fb4705089f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7fb4708747f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7fb470871020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7fb470874020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7fb470cfc810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7fb470ea2020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7fb470ea1020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7fb470ea2790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7fb470e96270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7fb470e96ac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7fb470359020" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb470362c60" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7fb470358110" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb470359e10" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fb470354490" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb470356e50" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb4703541c0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fb470356560" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7fb4703575e0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb470357020" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb470357350" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7fb470360cd0" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
              <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb470360370" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7fb4703606c0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb4703609f0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7fb470340ad0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb470340850" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7fb47033dcd0" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb47033da50" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7fb47033c020" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb47033ece0" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7fb470345d30" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fb4707ef5f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fb470345ab0" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7fb47034ea10" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fb4707ef9d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fb47034e790" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7fb470361e50" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fb4707ef9d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7fb470350950" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7fb4707ef9d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fb4703506d0" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7fb47034b3a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fb4707ef9d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fb47034cd70" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fb47034b110" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fb4707ef9d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7fb47034de50" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fb4707ef9d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fb47034d870" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7fb47034dbc0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7fb4707ef9d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7fb470349810" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7fb4707ef210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fb470349590" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7fb470346b90" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fb4707ef210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fb4703465e0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7fb470346900" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7fb4707ef210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7fb47034a600" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fb47034a380" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7fb4703432f0" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fb4707ef5f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7fb470344cf0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7fb470343060" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7fb4707ef5f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7fb470342190" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7fb4707ef5f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fb470330770" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb4703301b0" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb4703304e0" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7fb470329020" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb47032a890" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb47032abc0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7fb47032a020" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7fb47032dad0" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb47032d850" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fb47032f020" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb47032c9e0" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7fb47032cd30" loc="100:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7fb4702cbb00" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb4702cb4f0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7fb4702cb870" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7fb4702cfc70" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7fb4702ccb60" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7fb4702cc560" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7fb4707e13c0"/>
                <typename><typedef-ref name="message_t" ref="0x7fb4707dfa00"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7fb4702cc8d0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7fb4702ae390" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fb4702aeba0" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7fb4702ac9e0" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7fb4702ac270" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7fb4702b6270" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7fb4702b56c0" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7fb4702b2390" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fb4702b2110" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7fb4702b3020" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7fb4702b6de0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fb4702b6b60" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7fb4702b2bf0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7fb4702b38d0" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7fb4702bed70" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7fb4702bd750" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7fb4702be400" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7fb4702be180" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7fb4702bc350" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7fb4702bc0d0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7fb4702b9020" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7fb4702b9c40" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fb4702b99c0" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7fb4702b8730" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7fb4702b84b0" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fb470183c40" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fb470183670" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb4701839b0" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7fb47017ea70" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fb47017e7f0" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fb47017d890" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fb47017d2c0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb47017d600" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7fb47017f610" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7fb47017b2c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fb47017a820" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb47017ab60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fb47017b020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7fb47017e020" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7fb470180610" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7fb470181bd0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7fb470180020" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7fb470180370" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7fb47015b5b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fb47015b330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7fb47015bdf0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7fb470159cf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7fb470159700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7fb470159a60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7fb470157b50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7fb4700fe270" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fb4700feba0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7fb4700f9070" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fb470122450"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fb470122870"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fb4701019c0" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7fb470103990" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7fb470103020" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fb4701011f0" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fb470100470" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7fb4700f3510" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7fb4700f6cb0" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7fb4700ea2a0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fb4700ea020" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7fb4700eb780" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7fb4700c5af0" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7fb4700d1790" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7fb4700dd530" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fb470152360"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fb470152ba0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fb4700dd2b0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fb470152360"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7fb470152ba0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7fb4700d3870" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7fb4700dba40" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fb47014d2d0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fb47014db10"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fb4700db7c0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fb47014d2d0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7fb47014db10"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7fb4700cae70" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7fb4700c6480" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7fb4700db020" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fb47014f230"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7fb47014f9c0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7fb4700da270" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fb47014d2d0"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7fb47014db10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7fb4700d6020" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7fb4700d7d30" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7fb4700d7610" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7fb4700ca740" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7fb4700dc780" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fb47014f230"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fb47014f9c0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7fb4700dc500" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fb47014f230"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7fb47014f9c0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7fb4700d8420" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7fb4700c95d0" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7fb4700d8e00" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7fb4700d8b80" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7fb4700d4910" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7fb4700d30e0" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7fb4700cc840" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7fb4700ce790" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7fb4700d27e0" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7fb4700ca020" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7fb4700cf020" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7fb4700c9cf0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7fb4700d6800" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7fb47015c320"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7fb470154a10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7fb4700c84c0" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7fb4700c5350" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7fb4700dac10" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7fb4700da990" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7fb4700c44d0" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fb4700c4250" loc="224:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7fb4700ddd10" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7fb470152360"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7fb470152ba0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7fb4700d2020" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7fb4700cf770" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7fb4700cc020" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fb470122450"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fb470122870"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fb4700cdcf0" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fb470122450"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7fb470122870"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7fb4700cd2a0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fb470135420"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fb470135840"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fb4700cd020" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7fb470135420"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7fb470135840"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7fb4700c4d90" loc="231:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7fb4700c8cb0" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7fb4700d4070" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7fb4700c6be0" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7fb4700ce020" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7fb4700d1020" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fb4700bc410" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fb4700bc410"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fb4700bc650" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb4700bc650"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7fb4700bb020" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb4700bc650"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7fb4700ba120" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7fb4700bb8a0" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7fb4700ba880" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7fb470046930" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../tos/platforms/shimmer/chips/msp430/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7fb47001d780" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7fb470030c90" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7fb470023020" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fb470024ca0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7fb470038390" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7fb4700217a0" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7fb470028020" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7fb470031da0" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7fb47002fb70" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7fb470032d40" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7fb470032ac0" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7fb470034270" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7fb47002c900" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7fb470022020" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7fb47001d020" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7fb470024560" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7fb4700181f0" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7fb470014880" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7fb470036270" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7fb47002c190" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7fb47002ba90" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7fb470031650" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7fb470039190" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7fb470026d40" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7fb470026ac0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7fb47003c9f0" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7fb470021020" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7fb47001c020" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7fb4700179a0" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7fb470014120" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7fb47001f790" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7fb47001c750" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7fb4700237b0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7fb4700191f0" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7fb470036990" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7fb4700271f0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7fb47001a630" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7fb47001e790" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7fb470029760" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7fb4700294e0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7fb470015190" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7fb470026390" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7fb47001f020" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7fb470039c10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fb47010e240"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7fb47010e660"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7fb470039990" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7fb47010e240"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7fb47010e660"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7fb47002da00" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7fb470035a80" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fb470035800" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7fb47002b2a0" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7fb47002b020" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7fb4700199c0" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7fb4700323b0" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7fb470035120" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7fb470027bb0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7fb470027930" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7fb47187c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7fb470038ac0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7fb47001ce70" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7fb47001e020" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7fb470022790" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7fb4700289f0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7fb470028770" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7fb47002d2b0" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7fb470030530" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7fb470015900" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7fb470034bf0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7fb470034970" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7fb4700189b0" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7fb47002f420" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7fb4700171f0" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7fb46fed2460" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7fb46fed2cc0" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7fb47187c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7fb46fe9de00" loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7fb46fe9a020" loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7fb46fe9d570" loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7fb46fe9c6d0" loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7fb46fe9a950" loc="81:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7fb46fe8e020" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7fb470e9dc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fb46fe95090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fb46fe8fd20" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fb46fe95090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7fb46fe90020" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7fb46fe90b20" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fb46fe95090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7fb46fe908a0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7fb46fe95090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7fb46fe8f470" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7fb46fe95090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7fb46fd15c70" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7fb46fd15c70"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7fb46fd12020" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb46fd12020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7fb46fd0ec50" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb46fd12020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7fb46fd11ba0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7fb46fd0e2b0" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb46fd12020"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb46fd12020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7fb46fd0fbd0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb46fd12020"/></type-var>
          </variable>
          <variable name="dt" ref="0x7fb46fd0e020" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb46fd12020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7fb46fd0f3b0" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7fb470ea6090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7fb46fd0d480" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb46fd12020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7fb46fd12b80" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb46fd12020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7fb46fd12900" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7fb46fd12020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7fb46fd113e0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
