<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="61:TestAdcAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f19c8274370"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f19c8464a60"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f19c8464a60"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f19c829c590"/></to>
    </wire>
    <wire loc="63:TestAdcAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f19c8268590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f19c7a31890"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f19c7a31890"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f19c7a2a2a0"/></to>
    </wire>
    <wire loc="64:TestAdcAppC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f19c8288860"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f19c828de00"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer/DemoSensorC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f19c828de00"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f19c78556d0"/></to>
    </wire>
    <wire loc="65:TestAdcAppC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f19c8283360"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f19c7a50140"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer/DemoSensorNowC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f19c7a50140"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f19c734a1e0"/></to>
    </wire>
    <wire loc="66:TestAdcAppC.nc">
      <from><interface-ref name="ReadNowResource" scoped="" ref="0x7f19c8286060"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c7a5e340"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer/DemoSensorNowC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c7a5e340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c734b420"/></to>
    </wire>
    <wire loc="67:TestAdcAppC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c82777e0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c7a4c060"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer/DemoSensorStreamC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c7a4c060"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c72da4c0"/></to>
    </wire>
    <wire loc="37:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f19c8465020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c7b48bc0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f19c8465020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c7d36e50"/></to>
    </wire>
    <wire loc="96:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f19c8465020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c7808e50"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f19c8465020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c81a6660"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f19c829cc00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f19c8ac33a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f19c8ac33a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f19c849bc30"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f19c82976c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c8461020"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f19c8461020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c8461e00"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f19c8297dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f19c8465020"/></to>
    </wire>
    <wire loc="47:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f19c845d550"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f19c845fe70"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f19c845fe70"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c8430d50"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f19c845dc30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c8460b70"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f19c845c380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c7a01c40"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f19c8430d50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c8418d60"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f19c8426380"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f19c84164b0"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f19c87444c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f19c8415690"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f19c83d25a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c83106d0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f19c83c0020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c8308b30"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f19c83c9700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c8315160"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f19c83ada20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c82efcb0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f19c83d0aa0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c8316480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f19c83b4020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c82ef020"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f19c83aaa20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c82d7cb0"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f19c83bb5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c82e8220"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f19c83d3b10"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c83659d0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f19c83b0a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c82fe2f0"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f19c83b63e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c82ff610"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f19c83bf5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c8300220"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f19c83c8700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c830e7a0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f19c83aca20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c82e62f0"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f19c83bebe0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c82f86d0"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f19c83cf890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c830fac0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f19c83e3060"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c8373540"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f19c83b4da0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c82e7610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f19c83da0c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c8317020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f19c83baa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c82e16d0"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f19c83c36d0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c831ea90"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f19c83aea20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c82f67a0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f19c83cccf0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c831fde0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f19c83b51f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c82f7ac0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f19c83aba20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c82df7a0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f19c83bc0c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c82f1b30"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c836c3e0"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f19c83b3b80"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c82e0ac0"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f19c83b1a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f19c8306cb0"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f19c83b2a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c82d7020"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f19c83b7570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f19c8306020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f19c83b8020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f19c82dab30"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f19c8371450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c8372d80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f19c8371aa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f19c82d2a90"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f19c8370120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f19c82cf260"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c831d930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c8373540"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c831a020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c8372d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c8314020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c8373540"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c83137a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c8372d80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c830d610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c8373540"/></to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c830cc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c8372d80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f19c836a2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c836bbf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f19c836a940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f19c82cf9f0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f19c8369020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f19c82ce240"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c8305b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c836c3e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c83032f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c836bbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c82fd160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c836c3e0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c82fc7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c836bbf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c82f5610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c836c3e0"/></to>
    </wire>
    <wire loc="144:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c82f4c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c836bbf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c82eeb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c836c3e0"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c82ec2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c836bbf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c82e5160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c836c3e0"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c82e47a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c836bbf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c82de610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c836c3e0"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c82ddc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c836bbf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c82d6b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c836c3e0"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f19c82d42f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f19c836bbf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f19c849ab70"/></to>
    </wire>
    <wire loc="55:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f19c84932c0"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f19c8ab53b0"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer/VoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f19c78556d0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f19c7852690"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f19c7852690"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f19c7847240"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f19c7847240"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f19c8222cc0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f19c784ca10"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f19c783b200"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f19c783b200"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f19c8220b40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c7850020"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c7843d90"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c7843d90"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c7b549f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c784db60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c783c470"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c783c470"/></from>
      <to><interface-ref name="ResourceReadNow" scoped="" ref="0x7f19c821d8b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7845a60"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c783fac0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7839aa0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c82185c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7845a60"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f19c8206b10"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7832930"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7832930"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="ResourceRead" scoped="" ref="0x7f19c821ccb0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c7834cc0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c7834cc0"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7830bb0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7845a60"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/adc12/AdcP.nc">
      <from><interface-ref name="readDone" scoped="" ref="0x7f19c81ea5c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c78318b0"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c7830270"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f19c7820630"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7830bb0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f19c78213c0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81a4af0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="DMAExtension" scoped="" ref="0x7f19c81aa1d0"/></from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x7f19c81a1910"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81a2ab0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81a5370"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c801c520"/></to>
    </wire>
    <wire loc="98:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c801c520"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c7805490"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7f19c819f020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f19c801bb20"/></to>
    </wire>
    <wire loc="100:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f19c801bb20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f19c78049a0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7f19c819e020"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7f19c80b2080"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f19c817e900"/></from>
      <to><interface-ref name="Port60" scoped="" ref="0x7f19c7fc2200"/></to>
    </wire>
    <wire loc="493:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f19c7fc2200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e93100"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f19c8188960"/></from>
      <to><interface-ref name="Port61" scoped="" ref="0x7f19c7fc0200"/></to>
    </wire>
    <wire loc="494:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f19c7fc0200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e8fd10"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f19c817c7d0"/></from>
      <to><interface-ref name="Port62" scoped="" ref="0x7f19c7fbe200"/></to>
    </wire>
    <wire loc="495:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f19c7fbe200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e8a740"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f19c817a640"/></from>
      <to><interface-ref name="Port63" scoped="" ref="0x7f19c7fbc200"/></to>
    </wire>
    <wire loc="496:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f19c7fbc200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e85100"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f19c8178540"/></from>
      <to><interface-ref name="Port64" scoped="" ref="0x7f19c7fba200"/></to>
    </wire>
    <wire loc="497:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f19c7fba200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e81d10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f19c8176540"/></from>
      <to><interface-ref name="Port65" scoped="" ref="0x7f19c7fb8200"/></to>
    </wire>
    <wire loc="498:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f19c7fb8200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e7b740"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f19c8174540"/></from>
      <to><interface-ref name="Port66" scoped="" ref="0x7f19c7fb6200"/></to>
    </wire>
    <wire loc="499:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f19c7fb6200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e76100"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f19c8172540"/></from>
      <to><interface-ref name="Port67" scoped="" ref="0x7f19c7fb4200"/></to>
    </wire>
    <wire loc="500:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f19c7fb4200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e72d10"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f19c818f020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f19c83e3060"/></to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f19c818e880"/></from>
      <to><interface-ref name="ControlA0" scoped="" ref="0x7f19c83d3b10"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f19c818dd30"/></from>
      <to><interface-ref name="ControlA1" scoped="" ref="0x7f19c83da0c0"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f19c818b120"/></from>
      <to><interface-ref name="CompareA0" scoped="" ref="0x7f19c83cccf0"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f19c818be60"/></from>
      <to><interface-ref name="CompareA1" scoped="" ref="0x7f19c83d0aa0"/></to>
    </wire>
    <wire loc="99:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f19c801b3a0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f19c7804220"/></to>
    </wire>
    <wire loc="101:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f19c7803400"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f19c801a570"/></to>
    </wire>
    <wire loc="103:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f19c7803bc0"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x7f19c78074a0"/></to>
    </wire>
    <wire loc="68:../../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f19c77fa7a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="442:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f19c800b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f40100"/></to>
    </wire>
    <wire loc="455:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f19c7ff7020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f10d10"/></to>
    </wire>
    <wire loc="531:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f19c7fad560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f02d10"/></to>
    </wire>
    <wire loc="551:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f19c7f89570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e76100"/></to>
    </wire>
    <wire loc="532:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f19c7fab580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7efd740"/></to>
    </wire>
    <wire loc="460:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f19c7ff3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f06100"/></to>
    </wire>
    <wire loc="473:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f19c7fde200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ed7e00"/></to>
    </wire>
    <wire loc="486:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f19c7fca200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ea7740"/></to>
    </wire>
    <wire loc="535:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f19c7fa5580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ef4d10"/></to>
    </wire>
    <wire loc="545:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f19c7f95570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e93100"/></to>
    </wire>
    <wire loc="557:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f19c7f80580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e72d10"/></to>
    </wire>
    <wire loc="445:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f19c8005020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f31100"/></to>
    </wire>
    <wire loc="536:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f19c7fa3580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7eef740"/></to>
    </wire>
    <wire loc="450:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f19c8001020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f28740"/></to>
    </wire>
    <wire loc="463:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f19c7fed020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ef8100"/></to>
    </wire>
    <wire loc="476:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f19c7fd8200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ec8d10"/></to>
    </wire>
    <wire loc="489:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f19c7fc4200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e98740"/></to>
    </wire>
    <wire loc="440:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f19c800f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f4ad10"/></to>
    </wire>
    <wire loc="453:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f19c7ffb020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f1a860"/></to>
    </wire>
    <wire loc="466:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f19c7fe7020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ee9100"/></to>
    </wire>
    <wire loc="530:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f19c7faf580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f02d10"/></to>
    </wire>
    <wire loc="548:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f19c7f8f570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e85100"/></to>
    </wire>
    <wire loc="555:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f19c7f83570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e72d10"/></to>
    </wire>
    <wire loc="541:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f19c7f9b580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7eacd10"/></to>
    </wire>
    <wire loc="471:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f19c7fe3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ee0a60"/></to>
    </wire>
    <wire loc="484:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f19c7fce200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7eb0100"/></to>
    </wire>
    <wire loc="549:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f19c7f8d570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e81d10"/></to>
    </wire>
    <wire loc="538:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f19c7fa1570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ebad10"/></to>
    </wire>
    <wire loc="443:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f19c8009020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f3cd10"/></to>
    </wire>
    <wire loc="456:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f19c7ff5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f0b740"/></to>
    </wire>
    <wire loc="461:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f19c7ff1020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f02d10"/></to>
    </wire>
    <wire loc="474:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f19c7fdc200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ed2740"/></to>
    </wire>
    <wire loc="487:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f19c7fc8200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ea1100"/></to>
    </wire>
    <wire loc="540:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f19c7f9d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7eb0100"/></to>
    </wire>
    <wire loc="438:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f19c8014140"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f536d0"/></to>
    </wire>
    <wire loc="451:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f19c7fff020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f23100"/></to>
    </wire>
    <wire loc="464:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f19c7feb020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ef4d10"/></to>
    </wire>
    <wire loc="477:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f19c7fd6200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ec3740"/></to>
    </wire>
    <wire loc="542:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f19c7f99580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ee9100"/></to>
    </wire>
    <wire loc="546:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f19c7f93570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e8fd10"/></to>
    </wire>
    <wire loc="552:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f19c7f87570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e72d10"/></to>
    </wire>
    <wire loc="482:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f19c7fd2200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ebad10"/></to>
    </wire>
    <wire loc="543:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f19c7f97580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ee5d10"/></to>
    </wire>
    <wire loc="441:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f19c800d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f45740"/></to>
    </wire>
    <wire loc="454:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f19c7ff9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f15270"/></to>
    </wire>
    <wire loc="467:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f19c7fe5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ee5d10"/></to>
    </wire>
    <wire loc="539:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f19c7f9f580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7eb5740"/></to>
    </wire>
    <wire loc="550:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f19c7f8b570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e7b740"/></to>
    </wire>
    <wire loc="472:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f19c7fe0200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7edb460"/></to>
    </wire>
    <wire loc="485:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f19c7fcc200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7eacd10"/></to>
    </wire>
    <wire loc="444:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f19c8007020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f36740"/></to>
    </wire>
    <wire loc="449:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f19c8003020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f2dd10"/></to>
    </wire>
    <wire loc="462:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f19c7fef020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7efd740"/></to>
    </wire>
    <wire loc="475:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f19c7fda200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ecd100"/></to>
    </wire>
    <wire loc="488:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f19c7fc6200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e9dd10"/></to>
    </wire>
    <wire loc="439:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f19c8012020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f4e100"/></to>
    </wire>
    <wire loc="452:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f19c7ffd020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f1fd10"/></to>
    </wire>
    <wire loc="465:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f19c7fe9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7eef740"/></to>
    </wire>
    <wire loc="478:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f19c7fd4200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ebe100"/></to>
    </wire>
    <wire loc="534:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f19c7fa7560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ef8100"/></to>
    </wire>
    <wire loc="547:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f19c7f91570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e8a740"/></to>
    </wire>
    <wire loc="533:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f19c7fa9580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7ef8100"/></to>
    </wire>
    <wire loc="483:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f19c7fd0200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7eb5740"/></to>
    </wire>
    <wire loc="554:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f19c7f85570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e76100"/></to>
    </wire>
    <wire loc="558:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f19c7f7e580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7e98740"/></to>
    </wire>
    <wire loc="529:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f19c7fb11f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f19c7f06100"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7d7c6f0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7d7bad0"/></from>
      <to><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7d77920"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f19c7d7a860"/></from>
      <to><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f19c7dec020"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f19c7d78540"/></from>
      <to><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f19c7decbe0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOnTimer" scoped="" ref="0x7f19c7de4270"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c7b97370"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c7b97370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f19c7d3b020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffTimer" scoped="" ref="0x7f19c7dd1680"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c7b91d10"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c7b91d10"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f19c7d3b020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7f19c7dccc30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c7b8a750"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f19c7b8a750"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f19c7d3b020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7f19c7deb800"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7f19c80b2080"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <from><interface-ref name="switchOff" scoped="" ref="0x7f19c7d742a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f19c7d3b020"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f19c7d32c30"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f19c7d32c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c7bb8150"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f19c7d36e50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c7c34020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f19c7d28500"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f19c7baa790"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f19c7c34020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c74970c0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f19c7bb2640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f19c7c072f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f19c7c02850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f19c7c34870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f19c7c34870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f19c7491b10"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f19c7ba9a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f19c7cacb50"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f19c7cacb50"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f19c7c90cf0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f19c74970c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c747c660"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f19c748a3a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f19c7497910"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f19c7497910"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f19c747a020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f19c748d020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f19c7cacb50"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7477190"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7481450"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7481450"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7476770"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7480a80"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7480a80"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7475a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c747fda0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c747fda0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f19c83c0020"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f19c83b7570"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f19c83bf5a0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB1" scoped="" ref="0x7f19c83b63e0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f19c83bebe0"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f19c83b51f0"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f19c83bc0c0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f19c83b4020"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f19c83bb5a0"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f19c83b4da0"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f19c83baa50"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f19c83b3b80"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f19c83b8020"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f19c83b2a20"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f19c7c720f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f19c7caab70"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f19c7caab70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f19c7ca4b80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7c95c50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f19c7bfe9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f19c7bada00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c73ea7e0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c783fac0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7b4f020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c783fac0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c7b4dce0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c73ed960"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c73ed960"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7b4e720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c73ec5a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c73ec5a0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="31:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c7b549f0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c7ad2cb0"/></to>
    </wire>
    <wire loc="32:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7b41580"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7b4f020"/></to>
    </wire>
    <wire loc="33:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c7aa28f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c7b4dce0"/></to>
    </wire>
    <wire loc="35:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x7f19c7aa6bf0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c7b479c0"/></to>
    </wire>
    <wire loc="38:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f19c7b44d50"/></from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7b4e720"/></to>
    </wire>
    <wire loc="39:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f19c7b40900"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f19c7ad94f0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f19c7ad94f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f19c73d71d0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="bufferDone" scoped="" ref="0x7f19c7b15020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamDone" scoped="" ref="0x7f19c7b24600"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamFail" scoped="" ref="0x7f19c7b1ed50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f19c7adab10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c73de7b0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f19c73de7b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c73c1020"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f19c73d1b90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f19c73dd020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f19c73dd020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f19c73c18b0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f19c73d3690"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f19c7cacb50"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c73bd9c0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c73c8d20"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c73c8d20"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c73bb120"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c73c5440"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c73c5440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c73ba440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c73c4760"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c73c4760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c73eb590"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c73ebe80"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f19c7377300"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c73ea7e0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f19c73790a0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c82185c0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7839aa0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f19c8206b10"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c736c270"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c736c270"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SubResourceReadNow" scoped="" ref="0x7f19c821a040"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c736d550"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c736d550"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c736a5e0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7839aa0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c736b270"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c736bb60"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f19c7359020"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c736a5e0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f19c735cc60"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f19c734a1e0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f19c73386b0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c734b420"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c73398a0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f19c7350140"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f19c73442d0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f19c73442d0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f19c8222cc0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f19c73386b0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f19c8220b40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c734f8c0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c73400b0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c73400b0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c7b549f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c73398a0"/></from>
      <to><interface-ref name="ResourceReadNow" scoped="" ref="0x7f19c821d8b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7343c00"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c733ddf0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7336020"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c82185c0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7343c00"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f19c8206b10"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7330c30"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7330c30"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="ResourceRead" scoped="" ref="0x7f19c821ccb0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c7330020"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c7330020"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c732d020"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7343c00"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c732fbd0"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c732e590"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f19c731f630"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c732d020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f19c73203c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c73117e0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c733ddf0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7b4f020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c733ddf0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c7b4dce0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c7315900"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c7315900"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7b4e720"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7313590"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7313590"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c7312590"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c7312e80"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f19c7302630"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c73117e0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f19c7303390"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c82185c0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7336020"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f19c8206b10"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c72f7590"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c72f7590"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SubResourceReadNow" scoped="" ref="0x7f19c821a040"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c72f88a0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c72f88a0"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72f57e0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7336020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c72f6590"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c72f6e80"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f19c72e42a0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72f57e0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f19c72e6020"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/shimmer/VoltageStreamC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c72da4c0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c72d3540"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c72d3540"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c72c54f0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f19c72d6d80"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f19c72ca980"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x7f19c72ca980"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x7f19c8222cc0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f19c72cfe30"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f19c72be9d0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x7f19c72be9d0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x7f19c8220b40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x7f19c72c54f0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x7f19c7b549f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c72cf0c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c72bfc60"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c72bfc60"/></from>
      <to><interface-ref name="ResourceReadNow" scoped="" ref="0x7f19c821d8b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72c81c0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72c1260"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72bc280"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c82185c0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72c81c0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f19c8206b10"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c72b50e0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c72b50e0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="ResourceRead" scoped="" ref="0x7f19c821ccb0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c72b6470"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c72b6470"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72b22c0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72c81c0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c72b3060"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c72b3950"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f19c72a49e0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72b22c0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f19c72a5710"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7297bb0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72c1260"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7b4f020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72c1260"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c7b4dce0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c729ab90"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c729ab90"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7b4e720"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c72998b0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c72998b0"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c72988b0"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c7297270"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f19c7288e00"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7297bb0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f19c7289ba0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c82185c0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72bc280"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7f19c8206b10"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c727cd70"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c727cd70"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="SubResourceReadNow" scoped="" ref="0x7f19c821a040"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c727c160"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f19c727c160"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7279020"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72bc280"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c727bd30"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c727a650"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7f19c726a9e0"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7279020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7f19c726b670"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f19c7a01c40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f19c7a2dc40"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f19c7a215a0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f19c7a04380"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f19c7a04380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f19c79fe710"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f19c7a277f0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f19c7a036a0"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f19c7a036a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f19c79e91d0"/></to>
    </wire>
    <wire loc="57:../../../tos/platforms/shimmer2r/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f19c7a26b10"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f19c7a029c0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f19c7a029c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f19c79e4d70"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f19c79ed930"/></from>
      <to><interface-ref name="Port40" scoped="" ref="0x7f19c7fe3020"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f19c79e8480"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f19c7fde200"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f19c79e2020"/></from>
      <to><interface-ref name="Port43" scoped="" ref="0x7f19c7fdc200"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="38:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer2r/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="38:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/shimmer2r/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="TestAdcC" loc="45:TestAdcC.nc">
      <documentation loc="36:TestAdcC.nc">
        <short>&#10; Tests the AdcC subsystem and switches on leds 0, 1 and 2.</short>
        <long>&#10; Tests the AdcC subsystem and switches on leds 0, 1 and 2.&#10; if the test is successful:&#10;   LED0 denotes a successful Read operation,&#10;   LED1 denotes a successful ReadNow operation,&#10;   LED2 denotes a successful ReadStream operation.&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestAdcAppC.Sensor" loc="49(TestAdcAppC.Sensor):../../../tos/platforms/shimmer/DemoSensorC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorC.nc">
        <short> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value.</short>
        <long> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value. The platform author chooses which sensor actually sits&#10; behind DemoSensorC, and though it's probably Voltage, Light, or&#10; Temperature, there are no guarantees.&#10;&#10; This particular DemoSensorC on the telosb platform provides a&#10; voltage reading, using VoltageC. &#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10; &#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DemoSensorC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor" loc="43(TestAdcAppC.Sensor.DemoSensor):../../../tos/platforms/shimmer/VoltageC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer/VoltageC.nc">
        <short>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.</short>
        <long>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC" loc="43(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC):../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <documentation loc="32:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
        <short>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.</short>
        <long>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:10 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InternalVoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC" loc="47(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC):../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AdcP" loc="36:../../../tos/chips/msp430/adc12/AdcP.nc" safe="">
      <module/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient" loc="43(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P" loc="37:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <configuration/>
    </component>
    <component qname="Msp430Adc12ImplP" loc="37:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc" safe="">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter" loc="83(Msp430Adc12P.Arbiter):../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <documentation loc="62:../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleRoundRobinArbiterC"/>
        <arguments>
          <value cst="S:Msp430Adc12C.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Queue" loc="42(Msp430Adc12P.Arbiter.Queue):../../../tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Arbiter" loc="49(Msp430Adc12P.Arbiter.Arbiter):../../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP" loc="50:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
        <short> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter.</short>
        <long> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter. It checks whether the client's&#10; adc configuration requires the internal reference voltage generator of the&#10; MSP430 to be enabled during the conversion by inspecting the client's&#10; configuration data (using the &#60;code>AdcConfigure&#60;/code> interface). If so it&#10; makes sure that Resource.granted() is held back until the reference voltage&#10; is stable. Clients SHOULD NOT wire to &#60;code>Msp430RefVoltArbiterP&#60;/code> but&#10; to the Resource interface provided by&#10; &#60;code>Msp430Adc12ClientAutoRVGC&#60;/code>.&#10; &#10; @author Jan Hauer&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltGeneratorP" loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterImplP" loc="36:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOnDelayTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffDelayTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffSettleTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC" loc="47(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC):../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadStreamClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP" loc="19:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <documentation loc="10:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
        <short>&#10; Support component for AdcReadStreamClientC.</short>
        <long>&#10; Support component for AdcReadStreamClientC.&#10;&#10; @author David Gay&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AdcStreamP" loc="46:../../../tos/chips/msp430/adc12/AdcStreamP.nc" safe="">
      <documentation loc="39:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
        <short>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).</short>
        <long>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm" loc="41(WireAdcStreamP.Alarm):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom" loc="41(WireAdcStreamP.Alarm.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer" loc="37(WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm" loc="43(WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm.Transform" loc="51(WireAdcStreamP.Alarm.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.ArbitrateReadStream" loc="23(WireAdcStreamP.ArbitrateReadStream):../../../tos/system/ArbitratedReadStreamC.nc">
      <documentation loc="10:../../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadStreamC"/>
        <arguments>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient" loc="43(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430InternalVoltageP" loc="34:../../../tos/chips/msp430/sensors/Msp430InternalVoltageP.nc">
      <module/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC" loc="47(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC):../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient" loc="43(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.SensorNow" loc="50(TestAdcAppC.SensorNow):../../../tos/platforms/shimmer/DemoSensorNowC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorNowC.nc">
        <short> &#10; DemoSensorNowC is a generic sensor device that provides a 16-bit&#10; value that can be read from async context.</short>
        <long> &#10; DemoSensorNowC is a generic sensor device that provides a 16-bit&#10; value that can be read from async context. The platform author&#10; chooses which sensor actually sits behind DemoSensorNowC, and&#10; though it's probably Voltage, Light, or Temperature, there are no&#10; guarantees.&#10;&#10; This particular DemoSensorNowC on the telosb platform provides a&#10; voltage reading, using VoltageC.&#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-06-24 22:25:57 $&#10; &#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DemoSensorNowC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow" loc="43(TestAdcAppC.SensorNow.DemoSensorNow):../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <documentation loc="32:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
        <short>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.</short>
        <long>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:10 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InternalVoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC" loc="47(TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC):../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <instance number="1">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient" loc="43(TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC" loc="47(TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC):../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AdcReadStreamClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient" loc="43(TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC" loc="47(TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC):../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient" loc="43(TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.SensorStream" loc="49(TestAdcAppC.SensorStream):../../../tos/platforms/shimmer/DemoSensorStreamC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorStreamC.nc">
        <short> &#10; DemoSensorStreamC is a generic sensor device that provides a 16-bit&#10; value.</short>
        <long> &#10; DemoSensorStreamC is a generic sensor device that provides a 16-bit&#10; value. The platform author chooses which sensor actually sits&#10; behind DemoSensorStreamC, and though it's probably Voltage, Light, or&#10; Temperature, there are no guarantees.&#10;&#10; This particular DemoSensorStreamC on the telosb platform provides a&#10; voltage reading, using VoltageStreamC. &#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-06-24 22:25:57 $&#10; &#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DemoSensorStreamC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor" loc="43(TestAdcAppC.SensorStream.DemoSensor):../../../tos/platforms/shimmer/VoltageStreamC.nc">
      <documentation loc="32:../../../tos/platforms/shimmer/VoltageStreamC.nc">
        <short>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.</short>
        <long>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-06-24 22:25:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VoltageStreamC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC" loc="43(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC):../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <documentation loc="32:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
        <short>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.</short>
        <long>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:10 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430InternalVoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC" loc="47(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC):../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <instance number="2">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient" loc="43(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC" loc="47(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC):../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="AdcReadStreamClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient" loc="43(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC" loc="47(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC):../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient" loc="43(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient):../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="LedsC" loc="46:../../../tos/platforms/shimmer2r/LedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="45:../../../tos/platforms/shimmer2r/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/platforms/shimmer2r/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="41:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.2 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f19c83a5890" loc="40:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f19c83a5c30" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f19c83a4020" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f19c83a43a0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f19c83a4720" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f19c83a4a90" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f19c83a4e20" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f19c83a3200" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f19c83a35d0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f19c8367e70" loc="40:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f19c8364270" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="DemoSensorC" loc="49:../../../tos/platforms/shimmer/DemoSensorC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorC.nc">
        <short> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value.</short>
        <long> &#10; DemoSensorC is a generic sensor device that provides a 16-bit&#10; value. The platform author chooses which sensor actually sits&#10; behind DemoSensorC, and though it's probably Voltage, Light, or&#10; Temperature, there are no guarantees.&#10;&#10; This particular DemoSensorC on the telosb platform provides a&#10; voltage reading, using VoltageC. &#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10; &#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="VoltageC" loc="43:../../../tos/platforms/shimmer/VoltageC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/shimmer/VoltageC.nc">
        <short>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.</short>
        <long>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-05-21 22:07:24 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430InternalVoltageC" loc="43:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
        <short>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.</short>
        <long>&#10; Msp430InternalVoltageC is the voltage sensor available on the&#10; msp430-based platforms.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:10 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AdcReadClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadClientC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Adc12ClientAutoRVGC" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SimpleRoundRobinArbiterC" loc="83:../../../tos/system/SimpleRoundRobinArbiterC.nc" abstract="">
      <documentation loc="62:../../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f19c807b850" loc="83:../../../tos/system/SimpleRoundRobinArbiterC.nc">
          <component-ref qname="SimpleRoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f19c8073b30" loc="42:../../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f19c7f799f0" loc="40:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f19c7f79da0" loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f19c7f781a0" loc="42:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f19c7f78550" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f19c7f788c0" loc="44:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f19c7ce33b0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f19c7ce33b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f19c7ca5c80" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f19c7ca5c80"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f19c7c8f570" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f19c7c8f570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f19c7c8fd40" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f19c7c8fd40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f19c7c8d160" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f19c7c8d160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f19c7c8d940" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f19c7c8d940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f19c7c8dd10" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f19c7c8c540" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f19c7c8c540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f19c7cb26d0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f19c7cb26d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f19c7c6b020" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f19c7c6b020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f19c7c6b410" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f19c7c6b410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f19c7c6bbf0" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f19c7c6bbf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f19c7c69020" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f19c7c2fcc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f19c7c2fcc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f19c7bf9230" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f19c7bf9230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f19c7bf9560" loc="46:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f19c7babdd0" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f19c7babdd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ConfAlertC" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadStreamClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ArbitratedReadStreamC" loc="23:../../../tos/system/ArbitratedReadStreamC.nc" abstract="">
      <documentation loc="10:../../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <constant name="nClients" ref="0x7f19c7ad13b0" loc="23:../../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
          </type-int>
        </constant>
        <typedef name="val_t" ref="0x7f19c7ad1700" loc="23:../../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c7ad1700"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadNowClientC" loc="47:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="DemoSensorNowC" loc="50:../../../tos/platforms/shimmer/DemoSensorNowC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorNowC.nc">
        <short> &#10; DemoSensorNowC is a generic sensor device that provides a 16-bit&#10; value that can be read from async context.</short>
        <long> &#10; DemoSensorNowC is a generic sensor device that provides a 16-bit&#10; value that can be read from async context. The platform author&#10; chooses which sensor actually sits behind DemoSensorNowC, and&#10; though it's probably Voltage, Light, or Temperature, there are no&#10; guarantees.&#10;&#10; This particular DemoSensorNowC on the telosb platform provides a&#10; voltage reading, using VoltageC.&#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-06-24 22:25:57 $&#10; &#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="DemoSensorStreamC" loc="49:../../../tos/platforms/shimmer/DemoSensorStreamC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/shimmer/DemoSensorStreamC.nc">
        <short> &#10; DemoSensorStreamC is a generic sensor device that provides a 16-bit&#10; value.</short>
        <long> &#10; DemoSensorStreamC is a generic sensor device that provides a 16-bit&#10; value. The platform author chooses which sensor actually sits&#10; behind DemoSensorStreamC, and though it's probably Voltage, Light, or&#10; Temperature, there are no guarantees.&#10;&#10; This particular DemoSensorStreamC on the telosb platform provides a&#10; voltage reading, using VoltageStreamC. &#10;&#10; To convert from ADC counts to actual voltage, divide this reading&#10; by 4096 and multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-06-24 22:25:57 $&#10; &#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="VoltageStreamC" loc="43:../../../tos/platforms/shimmer/VoltageStreamC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/shimmer/VoltageStreamC.nc">
        <short>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.</short>
        <long>&#10; VoltageC is a common name for the Msp430InternalVoltageC voltage&#10; sensor available on the telosb platform.&#10;&#10; To convert from ADC counts to actual voltage, divide by 4096 and&#10; multiply by 3.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2008-06-24 22:25:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f19c8465020" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f19c8465020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c84653a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f19c8464a60" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f19c8464a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f19c8464de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c8461020" loc="40:../../../tos/platforms/shimmer2r/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c8461020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c84613a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f19c845dc30" loc="6:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f19c845dc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c845c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c8461e00" loc="4:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c8461e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c845d1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f19c845d550" loc="5:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f19c845d550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c845d8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f19c845c380" loc="7:../../../tos/platforms/shimmer2r/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f19c845c380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c845c700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c8460b70" loc="39:../../../tos/platforms/shimmer2r/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c8460b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c8456020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f19c845fe70" loc="39:../../../tos/platforms/shimmer2r/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f19c845fe70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c8430220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f19c8426380" loc="40:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f19c8426380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f19c842c340"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f19c8426890"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f19c8426a20"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f19c8426bb0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f19c8426700"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f19c8426d40"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f19c842c020"/>
        <function-ref name="initClocks" scoped="" ref="0x7f19c842c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c8430d50" loc="39:../../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c8430d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c842d100"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f19c84164b0" loc="46:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f19c84164b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f19c8415350"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f19c84169c0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f19c8416b50"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f19c8416ce0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f19c8416830"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f19c8416e70"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f19c8415030"/>
        <function-ref name="initClocks" scoped="" ref="0x7f19c84151c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f19c8415690" loc="47:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f19c8415690"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f19c8415a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c8418d60" loc="45:../../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c8418d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c8416180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f19c83d25a0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f19c83d25a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83d2920"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83d2ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83d2c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83d2dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83d1020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83d11b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83d1340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83d14d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83d1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f19c83c0020" loc="51:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f19c83c0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83c03a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83c0530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83c06c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83c0850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83c09e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83c0b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83c0d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83bf020"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83bf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f19c83c9700" loc="47:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f19c83c9700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83c9a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83c9c10"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83c9da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83c8020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83c81b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83c8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f19c83ada20" loc="68:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f19c83ada20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83adda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83ac020"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83ac1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83ac340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83ac4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83ac660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f19c83d0aa0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f19c83d0aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83d0e20"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83cf020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83cf1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83cf340"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83cf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f19c83b4020" loc="61:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f19c83b4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83b43a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83b4530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83b46c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83b4850"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83b49e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f19c83aaa20" loc="71:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f19c83aaa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83aada0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83a9020"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83a91b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83a9340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83a94d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83a9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f19c83bb5a0" loc="55:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f19c83bb5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83bb920"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83bbab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83bbc40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83bbdd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83ba020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83ba1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83ba340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83ba4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83ba660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f19c83d3b10" loc="40:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f19c83d3b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83db020"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83db1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83db340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83db4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83db660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83db7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83db980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83dbb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83dbca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f19c83b0a20" loc="66:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f19c83b0a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83b0da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83ae020"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83ae1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83ae340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83ae4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83ae660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f19c83b63e0" loc="59:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f19c83b63e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83b6760"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83b68f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83b6a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83b6c10"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83b6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f19c83bf5a0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f19c83bf5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83bfa20"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83bfbb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83bfd40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83be020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83be1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83be340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83be4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83be660"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83be7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f19c83c8700" loc="48:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f19c83c8700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83c8a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83c8c10"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83c8da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83c2020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83c21b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83c2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f19c83aca20" loc="69:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f19c83aca20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83acda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83ab020"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83ab1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83ab340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83ab4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83ab660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f19c83bebe0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f19c83bebe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83bd020"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83bd1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83bd340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83bd4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83bd660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83bd7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83bd980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83bdb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83bdca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f19c83cf890" loc="45:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f19c83cf890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83cfc10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83cfda0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83ca020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83ca1b0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83ca340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f19c83e3060" loc="39:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f19c83e3060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c83e33e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c83e3570"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83e3700"/>
        <function-ref name="get" scoped="" ref="0x7f19c83e3890"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83e3a20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83e3bb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c83e3d40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83e2020"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c83e21b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c83e2340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c83e24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f19c83b4da0" loc="62:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f19c83b4da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83b3180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83b3310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83b34a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83b3630"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83b37c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f19c83da0c0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f19c83da0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83da440"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83da5d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83da760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83da8f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83daa80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83dac10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83dada0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83d2020"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83d21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f19c83baa50" loc="56:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f19c83baa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83badd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83b9020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83b91b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83b9340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83b94d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83b9660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83b97f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83b9980"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83b9b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f19c83c36d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f19c83c36d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83c3a50"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83c3be0"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83c3d70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83c9020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83c91b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83c9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f19c83aea20" loc="67:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f19c83aea20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83aeda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83ad020"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83ad1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83ad340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83ad4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83ad660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f19c83cccf0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f19c83cccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83d00a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83d0230"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83d03c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83d0550"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83d06e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f19c83b51f0" loc="60:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f19c83b51f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83b5570"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83b5700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83b5890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83b5a20"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83b5bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f19c83aba20" loc="70:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f19c83aba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83abda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83aa020"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83aa1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83aa340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83aa4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83aa660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f19c83bc0c0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f19c83bc0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83bc440"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83bc5d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83bc760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83bc8f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83bca80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83bcc10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83bcda0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83bb020"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83bb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f19c83c26c0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f19c83c26c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c83c2a40"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c83c2bd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83c2d60"/>
        <function-ref name="get" scoped="" ref="0x7f19c83c1020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83c11b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83c1340"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c83c14d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83c1660"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c83c17f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c83c1980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c83c1b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f19c83b3b80" loc="63:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f19c83b3b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83b2020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83b21b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83b2340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83b24d0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83b2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f19c83b1a20" loc="65:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f19c83b1a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83b1da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c83b0020"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83b01b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83b0340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83b04d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c83b0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f19c83b2a20" loc="64:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f19c83b2a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83b1020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83b11b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83b1340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83b14d0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83b1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f19c83b7570" loc="58:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f19c83b7570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83b78f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c83b7a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83b7c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c83b7da0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83b6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f19c83b8020" loc="57:../../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f19c83b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83b83a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83b8530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83b86c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83b8850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83b89e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83b8b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c83b8d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c83b7020"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83b71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f19c8371aa0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f19c8371aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c8371e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f19c8371450" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f19c8371450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c83717d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f19c8370120" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f19c8370120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c83704a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f19c8372d80" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c8372d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c8371180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f19c8373540" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c8373540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c83738c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c8373a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c8373be0"/>
        <function-ref name="get" scoped="" ref="0x7f19c8373d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c8372020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83721b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c8372340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83724d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c8372660"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c83727f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c8372980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f19c836a940" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f19c836a940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c836acc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f19c836a2f0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f19c836a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c836a670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f19c8369020" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f19c8369020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c83693a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f19c836bbf0" loc="51:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c836bbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c836a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f19c836c3e0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c836c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c836c760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c836c8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c836ca80"/>
        <function-ref name="get" scoped="" ref="0x7f19c836cc10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c836cda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c836b020"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c836b1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c836b340"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c836b4d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c836b660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c836b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c831ea90" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c831ea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c831ee10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c831d020"/>
        <function-ref name="captured" scoped="" ref="0x7f19c831d1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c831d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c831d4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c831d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c83659d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c83659d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c8365d50"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c831f020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c831f1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c831f340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c831f4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c831f660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c831f7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c831f980"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c831fb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c831a020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c831a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c831a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c831fde0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c831fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c831e180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c831e310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c831e4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c831e630"/>
        <function-ref name="fired" scoped="" ref="0x7f19c831e7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c831d930" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c831d930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c831dcb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c831de40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c831b020"/>
        <function-ref name="get" scoped="" ref="0x7f19c831b1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c831b340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c831b4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c831b660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c831b7f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c831b980"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c831bb10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c831bca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c8315160" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c8315160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83154e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c8315670"/>
        <function-ref name="captured" scoped="" ref="0x7f19c8315800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c8315990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c8315b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c8315cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c8317020" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c8317020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83173a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c8317530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83176c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c8317850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c83179e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c8317b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c8317d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c8316020"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c83161b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c83137a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c83137a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c8313b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c8316480" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c8316480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c8316800"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c8316990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c8316b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c8316cb0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c8316e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c8314020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c8314020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c83143a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c8314530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83146c0"/>
        <function-ref name="get" scoped="" ref="0x7f19c8314850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83149e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c8314b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c8314d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c8313020"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c83131b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c8313340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c83134d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c830e7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c830e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c830eb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c830ecb0"/>
        <function-ref name="captured" scoped="" ref="0x7f19c830ee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c830d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c830d1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c830d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c83106d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c83106d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c8310a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c8310be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c8310d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c830f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c830f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c830f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c830f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c830f660"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c830f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c830cc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c830cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c830a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c830fac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c830fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c830fe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c830e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c830e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c830e340"/>
        <function-ref name="fired" scoped="" ref="0x7f19c830e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c830d610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c830d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c830d990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c830db20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c830dcb0"/>
        <function-ref name="get" scoped="" ref="0x7f19c830de40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c830c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c830c1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c830c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c830c4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c830c660"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c830c7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c830c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c8306cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c8306cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83050a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c8305230"/>
        <function-ref name="captured" scoped="" ref="0x7f19c83053c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c8305550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c83056e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c8305870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c8308b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c8308b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c8307020"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c83071b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c8307340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c83074d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c8307660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c83077f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c8307980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c8307b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c8307ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c83032f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c83032f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c8303670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c8306020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c8306020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c83063a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c8306530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c83066c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c8306850"/>
        <function-ref name="fired" scoped="" ref="0x7f19c83069e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c8305b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c8305b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c8304020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c83041b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c8304340"/>
        <function-ref name="get" scoped="" ref="0x7f19c83044d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c8304660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c83047f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c8304980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c8304b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c8304ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c8304e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c8303020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c82fe2f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c82fe2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82fe670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c82fe800"/>
        <function-ref name="captured" scoped="" ref="0x7f19c82fe990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82feb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82fecb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c82fee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c8300220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c8300220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c83005a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c8300730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c83008c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c8300a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c8300be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c8300d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c82ff020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c82ff1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c82ff340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c82fc7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c82fc7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82fcb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c82ff610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c82ff610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82ff990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c82ffb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c82ffcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c82ffe40"/>
        <function-ref name="fired" scoped="" ref="0x7f19c82fe020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c82fd160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c82fd160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c82fd4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c82fd670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82fd800"/>
        <function-ref name="get" scoped="" ref="0x7f19c82fd990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82fdb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82fdcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c82fde40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82fc020"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c82fc1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c82fc340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c82fc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c82f67a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c82f67a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82f6b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c82f6cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f19c82f6e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82f5020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82f51b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c82f5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c82f86d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c82f86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c82f8a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c82f8be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82f8d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c82f7020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c82f71b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82f7340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c82f74d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c82f7660"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c82f77f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c82f4c50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c82f4c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82f3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c82f7ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c82f7ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82f7e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c82f6020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c82f61b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c82f6340"/>
        <function-ref name="fired" scoped="" ref="0x7f19c82f64d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c82f5610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c82f5610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c82f5990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c82f5b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82f5cb0"/>
        <function-ref name="get" scoped="" ref="0x7f19c82f5e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82f4020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82f41b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c82f4340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82f44d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c82f4660"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c82f47f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c82f4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c82efcb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c82efcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82ee0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c82ee230"/>
        <function-ref name="captured" scoped="" ref="0x7f19c82ee3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82ee550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82ee6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c82ee870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c82f1b30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c82f1b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c82f0020"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c82f01b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82f0340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c82f04d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c82f0660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82f07f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c82f0980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c82f0b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c82f0ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c82ec2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c82ec2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82ec670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c82ef020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c82ef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82ef3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c82ef530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c82ef6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c82ef850"/>
        <function-ref name="fired" scoped="" ref="0x7f19c82ef9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c82eeb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c82eeb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c82ed020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c82ed1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82ed340"/>
        <function-ref name="get" scoped="" ref="0x7f19c82ed4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82ed660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82ed7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c82ed980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82edb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c82edca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c82ede30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c82ec020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c82e62f0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c82e62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82e6670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c82e6800"/>
        <function-ref name="captured" scoped="" ref="0x7f19c82e6990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82e6b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82e6cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c82e6e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c82e8220" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c82e8220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c82e85a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c82e8730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82e88c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c82e8a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c82e8be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82e8d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c82e7020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c82e71b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c82e7340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c82e47a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c82e47a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82e4b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c82e7610" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c82e7610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82e7990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c82e7b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c82e7cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c82e7e40"/>
        <function-ref name="fired" scoped="" ref="0x7f19c82e6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c82e5160" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c82e5160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c82e54e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c82e5670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82e5800"/>
        <function-ref name="get" scoped="" ref="0x7f19c82e5990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82e5b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82e5cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c82e5e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82e4020"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c82e41b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c82e4340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c82e44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c82df7a0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c82df7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82dfb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c82dfcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f19c82dfe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82de020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82de1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c82de340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c82e16d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c82e16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c82e1a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c82e1be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82e1d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c82e0020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c82e01b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82e0340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c82e04d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c82e0660"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c82e07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c82ddc50" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c82ddc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82dc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c82e0ac0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c82e0ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82e0e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c82df020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c82df1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c82df340"/>
        <function-ref name="fired" scoped="" ref="0x7f19c82df4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c82de610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c82de610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c82de990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c82deb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82decb0"/>
        <function-ref name="get" scoped="" ref="0x7f19c82dee40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82dd020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82dd1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c82dd340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82dd4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c82dd660"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c82dd7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c82dd980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f19c82d7cb0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f19c82d7cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82d60a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f19c82d6230"/>
        <function-ref name="captured" scoped="" ref="0x7f19c82d63c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82d6550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82d66e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f19c82d6870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f19c82dab30" loc="44:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f19c82dab30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c82d8020"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c82d81b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82d8340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c82d84d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c82d8660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82d87f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c82d8980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c82d8b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c82d8ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f19c82d42f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f19c82d42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82d4670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f19c82d7020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f19c82d7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c82d73a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c82d7530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c82d76c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c82d7850"/>
        <function-ref name="fired" scoped="" ref="0x7f19c82d79e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f19c82d6b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c82d6b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c82d5020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c82d51b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c82d5340"/>
        <function-ref name="get" scoped="" ref="0x7f19c82d54d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c82d5660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c82d57f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c82d5980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c82d5b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c82d5ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c82d5e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c82d4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f19c82ce240" loc="7:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f19c82ce240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82ce5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f19c82d2a90" loc="4:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f19c82d2a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82d2e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f19c82cf260" loc="5:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f19c82cf260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82cf5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f19c82cf9f0" loc="6:../../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f19c82cf9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f19c82cfd70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f19c87444c0" loc="55:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f19c87444c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f19c8744840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f19c8ab53b0" loc="51:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f19c8ab53b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f19c8ab5730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f19c8ab58c0"/>
        <function-ref name="sleep" scoped="" ref="0x7f19c8ab5a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f19c891ebc0" loc="52:../../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f19c891ebc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f19c8a5a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f19c8297dc0" loc="60:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f19c8297dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c8296180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f19c829c590" loc="57:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f19c829c590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f19c829c910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f19c82976c0" loc="59:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f19c82976c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c8297a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f19c829cc00" loc="58:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f19c829cc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c8297020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f19c82971b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f19c8297340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f19c8b32410" loc="48:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f19c8b32410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c8b32790"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c8b32920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f19c8ac33a0" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f19c8ac33a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c8ac3720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f19c8ac38b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f19c8ac3a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f19c849ab70" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f19c849ab70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c8499020"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c84991b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f19c84932c0" loc="57:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f19c84932c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f19c8493640"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f19c84937d0"/>
        <function-ref name="sleep" scoped="" ref="0x7f19c8493960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f19c849bc30" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f19c849bc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c849a020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f19c849a1b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f19c849a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f19c8274370" loc="51:TestAdcC.nc">
      <component-ref qname="TestAdcC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f19c8274370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f19c82746f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x7f19c8288860" loc="47:TestAdcC.nc">
      <component-ref qname="TestAdcC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c8288860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c828c480"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c828c900"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadNow" ref="0x7f19c8283360" loc="48:TestAdcC.nc">
      <component-ref qname="TestAdcC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f19c8283360"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c8287020"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c82874e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadNowResource" ref="0x7f19c8286060" loc="49:TestAdcC.nc">
      <component-ref qname="TestAdcC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNowResource" scoped="" ref="0x7f19c8286060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c82863e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c8286570"/>
        <function-ref name="request" scoped="" ref="0x7f19c8286700"/>
        <function-ref name="granted" scoped="" ref="0x7f19c8286890"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c8286a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f19c8268590" loc="52:TestAdcC.nc">
      <component-ref qname="TestAdcC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f19c8268590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f19c8268910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f19c8268aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f19c8268c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f19c8268dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f19c8273020"/>
        <function-ref name="get" scoped="" ref="0x7f19c82731b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f19c8273340"/>
        <function-ref name="led2Off" scoped="" ref="0x7f19c8273980"/>
        <function-ref name="set" scoped="" ref="0x7f19c82734d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f19c8273660"/>
        <function-ref name="led2On" scoped="" ref="0x7f19c82737f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadStream" ref="0x7f19c82777e0" loc="50:TestAdcC.nc">
      <component-ref qname="TestAdcC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c82777e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c827d2a0"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c8282400"/>
        <function-ref name="read" scoped="" ref="0x7f19c8282d70"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c827dd50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f19c828de00" loc="51:../../../tos/platforms/shimmer/DemoSensorC.nc">
      <component-ref qname="TestAdcAppC.Sensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c828de00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c8258a80"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7a61020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f19c78556d0" loc="44:../../../tos/platforms/shimmer/VoltageC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c78556d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c7854390"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7854810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f19c7852690" loc="44:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c7852690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c7851390"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7851810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f19c784ca10" loc="48:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f19c784ca10"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c784b6b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c784bb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c7850020" loc="45:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c7850020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c784fab0"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c7850c10"/>
        <function-ref name="read" scoped="" ref="0x7f19c784f5e0"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c784d5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c784db60" loc="47:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c784db60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c784c020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c784c1b0"/>
        <function-ref name="request" scoped="" ref="0x7f19c784c340"/>
        <function-ref name="granted" scoped="" ref="0x7f19c784c4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c784c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f19c7847240" loc="48:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c7847240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c7847e30"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7845300"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c7845a60" loc="49:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7845a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c78446b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubResourceReadNow" ref="0x7f19c821a040" loc="46:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubResourceReadNow" scoped="" ref="0x7f19c821a040"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c821a3c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c821a550"/>
        <function-ref name="request" scoped="" ref="0x7f19c821a6e0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c821a870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c821aa00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f19c8222cc0" loc="38:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c8222cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c8221940"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c8221dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f19c8220b40" loc="39:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f19c8220b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c821f790"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c821fc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceReadNow" ref="0x7f19c821d8b0" loc="40:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceReadNow" scoped="" ref="0x7f19c821d8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c821dc30"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c821ddc0"/>
        <function-ref name="request" scoped="" ref="0x7f19c821c020"/>
        <function-ref name="granted" scoped="" ref="0x7f19c821c1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c821c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f19c82185c0" loc="48:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f19c82185c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c8217240"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f19c8206b10" loc="49:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f19c8206b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c8216020"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c82161b0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c8216340"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c82164d0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c8216660"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c82167f0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c8216980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceRead" ref="0x7f19c821ccb0" loc="44:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRead" scoped="" ref="0x7f19c821ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c821b0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c821b230"/>
        <function-ref name="request" scoped="" ref="0x7f19c821b3c0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c821b550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c821b6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readDone" ref="0x7f19c81ea5c0" loc="136:../../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readDone" scoped="" ref="0x7f19c81ea5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c81ea940"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c81eaad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f19c78318b0" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c78318b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c7831c30"/>
        <function-ref name="configure" scoped="" ref="0x7f19c7831dc0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c7830020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f19c7832930" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7832930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c7832cb0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c7832e40"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c7831020"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c78311b0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c7831340"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c78314d0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c7831660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f19c7830270" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c7830270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c78305f0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c7830780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c7830bb0" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7830bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c782f820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c7834cc0" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c7834cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c78320a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7832230"/>
        <function-ref name="request" scoped="" ref="0x7f19c78323c0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7832550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c78326e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7f19c81ae960" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81ae960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c81aece0"/>
        <function-ref name="configure" scoped="" ref="0x7f19c81aee70"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c81ad030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7f19c81aa1d0" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7f19c81aa1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f19c81aa550"/>
        <function-ref name="stop" scoped="" ref="0x7f19c81aa6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7f19c81ad920" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f19c81ad920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c81adca0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c81ade30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7f19c81af1d0" loc="41:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81af1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c81af550"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c81af6e0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c81af870"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c81afa00"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c81afb90"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c81afd20"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c81ae020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c81b3cc0" loc="40:../../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c81b3cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c81b00a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c81b0230"/>
        <function-ref name="request" scoped="" ref="0x7f19c81b03c0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c81b0550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c81b06e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7f19c81a4af0" loc="42:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7f19c81a4af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c81a4e70"/>
        <function-ref name="configure" scoped="" ref="0x7f19c81a2030"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c81a21c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7f19c819e020" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f19c819e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f19c819e3a0"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f19c819e530"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f19c819e6c0"/>
        <function-ref name="isBusy" scoped="" ref="0x7f19c819e850"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f19c819e9e0"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f19c819eb70"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f19c819ed00"/>
        <function-ref name="startConversion" scoped="" ref="0x7f19c819b020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f19c819b1b0"/>
        <function-ref name="getMem" scoped="" ref="0x7f19c819b340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f19c819b4d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f19c819b660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f19c819b7f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f19c819ba80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f19c819bc10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port64" ref="0x7f19c8178540" loc="58:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f19c8178540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c81788c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8178a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c8178be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8178d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c8177020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c81771b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8177340"/>
        <function-ref name="get" scoped="" ref="0x7f19c81774d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c8177660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c81777f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c8177980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8177b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c8177ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8176020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c81761b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA1" ref="0x7f19c818be60" loc="53:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f19c818be60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c818a210"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c818a3a0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c818a530"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c818a6c0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c818a850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA0" ref="0x7f19c818e880" loc="50:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f19c818e880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c818ec00"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c818ed90"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c818d020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c818d1b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c818d340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c818d4d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c818d660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c818d7f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c818d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7f19c81a1910" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7f19c81a1910"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f19c81a1c90"/>
        <function-ref name="stop" scoped="" ref="0x7f19c81a1e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port62" ref="0x7f19c817c7d0" loc="56:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f19c817c7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c817cb50"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c817cce0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c817ce70"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c817b030"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c817b1c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c817b350"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c817b4e0"/>
        <function-ref name="get" scoped="" ref="0x7f19c817b670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c817b800"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c817b990"/>
        <function-ref name="set" scoped="" ref="0x7f19c817bb20"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c817bcb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c817be40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c817a120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c817a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7f19c81a2ab0" loc="43:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f19c81a2ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c81a2e30"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c81a1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port67" ref="0x7f19c8172540" loc="61:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f19c8172540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c81728c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8172a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c8172be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8172d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c8171020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c81711b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8171340"/>
        <function-ref name="get" scoped="" ref="0x7f19c81714d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c8171660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c81717f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c8171980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8171b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c8171ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8170020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c81701b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port60" ref="0x7f19c817e900" loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f19c817e900"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c817ed80"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8189020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c81891b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8189340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c81894d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c8189660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c81897f0"/>
        <function-ref name="get" scoped="" ref="0x7f19c8189980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c8189b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c8189ca0"/>
        <function-ref name="set" scoped="" ref="0x7f19c8189e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8188020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c81881b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8188440"/>
        <function-ref name="clr" scoped="" ref="0x7f19c81885d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c81a6660" loc="40:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c81a6660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c81a69e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port65" ref="0x7f19c8176540" loc="59:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f19c8176540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c81768c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8176a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c8176be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8176d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c8175020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c81751b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8175340"/>
        <function-ref name="get" scoped="" ref="0x7f19c81754d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c8175660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c81757f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c8175980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8175b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c8175ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8174020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c81741b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerA" ref="0x7f19c818f020" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f19c818f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c818f3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c818f530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c818f6c0"/>
        <function-ref name="get" scoped="" ref="0x7f19c818f850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c818f9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c818fb70"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c818fd00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c818e020"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c818e1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c818e340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c818e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ADCArbiterInfo" ref="0x7f19c819f020" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7f19c819f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f19c819f3a0"/>
        <function-ref name="userId" scoped="" ref="0x7f19c819f530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA1" ref="0x7f19c818dd30" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f19c818dd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c818c0e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c818c270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c818c400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c818c590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c818c720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c818c8b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c818ca40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c818cbd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c818cd60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7f19c81a5370" loc="41:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f19c81a5370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c81a56f0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c81a5880"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c81a5a10"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c81a5ba0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c81a5d30"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c81a4020"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c81a41b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port63" ref="0x7f19c817a640" loc="57:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f19c817a640"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c817a9c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c817ab50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c817ace0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c817ae70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c8179030"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c81791c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8179350"/>
        <function-ref name="get" scoped="" ref="0x7f19c81794e0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c8179670"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c8179800"/>
        <function-ref name="set" scoped="" ref="0x7f19c8179990"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8179b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c8179cb0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8178020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c81781b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA0" ref="0x7f19c818b120" loc="52:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f19c818b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c818b4a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c818b630"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c818b7c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c818b950"/>
        <function-ref name="fired" scoped="" ref="0x7f19c818bae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port61" ref="0x7f19c8188960" loc="55:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f19c8188960"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c8188ce0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8188e70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c817d030"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c817d1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c817d350"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c817d4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c817d670"/>
        <function-ref name="get" scoped="" ref="0x7f19c817d800"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c817d990"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c817db20"/>
        <function-ref name="set" scoped="" ref="0x7f19c817dcb0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c817de40"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c817c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c817c2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c817c440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port66" ref="0x7f19c8174540" loc="60:../../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f19c8174540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c81748c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8174a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c8174be0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8174d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c8173020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c81731b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8173340"/>
        <function-ref name="get" scoped="" ref="0x7f19c81734d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c8173660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c81737f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c8173980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8173b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c8173ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8172020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c81721b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x7f19c80b2080" loc="46:../../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f19c80b2080"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f19c80b2400"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f19c80b2590"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f19c80b2720"/>
        <function-ref name="isBusy" scoped="" ref="0x7f19c80b28b0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f19c80b2a40"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f19c80b2bd0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f19c80b2d60"/>
        <function-ref name="startConversion" scoped="" ref="0x7f19c80b1020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f19c80b11b0"/>
        <function-ref name="getMem" scoped="" ref="0x7f19c80b1340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f19c80b14d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f19c80b1660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f19c80b17f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f19c80b1a80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f19c80b1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f19c801b3a0" loc="86:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f19c801b3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f19c801b740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f19c801b8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f19c801a570" loc="89:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f19c801a570"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f19c801a910"/>
        <function-ref name="configure" scoped="" ref="0x7f19c801aaa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c801c520" loc="85:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c801c520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c801c8c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c801ca50"/>
        <function-ref name="request" scoped="" ref="0x7f19c801cbe0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c801cd70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c801b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f19c801bb20" loc="87:../../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f19c801bb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f19c801a020"/>
        <function-ref name="userId" scoped="" ref="0x7f19c801a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c7808e50" loc="44:../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c7808e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c7807210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x7f19c78074a0" loc="45:../../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RoundRobinQueue" scoped="" ref="0x7f19c78074a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f19c7807820"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f19c78079b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f19c7807b40"/>
        <function-ref name="dequeue" scoped="" ref="0x7f19c7807cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f19c7804220" loc="52:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f19c7804220"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f19c78045c0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f19c7804750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f19c7803400" loc="56:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f19c7803400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f19c78037a0"/>
        <function-ref name="configure" scoped="" ref="0x7f19c7803930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f19c7803bc0" loc="57:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f19c7803bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f19c77fa020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f19c77fa1b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f19c77fa340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f19c77fa4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c7805490" loc="51:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c7805490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7805830"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c78059c0"/>
        <function-ref name="request" scoped="" ref="0x7f19c7805b50"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7805ce0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7805e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f19c78049a0" loc="53:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f19c78049a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f19c7804d20"/>
        <function-ref name="userId" scoped="" ref="0x7f19c7803020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f19c77fa7a0" loc="68:../../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f19c77fa7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c77fab20"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c77facb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f19c800b020" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f19c800b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c800b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c800b530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c800b6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c800b850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c800b9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c800bb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c800bd00"/>
        <function-ref name="get" scoped="" ref="0x7f19c800a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c800a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c800a340"/>
        <function-ref name="set" scoped="" ref="0x7f19c800a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c800a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c800a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c800aa80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c800ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f19c7ff7020" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f19c7ff7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ff73a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ff7530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ff76c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ff7850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ff79e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ff7b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ff7d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ff6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ff61b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ff6340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ff64d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ff6660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ff67f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ff6a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ff6c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f19c7fad560" loc="145:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f19c7fad560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fad8e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fada70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fadc00"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fadd90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fac020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fac1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fac340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fac4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fac660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fac7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fac980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7facb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7facca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fab020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fab1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f19c7f89570" loc="165:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f19c7f89570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f898f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f89a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f89c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f89da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f88020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f881b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f88340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f884d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f88660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f887f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f88980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f88b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f88ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f87020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f871b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f19c7fab580" loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f19c7fab580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fab900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7faba90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fabc20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fabdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7faa020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7faa1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7faa340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7faa4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7faa660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7faa7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7faa980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7faab10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7faaca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fa9020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fa91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f19c7ff3020" loc="71:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f19c7ff3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ff33a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ff3530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ff36c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ff3850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ff39e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ff3b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ff3d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ff2020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ff21b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ff2340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ff24d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ff2660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ff27f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ff2a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ff2c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f19c7fde200" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f19c7fde200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fde580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fde710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fde8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fdea30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fdebc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fded50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fdd020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fdd1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fdd340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fdd4d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fdd660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fdd7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fdd980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fddc10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fddda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f19c7fca200" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f19c7fca200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fca580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fca710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fca8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fcaa30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fcabc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fcad50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fc9020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fc91b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fc9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fc94d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fc9660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fc97f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fc9980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fc9c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fc9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f19c7fba200" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f19c7fba200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fba580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fba710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fba8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fbaa30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fbabc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fbad50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fb9020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fb91b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fb9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fb94d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fb9660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fb97f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fb9980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fb9c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fb9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f19c7fa5580" loc="149:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f19c7fa5580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fa5900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fa5a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fa5c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fa5db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fa4020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fa41b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fa4340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fa44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fa4660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fa47f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fa4980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fa4b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fa4ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fa3020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fa31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f19c7f95570" loc="159:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f19c7f95570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f958f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f95a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f95c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f95da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f94020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f941b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f94340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f944d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f94660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f947f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f94980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f94b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f94ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f93020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f931b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f19c7f80580" loc="171:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f19c7f80580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f80900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f80a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f80c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f80db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f7f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f7f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f7f340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f7f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f7f660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f7f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f7f980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f7fb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f7fca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f7e020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f7e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f19c8005020" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f19c8005020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c80053a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8005530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c80056c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8005850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c80059e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c8005b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8005d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c8004020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c80041b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c8004340"/>
        <function-ref name="set" scoped="" ref="0x7f19c80044d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8004660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c80047f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8004a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c8004c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f19c7fa3580" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f19c7fa3580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fa3900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fa3a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fa3c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fa3db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fa2020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fa21b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fa2340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fa24d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fa2660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fa27f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fa2980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fa2b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fa2ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fa1020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fa11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f19c8001020" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f19c8001020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c80013a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8001530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c80016c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8001850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c80019e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c8001b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8001d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c8000020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c80001b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c8000340"/>
        <function-ref name="set" scoped="" ref="0x7f19c80004d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8000660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c80007f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8000a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c8000c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f19c7fed020" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f19c7fed020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fed3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fed530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fed6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fed850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fed9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fedb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fedd00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fec020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fec1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fec340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fec4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fec660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fec7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7feca80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fecc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f19c7fd8200" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f19c7fd8200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fd8580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fd8710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fd88a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fd8a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fd8bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fd8d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fd7020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fd71b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fd7340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fd74d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fd7660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fd77f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fd7980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fd7c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fd7da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f19c7fc4200" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f19c7fc4200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fc4580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fc4710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fc48a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fc4a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fc4bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fc4d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fc3020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fc31b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fc3340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fc34d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fc3660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fc37f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fc3980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fc3c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fc3da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f19c7fb4200" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f19c7fb4200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fb4580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fb4710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fb48a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fb4a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fb4bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fb4d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fb3020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fb31b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fb3340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fb34d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fb3660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fb37f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fb3980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fb3c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fb3da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f19c800f020" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f19c800f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c800f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c800f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c800f6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c800f850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c800f9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c800fb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c800fd00"/>
        <function-ref name="get" scoped="" ref="0x7f19c800e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c800e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c800e340"/>
        <function-ref name="set" scoped="" ref="0x7f19c800e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c800e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c800e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c800ea80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c800ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f19c7ffb020" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f19c7ffb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ffb4a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ffb630"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ffb7c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ffb950"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ffbae0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ffbc70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ffbe00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ffa020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ffa1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ffa340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ffa4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ffa660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ffa7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ffaa80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ffac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f19c7fe7020" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f19c7fe7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fe73a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fe7530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fe76c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fe7850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fe79e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fe7b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fe7d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fe6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fe61b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fe6340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fe64d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fe6660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fe67f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fe6a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fe6c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f19c7faf580" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f19c7faf580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7faf900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fafa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fafc20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fafdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fae020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fae1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fae340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fae4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fae660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fae7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fae980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7faeb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7faeca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fad020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fad1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f19c7f8f570" loc="162:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f19c7f8f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f8f8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f8fa80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f8fc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f8fda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f8e020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f8e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f8e340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f8e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f8e660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f8e7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f8e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f8eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f8eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f8d020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f8d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f19c7f83570" loc="169:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f19c7f83570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f838f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f83a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f83c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f83da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f81020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f811b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f81340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f814d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f81660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f817f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f81980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f81b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f81ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f80020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f801b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f19c7f9b580" loc="155:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f19c7f9b580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f9b900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f9ba90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f9bc20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f9bdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f9a020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f9a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f9a340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f9a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f9a660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f9a7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f9a980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f9ab10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f9aca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f99020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f991b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f19c7fe3020" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f19c7fe3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fe35a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fe3730"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fe38c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fe3a50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fe3be0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fe3d70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fe2020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fe21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fe2340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fe24d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fe2660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fe27f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fe2980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fe2c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fe2da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f19c7fce200" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f19c7fce200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fce580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fce710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fce8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fcea30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fcebc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fced50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fcd020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fcd1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fcd340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fcd4d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fcd660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fcd7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fcd980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fcdc10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fcdda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f19c7fbe200" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f19c7fbe200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fbe580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fbe710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fbe8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fbea30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fbebc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fbed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fbd020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fbd1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fbd340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fbd4d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fbd660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fbd7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fbd980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fbdc10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fbdda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f19c7f8d570" loc="163:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f19c7f8d570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f8d8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f8da80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f8dc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f8dda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f8c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f8c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f8c340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f8c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f8c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f8c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f8c980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f8cb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f8cca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f8b020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f8b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f19c7fa1570" loc="152:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f19c7fa1570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fa18f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fa1a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fa1c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fa1da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fa0020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fa01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fa0340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fa04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fa0660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fa07f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fa0980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fa0b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fa0ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f9f020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f9f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f19c8009020" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f19c8009020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c80093a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8009530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c80096c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8009850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c80099e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c8009b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8009d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c8008020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c80081b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c8008340"/>
        <function-ref name="set" scoped="" ref="0x7f19c80084d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8008660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c80087f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8008a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c8008c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f19c7ff5020" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f19c7ff5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ff53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ff5530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ff56c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ff5850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ff59e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ff5b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ff5d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ff4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ff41b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ff4340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ff44d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ff4660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ff47f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ff4a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ff4c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f19c7fc2200" loc="104:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f19c7fc2200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fc2580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fc2710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fc28a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fc2a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fc2bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fc2d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fc1020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fc11b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fc1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fc14d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fc1660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fc17f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fc1980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fc1c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fc1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f19c7ff1020" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f19c7ff1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ff13a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ff1530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ff16c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ff1850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ff19e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ff1b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ff1d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ff0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ff01b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ff0340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ff04d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ff0660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ff07f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ff0a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ff0c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f19c7fdc200" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f19c7fdc200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fdc580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fdc710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fdc8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fdca30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fdcbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fdcd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fdb020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fdb1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fdb340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fdb4d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fdb660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fdb7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fdb980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fdbc10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fdbda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f19c7fc8200" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f19c7fc8200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fc8580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fc8710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fc88a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fc8a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fc8bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fc8d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fc7020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fc71b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fc7340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fc74d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fc7660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fc77f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fc7980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fc7c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fc7da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f19c7fb8200" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f19c7fb8200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fb8580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fb8710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fb88a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fb8a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fb8bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fb8d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fb7020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fb71b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fb7340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fb74d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fb7660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fb77f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fb7980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fb7c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fb7da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f19c7f9d580" loc="154:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f19c7f9d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f9d900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f9da90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f9dc20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f9ddb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f9c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f9c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f9c340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f9c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f9c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f9c7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f9c980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f9cb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f9cca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f9b020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f9b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f19c8014140" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f19c8014140"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c80144c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8014650"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c80147e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8014970"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c8014b00"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c8014c90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8014e20"/>
        <function-ref name="get" scoped="" ref="0x7f19c8013020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c80131b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c8013340"/>
        <function-ref name="set" scoped="" ref="0x7f19c80134d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8013660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c80137f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8013a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c8013c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f19c7fff020" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f19c7fff020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fff3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fff530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fff6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fff850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fff9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fffb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fffd00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ffe020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ffe1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ffe340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ffe4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ffe660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ffe7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ffea80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ffec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f19c7feb020" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f19c7feb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7feb3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7feb530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7feb6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7feb850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7feb9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7febb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7febd00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fea020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fea1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fea340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fea4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fea660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fea7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7feaa80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7feac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f19c7fd6200" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f19c7fd6200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fd6580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fd6710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fd68a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fd6a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fd6bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fd6d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fd5020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fd51b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fd5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fd54d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fd5660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fd57f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fd5980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fd5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fd5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f19c7f99580" loc="156:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f19c7f99580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f99900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f99a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f99c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f99db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f98020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f981b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f98340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f984d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f98660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f987f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f98980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f98b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f98ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f97020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f971b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f19c7f93570" loc="160:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f19c7f93570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f938f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f93a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f93c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f93da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f92020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f921b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f92340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f924d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f92660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f927f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f92980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f92b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f92ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f91020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f911b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f19c7f87570" loc="166:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f19c7f87570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f878f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f87a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f87c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f87da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f86020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f861b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f86340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f864d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f86660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f867f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f86980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f86b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f86ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f85020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f851b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f19c7fd2200" loc="93:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f19c7fd2200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fd2580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fd2710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fd28a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fd2a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fd2bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fd2d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fd1020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fd11b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fd1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fd14d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fd1660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fd17f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fd1980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fd1c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fd1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f19c7f97580" loc="157:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f19c7f97580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f97900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f97a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f97c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f97db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f96020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f961b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f96340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f964d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f96660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f967f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f96980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f96b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f96ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f95020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f951b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f19c800d020" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f19c800d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c800d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c800d530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c800d6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c800d850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c800d9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c800db70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c800dd00"/>
        <function-ref name="get" scoped="" ref="0x7f19c800c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c800c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c800c340"/>
        <function-ref name="set" scoped="" ref="0x7f19c800c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c800c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c800c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c800ca80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c800cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f19c7ff9020" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f19c7ff9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ff93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ff9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ff96c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ff9850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ff99e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ff9b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ff9d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ff8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ff81b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ff8340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ff84d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ff8660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ff87f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ff8a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ff8c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f19c7fe5020" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f19c7fe5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fe53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fe5530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fe56c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fe5850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fe59e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fe5b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fe5d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fe4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fe41b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fe4340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fe44d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fe4660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fe47f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fe4a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fe4c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f19c7f9f580" loc="153:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f19c7f9f580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f9f900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f9fa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f9fc20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f9fdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f9e020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f9e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f9e340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f9e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f9e660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f9e7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f9e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f9eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f9eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f9d020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f9d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f19c7f8b570" loc="164:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f19c7f8b570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f8b8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f8ba80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f8bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f8bda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f8a020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f8a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f8a340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f8a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f8a660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f8a7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f8a980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f8ab10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f8aca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f89020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f891b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f19c7fe0200" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f19c7fe0200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fe0580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fe0710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fe08a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fe0a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fe0bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fe0d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fdf020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fdf1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fdf340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fdf4d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fdf660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fdf7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fdf980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fdfc10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fdfda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f19c7fcc200" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f19c7fcc200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fcc580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fcc710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fcc8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fcca30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fccbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fccd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fcb020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fcb1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fcb340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fcb4d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fcb660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fcb7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fcb980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fcbc10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fcbda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f19c7fbc200" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f19c7fbc200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fbc580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fbc710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fbc8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fbca30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fbcbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fbcd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fbb020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fbb1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fbb340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fbb4d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fbb660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fbb7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fbb980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fbbc10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fbbda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f19c8007020" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f19c8007020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c80073a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8007530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c80076c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8007850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c80079e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c8007b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8007d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c8006020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c80061b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c8006340"/>
        <function-ref name="set" scoped="" ref="0x7f19c80064d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8006660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c80067f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8006a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c8006c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f19c7fc0200" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f19c7fc0200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fc0580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fc0710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fc08a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fc0a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fc0bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fc0d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fbf020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fbf1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fbf340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fbf4d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fbf660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fbf7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fbf980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fbfc10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fbfda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f19c8003020" loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f19c8003020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c80033a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8003530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c80036c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8003850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c80039e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c8003b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8003d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c8002020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c80021b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c8002340"/>
        <function-ref name="set" scoped="" ref="0x7f19c80024d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8002660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c80027f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8002a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c8002c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f19c7fef020" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f19c7fef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fef3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fef530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fef6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fef850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fef9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fefb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fefd00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fee020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fee1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fee340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fee4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fee660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fee7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7feea80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7feec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f19c7fda200" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f19c7fda200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fda580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fda710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fda8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fdaa30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fdabc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fdad50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fd9020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fd91b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fd9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fd94d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fd9660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fd97f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fd9980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fd9c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fd9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f19c7fc6200" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f19c7fc6200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fc6580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fc6710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fc68a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fc6a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fc6bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fc6d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fc5020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fc51b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fc5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fc54d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fc5660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fc57f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fc5980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fc5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fc5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f19c7fb6200" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f19c7fb6200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fb6580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fb6710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fb68a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fb6a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fb6bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fb6d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fb5020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fb51b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fb5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fb54d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fb5660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fb57f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fb5980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fb5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fb5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f19c8012020" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f19c8012020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c80123a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c8012530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c80126c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c8012850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c80129e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c8012b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c8012d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c8011020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c80111b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c8011340"/>
        <function-ref name="set" scoped="" ref="0x7f19c80114d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c8011660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c80117f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c8011a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c8011c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f19c7ffd020" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f19c7ffd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ffd3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ffd530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ffd6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ffd850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ffd9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ffdb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ffdd00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ffc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ffc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ffc340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ffc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ffc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ffc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ffca80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ffcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f19c7fe9020" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f19c7fe9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fe93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fe9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fe96c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fe9850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fe99e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fe9b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fe9d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fe8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fe81b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fe8340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fe84d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fe8660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fe87f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fe8a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fe8c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f19c7fd4200" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f19c7fd4200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fd4580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fd4710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fd48a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fd4a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fd4bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fd4d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fd3020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fd31b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fd3340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fd34d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fd3660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fd37f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fd3980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fd3c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fd3da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f19c7fa7560" loc="148:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f19c7fa7560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fa78e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fa7a70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fa7c00"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fa7d90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fa6020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fa61b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fa6340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fa64d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fa6660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fa67f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fa6980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fa6b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fa6ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fa5020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fa51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f19c7f91570" loc="161:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f19c7f91570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f918f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f91a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f91c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f91da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f90020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f901b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f90340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f904d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f90660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f907f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f90980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f90b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f90ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f8f020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f8f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f19c7fa9580" loc="147:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f19c7fa9580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fa9900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fa9a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fa9c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fa9db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fa8020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fa81b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fa8340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fa84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fa8660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fa87f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fa8980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fa8b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fa8ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fa7020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fa71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f19c7fd0200" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f19c7fd0200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fd0580"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fd0710"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fd08a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fd0a30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fd0bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fd0d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fcf020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fcf1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fcf340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fcf4d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fcf660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fcf7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fcf980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7fcfc10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7fcfda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f19c7f85570" loc="168:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f19c7f85570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f858f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f85a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f85c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f85da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f84020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f841b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f84340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f844d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f84660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f847f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f84980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f84b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f84ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f83020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f831b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f19c7f7e580" loc="172:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f19c7f7e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f7e900"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f7ea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f7ec20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f7edb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f7d020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f7d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f7d340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f7d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f7d660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f7d7f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f7d980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f7db10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f7dca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f7c020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f7c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f19c7fb11f0" loc="143:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f19c7fb11f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7fb1970"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7fb1b00"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7fb1c90"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7fb1e20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7fb0020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7fb01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7fb0340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7fb04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7fb0660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7fb07f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7fb0980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7fb0b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7fb0ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7faf020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7faf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f536d0" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f536d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f53a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f53be0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f53d70"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f52020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f521b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f52340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f524d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f52660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f527f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f52980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f52b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f52ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f52e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f51120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f512b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f4e100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f4e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f4e480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f4e610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f4e7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f4e930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f4eac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f4ec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f4ede0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f4d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f4d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f4d340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f4d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f4d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f4d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f4da80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f4dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f4ad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f4ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f490e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f49270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f49400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f49590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f49720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f498b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f49a40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f49bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f49d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f48020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f481b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f48340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f484d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f48760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f488f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f45740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f45740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f45ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f45c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f45de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f44020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f441b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f44340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f444d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f44660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f447f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f44980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f44b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f44ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f44e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f43120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f432b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f40100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f40100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f40480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f40610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f407a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f40930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f40ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f40c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f40de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f3f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f3f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f3f340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f3f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f3f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f3f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f3fa80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f3fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f3cd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f3cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f3b0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f3b270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f3b400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f3b590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f3b720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f3b8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f3ba40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f3bbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f3bd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f3a020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f3a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f3a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f3a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f3a760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f3a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f36740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f36740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f36ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f36c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f36de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f35020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f351b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f35340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f354d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f35660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f357f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f35980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f35b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f35ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f35e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f34120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f342b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f31100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f31100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f31480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f31610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f317a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f31930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f31ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f31c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f31de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f30020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f301b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f30340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f304d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f30660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f307f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f30a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f30c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f2dd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f2dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f2c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f2c270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f2c400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f2c590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f2c720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f2c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f2ca40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f2cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f2cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f2b020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f2b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f2b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f2b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f2b760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f2b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f28740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f28740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f28ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f28c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f28de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f27020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f271b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f27340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f274d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f27660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f277f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f27980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f27b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f27ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f27e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f26120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f262b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f23100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f23100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f23480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f23610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f237a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f23930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f23ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f23c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f23de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f22020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f221b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f22340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f224d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f22660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f227f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f22a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f22c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f1fd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f1fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f1e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f1e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f1e400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f1e590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f1e720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f1e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f1ea40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f1ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f1ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f1d020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f1d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f1d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f1d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f1d760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f1d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f1a860" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f1a860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f1abe0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f1ad70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f19020"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f191b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f19340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f194d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f19660"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f197f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f19980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f19b10"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f19ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f19e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f18020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f182b0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f18440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f15270" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f15270"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f155f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f15780"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f15910"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f15aa0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f15c30"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f15dc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f13020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f131b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f13340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f134d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f13660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f137f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f13980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f13c10"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f13da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f10d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f10d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f0f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f0f270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f0f400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f0f590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f0f720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f0f8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f0fa40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f0fbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f0fd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f0e020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f0e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f0e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f0e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f0e760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f0e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f0b740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f0b740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f0bac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f0bc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f0bde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f0a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f0a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f0a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f0a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f0a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f0a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f0a980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f0ab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f0aca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f0ae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f09120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f092b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f06100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f06100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f06480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f06610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f067a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f06930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f06ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f06c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f06de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f05020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f051b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f05340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f054d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f05660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f057f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f05a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f05c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7f02d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7f02d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7f010e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7f01270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7f01400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7f01590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7f01720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7f018b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7f01a40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7f01bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7f01d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7f00020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7f001b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7f00340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7f004d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7f00760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7f008f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7efd740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7efd740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7efdac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7efdc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7efdde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7efc020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7efc1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7efc340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7efc4d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7efc660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7efc7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7efc980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7efcb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7efcca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7efce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7efb120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7efb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ef8100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ef8100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ef8480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ef8610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ef87a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ef8930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ef8ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ef8c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ef8de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ef7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ef71b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ef7340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ef74d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ef7660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ef77f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ef7a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ef7c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ef4d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ef4d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ef30e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ef3270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ef3400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ef3590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ef3720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ef38b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ef3a40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ef3bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ef3d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ef2020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ef21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ef2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ef24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ef2760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ef28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7eef740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7eef740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7eefac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7eefc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7eefde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7eed020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7eed1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7eed340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7eed4d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7eed660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7eed7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7eed980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7eedb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7eedca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7eede30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7eec120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7eec2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ee9100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ee9100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ee9480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ee9610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ee97a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ee9930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ee9ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ee9c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ee9de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ee8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ee81b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ee8340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ee84d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ee8660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ee87f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ee8a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ee8c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ee5d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ee5d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ee40e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ee4270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ee4400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ee4590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ee4720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ee48b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ee4a40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ee4bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ee4d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ee3020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ee31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ee3340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ee34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ee3760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ee38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ee0a60" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ee0a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ee0de0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7edf020"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7edf1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7edf340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7edf4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7edf660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7edf7f0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7edf980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7edfb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7edfca0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7edfe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ede020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ede1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ede440"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ede5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7edb460" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7edb460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7edb7e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7edb970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7edbb00"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7edbc90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7edbe20"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7eda020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7eda1b0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7eda340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7eda4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7eda660"/>
        <function-ref name="set" scoped="" ref="0x7f19c7eda7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7eda980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7edab10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7edada0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ed9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ed7e00" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ed7e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ed61c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ed6350"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ed64e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ed6670"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ed6800"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ed6990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ed6b20"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ed6cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ed6e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ed5020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ed51b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ed5340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ed54d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ed5760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ed58f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ed2740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ed2740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ed2ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ed2c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ed2de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ed1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ed11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ed1340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ed14d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ed1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ed17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ed1980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ed1b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ed1ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ed1e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ed0120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ed02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ecd100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ecd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ecd480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ecd610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ecd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ecd930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ecdac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ecdc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ecdde0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ecc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ecc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ecc340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ecc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ecc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ecc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ecca80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7eccc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ec8d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ec8d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ec70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ec7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ec7400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ec7590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ec7720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ec78b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ec7a40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ec7bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ec7d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ec6020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ec61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ec6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ec64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ec6760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ec68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ec3740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ec3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ec3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ec3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ec3de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ec2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ec21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ec2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ec24d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ec2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ec27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ec2980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ec2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ec2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ec2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ec1120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ec12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ebe100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ebe100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ebe480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ebe610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ebe7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ebe930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ebeac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ebec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ebede0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ebd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ebd1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ebd340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ebd4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ebd660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ebd7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ebda80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ebdc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ebad10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ebad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7eb90e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7eb9270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7eb9400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7eb9590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7eb9720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7eb98b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7eb9a40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7eb9bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7eb9d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7eb8020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7eb81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7eb8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7eb84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7eb8760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7eb88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7eb5740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7eb5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7eb5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7eb5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7eb5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7eb4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7eb41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7eb4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7eb44d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7eb4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7eb47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7eb4980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7eb4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7eb4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7eb4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7eb3120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7eb32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7eb0100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7eb0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7eb0480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7eb0610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7eb07a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7eb0930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7eb0ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7eb0c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7eb0de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7eaf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7eaf1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7eaf340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7eaf4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7eaf660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7eaf7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7eafa80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7eafc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7eacd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7eacd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7eab0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7eab270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7eab400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7eab590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7eab720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7eab8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7eaba40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7eabbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7eabd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7eaa020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7eaa1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7eaa340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7eaa4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7eaa760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7eaa8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ea7740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ea7740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ea7ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ea7c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ea7de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ea5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ea51b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ea5340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ea54d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ea5660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ea57f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ea5980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ea5b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ea5ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ea5e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ea4120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ea42b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7ea1100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7ea1100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7ea1480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7ea1610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7ea17a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7ea1930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7ea1ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7ea1c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7ea1de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7ea0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7ea01b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7ea0340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7ea04d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7ea0660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7ea07f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7ea0a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7ea0c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e9dd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e9dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e9c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e9c270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e9c400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e9c590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e9c720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e9c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e9ca40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e9cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e9cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e9b020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e9b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e9b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e9b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e9b760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e9b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e98740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e98740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e98ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e98c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e98de0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e97020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e971b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e97340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e974d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e97660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e977f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e97980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e97b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e97ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e97e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e96120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e962b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e93100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e93100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e93480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e93610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e937a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e93930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e93ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e93c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e93de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e92020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e921b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e92340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e924d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e92660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e927f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e92a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e92c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e8fd10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e8fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e8e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e8e270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e8e400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e8e590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e8e720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e8e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e8ea40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e8ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e8ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e8d020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e8d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e8d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e8d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e8d760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e8d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e8a740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e8a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e8aac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e8ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e8ade0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e89020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e891b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e89340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e894d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e89660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e897f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e89980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e89b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e89ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e89e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e88120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e882b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e85100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e85100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e85480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e85610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e857a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e85930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e85ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e85c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e85de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e84020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e841b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e84340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e844d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e84660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e847f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e84a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e84c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e81d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e81d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e7f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e7f270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e7f400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e7f590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e7f720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e7f8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e7fa40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e7fbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e7fd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e7e020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e7e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e7e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e7e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e7e760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e7e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e7b740" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e7b740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e7bac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e7bc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e7bde0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e7a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e7a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e7a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e7a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e7a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e7a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e7a980"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e7ab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e7aca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e7ae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e79120"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e792b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e76100" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e76100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e76480"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e76610"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e767a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e76930"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e76ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e76c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e76de0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e75020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e751b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e75340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e754d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e75660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e757f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e75a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e75c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f19c7e72d10" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f19c7e72d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7e710e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7e71270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c7e71400"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7e71590"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7e71720"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c7e718b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7e71a40"/>
        <function-ref name="get" scoped="" ref="0x7f19c7e71bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c7e71d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c7e70020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7e701b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c7e70340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c7e704d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c7e70760"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7e708f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f19c7df01d0" loc="55:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f19c7df01d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7df0e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7f19c7df3ad0" loc="54:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7f19c7df3ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7df3e50"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7df2020"/>
        <function-ref name="request" scoped="" ref="0x7f19c7df21b0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7df2340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7df24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7f19c7df4750" loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7f19c7df4750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7df4ad0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7df4c60"/>
        <function-ref name="request" scoped="" ref="0x7f19c7df4df0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7df3020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7df31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7f19c7deb800" loc="43:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7f19c7deb800"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7f19c7debb80"/>
        <function-ref name="getMCtl" scoped="" ref="0x7f19c7debd10"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7f19c7de6020"/>
        <function-ref name="isBusy" scoped="" ref="0x7f19c7de61b0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7f19c7de6340"/>
        <function-ref name="getCtl1" scoped="" ref="0x7f19c7de64d0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7f19c7de6660"/>
        <function-ref name="startConversion" scoped="" ref="0x7f19c7de67f0"/>
        <function-ref name="setCtl0" scoped="" ref="0x7f19c7de6980"/>
        <function-ref name="getMem" scoped="" ref="0x7f19c7de6b10"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7f19c7de6ca0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7f19c7de6e30"/>
        <function-ref name="stopConversion" scoped="" ref="0x7f19c7de5020"/>
        <function-ref name="enableConversion" scoped="" ref="0x7f19c7de52b0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7f19c7de5440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffTimer" ref="0x7f19c7dd1680" loc="45:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffTimer" scoped="" ref="0x7f19c7dd1680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7dcdc40"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7dcf1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7dcd020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7dcfae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7dcc590"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7dcc110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7dcf660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7dd0390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7dcd630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7dd0860"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7dd0d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_2_5V" ref="0x7f19c7decbe0" loc="39:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f19c7decbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f19c7deb020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f19c7deb1b0"/>
        <function-ref name="start" scoped="" ref="0x7f19c7deb340"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7deb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffSettleTimer" ref="0x7f19c7dccc30" loc="46:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7f19c7dccc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7dc7110"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7dca6a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7dc84a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7dc8020"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7dc7a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7dc7590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7dcab20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7dcb860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7dc8ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7dcbd30"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7dca220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_1_5V" ref="0x7f19c7dec020" loc="38:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f19c7dec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f19c7dec3a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f19c7dec530"/>
        <function-ref name="start" scoped="" ref="0x7f19c7dec6c0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7dec850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOnTimer" ref="0x7f19c7de4270" loc="44:../../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOnTimer" scoped="" ref="0x7f19c7de4270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7dd26e0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7de3cb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7dd4a70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7dd45f0"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7dd1020"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7dd2b60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7dd4170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7de4e60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7dd20d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7de3360"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7de3830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7f19c7d77920" loc="43:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7f19c7d77920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7d765a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_2_5V" ref="0x7f19c7d78540" loc="42:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7f19c7d78540"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f19c7d788c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f19c7d78a50"/>
        <function-ref name="start" scoped="" ref="0x7f19c7d78be0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7d78d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7f19c7d7bad0" loc="40:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7f19c7d7bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7d7be50"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7d7a020"/>
        <function-ref name="request" scoped="" ref="0x7f19c7d7a1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7d7a340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7d7a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7f19c7d7c6f0" loc="38:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7f19c7d7c6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7d7ca70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7d7cc00"/>
        <function-ref name="request" scoped="" ref="0x7f19c7d7cd90"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7d7b020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7d7b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="switchOff" ref="0x7f19c7d742a0" loc="52:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="switchOff" scoped="" ref="0x7f19c7d742a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c7d74620"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c7d747b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_1_5V" ref="0x7f19c7d7a860" loc="41:../../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7f19c7d7a860"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f19c7d7abe0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f19c7d7ad70"/>
        <function-ref name="start" scoped="" ref="0x7f19c7d78020"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7d781b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f19c7b97370" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c7b97370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7b94870"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7b96e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7b95c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7b95780"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7b921e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7b94cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7b95300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7b96020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7b94260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7b964f0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7b969c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f19c7d3b020" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f19c7d3b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7d37630"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7d3aa60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7d38920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7d384a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7d36020"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7d37ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7d38020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7d3bc10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7d37020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7d3a110"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7d3a5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f19c7d32c30" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f19c7d32c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7d2d110"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7d306a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7d2f4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7d2f020"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7d2da10"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7d2d590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7d30b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7d31860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7d2fab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7d31d30"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7d30220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f19c7d28500" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f19c7d28500"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c7d2b170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c7d36e50" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c7d36e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c7d32210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f19c7c34870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c7c34870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7c30090"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7c31090"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c7c31a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7c31550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c7c30550"/>
        <function-ref name="start" scoped="" ref="0x7f19c7c326a0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7c32bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c7c34020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c7c34020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c7c343a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f19c7497910" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c7497910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c74931b0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c74951b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c7495b30"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7495670"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c7493670"/>
        <function-ref name="start" scoped="" ref="0x7f19c7496780"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7496c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c74970c0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c74970c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c7497440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f19c747fda0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c747fda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c747e180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c747e310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c747e4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c747e630"/>
        <function-ref name="fired" scoped="" ref="0x7f19c747e7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f19c7481450" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7481450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c74817d0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c7481960"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c7481af0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7481c80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c7481e10"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7480020"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c74801b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7480340"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c74804d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c7480660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c74807f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f19c7480a80" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7480a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c7480e00"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c747f020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c747f1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c747f340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c747f4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c747f660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c747f7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c747f980"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c747fb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f19c7d063f0" loc="52:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7d063f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c7d06770"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c7d06900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c7d06a90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c7d06c20"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7d06db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f19c7d0dcd0" loc="50:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7d0dcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c7d0a0a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c7d0a230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c7d0a3c0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7d0a550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c7d0a6e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7d0a870"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c7d0aa00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7d0ab90"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c7d0ad20"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c7d09020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c7d091b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f19c7d09a40" loc="51:../../../tos/platforms/shimmer2r/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7d09a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c7d09dc0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c7d07020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c7d071b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c7d07340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c7d074d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c7d07660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c7d077f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c7d07980"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c7d07b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f19c7475a80" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c7475a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c7475e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c7473020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c74731b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c7473340"/>
        <function-ref name="fired" scoped="" ref="0x7f19c74734d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f19c7477190" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7477190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c7477510"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c74776a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c7477830"/>
        <function-ref name="get" scoped="" ref="0x7f19c74779c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c7477b50"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7477ce0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c7477e70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7476030"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c74761c0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c7476350"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c74764e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f19c747a020" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c747a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7478870"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7479840"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c7478220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7479d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c7478d30"/>
        <function-ref name="start" scoped="" ref="0x7f19c747ae30"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7479380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c747c660" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c747c660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c747c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f19c7476770" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c7476770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c7476af0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c7476c80"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c7476e10"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c7475020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c74751b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c7475340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c74754d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c7475660"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c74757f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f19c7cacb50" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f19c7cacb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c7cb19b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7cb0360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7cb1e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c7cb0820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f19c7caab70" loc="43:../../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f19c7caab70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c7ca79b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7ca6360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7ca7e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c7ca6820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f19c7c95c50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c7c95c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c7c94020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c7c941b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c7c94340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7c944d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c7c94660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7c947f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c7c94980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7c94b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c7c94ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c7c94e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c7c93020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f19c7ca4b80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f19c7ca4b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c7c969b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7c95360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7c96e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c7c95820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f19c7c720f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f19c7c720f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c7c70020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7c709a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7c704e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c7c70e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f19c7c90cf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f19c7c90cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c7c74b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7c73550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7c73090"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c7c73a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f19c7491b10" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c7491b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c748e390"/>
        <function-ref name="fired" scoped="" ref="0x7f19c748f360"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c748fce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c748f820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c748e850"/>
        <function-ref name="start" scoped="" ref="0x7f19c7490970"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7490e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f19c748a3a0" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f19c748a3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7488be0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7489bc0"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c7488590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c74880d0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c74870d0"/>
        <function-ref name="start" scoped="" ref="0x7f19c74891f0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7489700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f19c748d020" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f19c748d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c748de30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c748b800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c748b340"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c748bcc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f19c7bfe9c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f19c7bfe9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c7bfed40"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c7bfd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f19c7c02850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c7c02850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7bfe090"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7c00090"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c7c00a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7c00550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c7bfe550"/>
        <function-ref name="start" scoped="" ref="0x7f19c7c016a0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7c01bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f19c7c072f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c7c072f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7c03870"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7c06e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7c05c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7c05780"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7c021e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7c03cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7c05300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7c06020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7c03260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7c064f0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7c069c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f19c7bada00" loc="71:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f19c7bada00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c7badd80"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c7bac020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f19c7bb2640" loc="49:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f19c7bb2640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7baec40"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7bb01e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7bae020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7bb0ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7bad590"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7bad110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7bb0660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7bb1390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7bae630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7bb1860"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7bb1d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f19c7bb8150" loc="48:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c7bb8150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7bb4700"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7bb7c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7bb5a50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7bb55b0"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7bb2090"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7bb4ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7bb5110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7bb8d60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7bb40d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7bb72a0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7bb7790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f19c7baa790" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f19c7baa790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c7ba93f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f19c7ba9a60" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f19c7ba9a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c7b9e890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c7b9d260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c7b9ed50"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c7b9d720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f19c7b91d10" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c7b91d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7b8d220"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7b8f7c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7b8e590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7b8e110"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7b8db20"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7b8d6a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7b8fc40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7b90940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7b8eba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7b90e10"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7b8f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f19c7b8a750" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f19c7b8a750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7b87c40"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7b881e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f19c7b87020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f19c7b88ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f19c7b85590"/>
        <function-ref name="gett0" scoped="" ref="0x7f19c7b85110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7b88660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f19c7b89390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f19c7b87630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f19c7b89860"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7b89d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f19c78213c0" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f19c78213c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7820020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f19c7820630" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f19c7820630"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c781e3d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c783fac0" loc="49:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c783fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c783e790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c7843d90" loc="48:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c7843d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c7840830"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c78429a0"/>
        <function-ref name="read" scoped="" ref="0x7f19c7840360"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c783f360"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Adc12SingleChannel" ref="0x7f19c7b4e720" loc="23:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7b4e720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c7b4eaa0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c7b4ec30"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c7b4edc0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c7b4d020"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c7b4d1b0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c7b4d340"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c7b4d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c7b4f020" loc="22:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7b4f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7b4fc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c7b549f0" loc="20:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c7b549f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c7b524f0"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c7b53670"/>
        <function-ref name="read" scoped="" ref="0x7f19c7b52020"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7b51020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f19c7b4dce0" loc="24:../../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c7b4dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7b4c0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7b4c230"/>
        <function-ref name="request" scoped="" ref="0x7f19c7b4c3c0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7b4c550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7b4c6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="bufferDone" ref="0x7f19c7b15020" loc="156:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="bufferDone" scoped="" ref="0x7f19c7b15020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c7b153a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c7b15530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamDone" ref="0x7f19c7b24600" loc="119:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamDone" scoped="" ref="0x7f19c7b24600"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c7b24980"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c7b24b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamFail" ref="0x7f19c7b1ed50" loc="135:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamFail" scoped="" ref="0x7f19c7b1ed50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f19c7b1d100"/>
        <function-ref name="runTask" scoped="" ref="0x7f19c7b1d290"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f19c7b40900" loc="54:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c7b40900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7b3c1b0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7b3d1b0"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c7b3db30"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7b3d670"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c7b3c670"/>
        <function-ref name="start" scoped="" ref="0x7f19c7b3e780"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7b3ec90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c7b48bc0" loc="48:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c7b48bc0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x7f19c8ac7800"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x7f19c8ac7800"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c7b47020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c7b41580" loc="53:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7b41580"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7b401f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x7f19c7b44d50" loc="52:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7f19c7b44d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c7b42100"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c7b42290"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c7b42420"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c7b425b0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c7b42740"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c7b428d0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c7b42a60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c7b479c0" loc="49:../../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c7b479c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c7b454f0"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c7b465f0"/>
        <function-ref name="read" scoped="" ref="0x7f19c7b45020"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7b44020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f19c7ad94f0" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c7ad94f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c7ad7db0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c7ad8da0"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c7ad7760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c7ad72a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c7ad62a0"/>
        <function-ref name="start" scoped="" ref="0x7f19c7ad83d0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c7ad88e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c7adab10" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c7adab10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c7ad9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f19c73dd020" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c73dd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c73da870"/>
        <function-ref name="fired" scoped="" ref="0x7f19c73db840"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c73da220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c73dbd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c73dad30"/>
        <function-ref name="start" scoped="" ref="0x7f19c73dde30"/>
        <function-ref name="stop" scoped="" ref="0x7f19c73db380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c73de7b0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c73de7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c73deb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f19c73c4760" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c73c4760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c73c4ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c73c4c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c73c4e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c73c3020"/>
        <function-ref name="fired" scoped="" ref="0x7f19c73c31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f19c73c8d20" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c73c8d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c73c60e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c73c6270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c73c6400"/>
        <function-ref name="get" scoped="" ref="0x7f19c73c6590"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c73c6720"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c73c68b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c73c6a40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c73c6bd0"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c73c6d60"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c73c5020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c73c51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f19c73c5440" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c73c5440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c73c57c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c73c5950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c73c5ae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c73c5c70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c73c5e00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c73c4020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c73c41b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c73c4340"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c73c44d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f19c73ba440" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f19c73ba440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f19c73ba7c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f19c73ba950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f19c73baae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f19c73bac70"/>
        <function-ref name="fired" scoped="" ref="0x7f19c73bae00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f19c73bd9c0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f19c73bd9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f19c73bdd40"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f19c73bc020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c73bc1b0"/>
        <function-ref name="get" scoped="" ref="0x7f19c73bc340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c73bc4d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c73bc660"/>
        <function-ref name="getMode" scoped="" ref="0x7f19c73bc7f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c73bc980"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c73bcb10"/>
        <function-ref name="setMode" scoped="" ref="0x7f19c73bcca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f19c73bce30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f19c73c18b0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c73c18b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c73bd0d0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c73bf0d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c73bfa50"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c73bf590"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c73bd590"/>
        <function-ref name="start" scoped="" ref="0x7f19c73c06e0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c73c0bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c73c1020" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c73c1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c73c13a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f19c73bb120" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f19c73bb120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f19c73bb4a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f19c73bb630"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f19c73bb7c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f19c73bb950"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f19c73bbae0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f19c73bbc70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f19c73bbe00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f19c73ba020"/>
        <function-ref name="setControl" scoped="" ref="0x7f19c73ba1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f19c73d71d0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f19c73d71d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c73d4b30"/>
        <function-ref name="fired" scoped="" ref="0x7f19c73d69f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c73d44e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c73d4020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c73d3020"/>
        <function-ref name="start" scoped="" ref="0x7f19c73d6020"/>
        <function-ref name="stop" scoped="" ref="0x7f19c73d6530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f19c73d1b90" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f19c73d1b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de2c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f19c7de1020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f19c73cd4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f19c73cf4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f19c73cfe60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f19c73cf9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f19c73cd9a0"/>
        <function-ref name="start" scoped="" ref="0x7f19c73d09d0"/>
        <function-ref name="stop" scoped="" ref="0x7f19c73cf020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f19c73d3690" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f19c73d3690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c7de24d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f19c7de2840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f19c73d25b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f19c73d1020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f19c73d2a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f19c73d14e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x7f19c7aa6bf0" loc="26:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Service" scoped="" ref="0x7f19c7aa6bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c7aa3710"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c7aa5860"/>
        <function-ref name="read" scoped="" ref="0x7f19c7aa3220"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7aa2220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c7ad2cb0" loc="24:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c7ad2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c7aa8850"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c7aa9940"/>
        <function-ref name="read" scoped="" ref="0x7f19c7aa8360"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7aa6360"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f19c7aa28f0" loc="27:../../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c7aa28f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7aa2c90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7aa2e20"/>
        <function-ref name="request" scoped="" ref="0x7f19c7aa1020"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7aa11b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7aa1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f19c73eb590" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c73eb590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c73eb910"/>
        <function-ref name="configure" scoped="" ref="0x7f19c73ebaa0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c73ebc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f19c73ec5a0" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c73ec5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c73ec920"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c73ecab0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c73ecc40"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c73ecdd0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c73eb020"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c73eb1b0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c73eb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f19c73ebe80" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c73ebe80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c73ea220"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c73ea3b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c73ea7e0" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c73ea7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c73e9440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c73ed960" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c73ed960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c73edce0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c73ede70"/>
        <function-ref name="request" scoped="" ref="0x7f19c73ec030"/>
        <function-ref name="granted" scoped="" ref="0x7f19c73ec1c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c73ec350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f19c73790a0" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f19c73790a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7379cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f19c7377300" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f19c7377300"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7376020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7f19c7a8ba10" loc="35:../../../tos/chips/msp430/sensors/Msp430InternalVoltageP.nc">
      <component-ref qname="Msp430InternalVoltageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7a8ba10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7a886b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f19c783b200" loc="50:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f19c783b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c783be30"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7839340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c7839aa0" loc="52:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7839aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c78386f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c783c470" loc="49:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c783c470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c783c7f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c783c980"/>
        <function-ref name="request" scoped="" ref="0x7f19c783cb10"/>
        <function-ref name="granted" scoped="" ref="0x7f19c783cca0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c783ce30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f19c736b270" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c736b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c736b5f0"/>
        <function-ref name="configure" scoped="" ref="0x7f19c736b780"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c736b910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f19c736c270" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c736c270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c736c5f0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c736c780"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c736c910"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c736caa0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c736cc30"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c736cdc0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c736b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f19c736bb60" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c736bb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c736a020"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c736a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c736a5e0" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c736a5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7369240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c736d550" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c736d550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c736d8d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c736da60"/>
        <function-ref name="request" scoped="" ref="0x7f19c736dbf0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c736dd80"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c736c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f19c735cc60" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f19c735cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c735b8e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f19c7359020" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.Sensor.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f19c7359020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7359c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f19c7a50140" loc="53:../../../tos/platforms/shimmer/DemoSensorNowC.nc">
      <component-ref qname="TestAdcAppC.SensorNow"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f19c7a50140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c7a50d70"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7a4f260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c7a5e340" loc="52:../../../tos/platforms/shimmer/DemoSensorNowC.nc">
      <component-ref qname="TestAdcAppC.SensorNow"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c7a5e340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7a5e6c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7a5e850"/>
        <function-ref name="request" scoped="" ref="0x7f19c7a5e9e0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7a5eb70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7a5ed00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f19c7350140" loc="44:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c7350140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c7350d30"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c734f1e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f19c734a1e0" loc="48:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f19c734a1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c734ae10"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7349340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c734f8c0" loc="45:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c734f8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c734c350"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c734d4e0"/>
        <function-ref name="read" scoped="" ref="0x7f19c734de50"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c734ce00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c734b420" loc="47:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c734b420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c734b7a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c734b930"/>
        <function-ref name="request" scoped="" ref="0x7f19c734bac0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c734bc50"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c734bde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f19c73442d0" loc="48:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c73442d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c7343020"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c73434a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c7343c00" loc="49:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7343c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c73428a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f19c732fbd0" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c732fbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c732e020"/>
        <function-ref name="configure" scoped="" ref="0x7f19c732e1b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c732e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f19c7330c30" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7330c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c732f020"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c732f1b0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c732f340"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c732f4d0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c732f660"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c732f7f0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c732f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f19c732e590" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c732e590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c732e910"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c732eaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c732d020" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c732d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c732dc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c7330020" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c7330020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c73303a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7330530"/>
        <function-ref name="request" scoped="" ref="0x7f19c73306c0"/>
        <function-ref name="granted" scoped="" ref="0x7f19c7330850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c73309e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f19c73203c0" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f19c73203c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c731f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f19c731f630" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f19c731f630"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c731d3d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c733ddf0" loc="49:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c733ddf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c733cac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c73400b0" loc="48:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c73400b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c733eb60"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c7340ca0"/>
        <function-ref name="read" scoped="" ref="0x7f19c733e690"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c733d690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f19c7312590" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c7312590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c7312910"/>
        <function-ref name="configure" scoped="" ref="0x7f19c7312aa0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c7312c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f19c7313590" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c7313590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c7313910"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c7313aa0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c7313c30"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c7313dc0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c7312020"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c73121b0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c7312340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f19c7312e80" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c7312e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c7311220"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c73113b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c73117e0" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c73117e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7310440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c7315900" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c7315900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7315c80"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7315e10"/>
        <function-ref name="request" scoped="" ref="0x7f19c7313020"/>
        <function-ref name="granted" scoped="" ref="0x7f19c73131b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7313340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f19c7303390" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f19c7303390"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7302020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f19c7302630" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f19c7302630"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c73013d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f19c73386b0" loc="50:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f19c73386b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c73373d0"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7337890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c7336020" loc="52:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7336020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7336c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c73398a0" loc="49:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c73398a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7339c20"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c7339db0"/>
        <function-ref name="request" scoped="" ref="0x7f19c7338020"/>
        <function-ref name="granted" scoped="" ref="0x7f19c73381b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7338340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f19c72f6590" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c72f6590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c72f6910"/>
        <function-ref name="configure" scoped="" ref="0x7f19c72f6aa0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c72f6c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f19c72f7590" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c72f7590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c72f7910"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c72f7aa0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c72f7c30"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c72f7dc0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c72f6020"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c72f61b0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c72f6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f19c72f6e80" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c72f6e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c72f5220"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c72f53b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c72f57e0" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72f57e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72f3440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c72f88a0" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c72f88a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c72f8c20"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c72f8db0"/>
        <function-ref name="request" scoped="" ref="0x7f19c72f7020"/>
        <function-ref name="granted" scoped="" ref="0x7f19c72f71b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c72f7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f19c72e6020" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f19c72e6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72e6c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f19c72e42a0" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorNow.DemoSensorNow.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f19c72e42a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72e3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c7a4c060" loc="51:../../../tos/platforms/shimmer/DemoSensorStreamC.nc">
      <component-ref qname="TestAdcAppC.SensorStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c7a4c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c7a33ab0"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c7a4cc50"/>
        <function-ref name="read" scoped="" ref="0x7f19c7a335e0"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c7a325a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c72da4c0" loc="44:../../../tos/platforms/shimmer/VoltageStreamC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c72da4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c72d8020"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c72d90d0"/>
        <function-ref name="read" scoped="" ref="0x7f19c72d9a40"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c72d8ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f19c72d6d80" loc="44:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c72d6d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c72d49a0"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c72d4e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f19c72cfe30" loc="48:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f19c72cfe30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c72ceac0"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c72cd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c72d3540" loc="45:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c72d3540"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c72d1020"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c72d2170"/>
        <function-ref name="read" scoped="" ref="0x7f19c72d2ae0"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c72d1ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c72cf0c0" loc="47:../../../tos/chips/msp430/sensors/Msp430InternalVoltageC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c72cf0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c72cf440"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c72cf5d0"/>
        <function-ref name="request" scoped="" ref="0x7f19c72cf760"/>
        <function-ref name="granted" scoped="" ref="0x7f19c72cf8f0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c72cfa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x7f19c72ca980" loc="48:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x7f19c72ca980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c72c95a0"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c72c9a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c72c81c0" loc="49:../../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72c81c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72c8df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f19c72b3060" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c72b3060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c72b33e0"/>
        <function-ref name="configure" scoped="" ref="0x7f19c72b3570"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c72b3700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f19c72b50e0" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c72b50e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c72b5460"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c72b55f0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c72b5780"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c72b5910"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c72b5aa0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c72b5c30"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c72b5dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f19c72b3950" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c72b3950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c72b3cd0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c72b3e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c72b22c0" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72b22c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72b1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c72b6470" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c72b6470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c72b67f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c72b6980"/>
        <function-ref name="request" scoped="" ref="0x7f19c72b6b10"/>
        <function-ref name="granted" scoped="" ref="0x7f19c72b6ca0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c72b6e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f19c72a5710" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f19c72a5710"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72a43d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f19c72a49e0" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f19c72a49e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72a36b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c72c1260" loc="49:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72c1260"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72c0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x7f19c72c54f0" loc="48:../../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x7f19c72c54f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x7f19c72c3020"/>
        <function-ref name="postBuffer" scoped="" ref="0x7f19c72c4110"/>
        <function-ref name="read" scoped="" ref="0x7f19c72c4a80"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c72c3ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f19c72988b0" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c72988b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c7298c30"/>
        <function-ref name="configure" scoped="" ref="0x7f19c7298dc0"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c7297020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f19c72998b0" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c72998b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c7299c30"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c7299dc0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c7298020"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c72981b0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c7298340"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c72984d0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c7298660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f19c7297270" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c7297270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c72975f0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c7297780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c7297bb0" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7297bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7295820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c729ab90" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c729ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c7299020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c72991b0"/>
        <function-ref name="request" scoped="" ref="0x7f19c7299340"/>
        <function-ref name="granted" scoped="" ref="0x7f19c72994d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c7299660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f19c7289ba0" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f19c7289ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72887f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f19c7288e00" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f19c7288e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7286ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x7f19c72be9d0" loc="50:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x7f19c72be9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f19c72bd630"/>
        <function-ref name="readDone" scoped="" ref="0x7f19c72bdaf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c72bc280" loc="52:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c72bc280"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72ba020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c72bfc60" loc="49:../../../tos/chips/msp430/adc12/AdcReadNowClientC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c72bfc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c72be020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c72be1b0"/>
        <function-ref name="request" scoped="" ref="0x7f19c72be340"/>
        <function-ref name="granted" scoped="" ref="0x7f19c72be4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c72be660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7f19c727bd30" loc="48:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7f19c727bd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c727a0e0"/>
        <function-ref name="configure" scoped="" ref="0x7f19c727a270"/>
        <function-ref name="dataReady" scoped="" ref="0x7f19c727a400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7f19c727cd70" loc="47:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7f19c727cd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7f19c727b180"/>
        <function-ref name="configureSingle" scoped="" ref="0x7f19c727b310"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7f19c727b4a0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7f19c727b630"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7f19c727b7c0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7f19c727b950"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7f19c727bae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7f19c727a650" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7f19c727a650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7f19c727a9d0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7f19c727ab60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7f19c7279020" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7f19c7279020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c7279c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f19c727c160" loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f19c727c160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f19c727c4e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f19c727c670"/>
        <function-ref name="request" scoped="" ref="0x7f19c727c800"/>
        <function-ref name="granted" scoped="" ref="0x7f19c727c990"/>
        <function-ref name="isOwner" scoped="" ref="0x7f19c727cb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7f19c726b670" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7f19c726b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c726a3d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7f19c726a9e0" loc="45:../../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="TestAdcAppC.SensorStream.DemoSensor.Msp430InternalVoltageC.AdcReadNowClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7f19c726a9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7f19c72686b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f19c7a31890" loc="47:../../../tos/platforms/shimmer2r/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f19c7a31890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f19c7a31c10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f19c7a31da0"/>
        <function-ref name="led1On" scoped="" ref="0x7f19c7a2e020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f19c7a2e1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f19c7a2e340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7a2e4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f19c7a2e660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f19c7a2eca0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7a2e7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f19c7a2e980"/>
        <function-ref name="led2On" scoped="" ref="0x7f19c7a2eb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f19c7a215a0" loc="51:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f19c7a215a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7a21920"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7a21ab0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7a21c40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7a21dd0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7a27020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7a271b0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7a27340"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7a274d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f19c7a2dc40" loc="47:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c7a2dc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c7a2a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f19c7a277f0" loc="52:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f19c7a277f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7a27b70"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7a27d00"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7a26020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7a261b0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7a26340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7a264d0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7a26660"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7a267f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f19c7a2a2a0" loc="48:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f19c7a2a2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f19c7a2a620"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f19c7a2a7b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f19c7a2a940"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f19c7a2aad0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f19c7a2ac60"/>
        <function-ref name="get" scoped="" ref="0x7f19c7a2adf0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f19c7a29020"/>
        <function-ref name="led2Off" scoped="" ref="0x7f19c7a29660"/>
        <function-ref name="set" scoped="" ref="0x7f19c7a291b0"/>
        <function-ref name="led0On" scoped="" ref="0x7f19c7a29340"/>
        <function-ref name="led2On" scoped="" ref="0x7f19c7a294d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f19c7a26b10" loc="53:../../../tos/platforms/shimmer2r/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f19c7a26b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7a20020"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7a201b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7a20340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7a204d0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7a20660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7a207f0"/>
        <function-ref name="set" scoped="" ref="0x7f19c7a20980"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7a20b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f19c7a04380" loc="42:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f19c7a04380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7a04700"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7a04890"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7a04a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7a04bb0"/>
        <function-ref name="get" scoped="" ref="0x7f19c7a04d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7a03020"/>
        <function-ref name="set" scoped="" ref="0x7f19c7a031b0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7a03340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f19c7a036a0" loc="43:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f19c7a036a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7a03a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7a03bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7a03d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7a02020"/>
        <function-ref name="get" scoped="" ref="0x7f19c7a021b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7a02340"/>
        <function-ref name="set" scoped="" ref="0x7f19c7a024d0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7a02660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f19c7a01c40" loc="45:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f19c7a01c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f19c7a00020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f19c7a029c0" loc="44:../../../tos/platforms/shimmer2r/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f19c7a029c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c7a02d40"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c7a01020"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c7a011b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c7a01340"/>
        <function-ref name="get" scoped="" ref="0x7f19c7a014d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c7a01660"/>
        <function-ref name="set" scoped="" ref="0x7f19c7a017f0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c7a01980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f19c79ed930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f19c79ed930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c79edcb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c79ede40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c79ec020"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c79ec1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c79ec340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c79ec4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c79ec660"/>
        <function-ref name="get" scoped="" ref="0x7f19c79ec7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c79ec980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c79ecb10"/>
        <function-ref name="set" scoped="" ref="0x7f19c79ecca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c79ece30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c79eb020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c79eb2b0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c79eb440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f19c79fe710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f19c79fe710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c79fea90"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c79fec20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c79fedb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c79ed020"/>
        <function-ref name="get" scoped="" ref="0x7f19c79ed1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c79ed340"/>
        <function-ref name="set" scoped="" ref="0x7f19c79ed4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c79ed660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f19c79e8480" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f19c79e8480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c79e8800"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c79e8990"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c79e8b20"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c79e8cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c79e8e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c79e6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c79e61b0"/>
        <function-ref name="get" scoped="" ref="0x7f19c79e6340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c79e64d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c79e6660"/>
        <function-ref name="set" scoped="" ref="0x7f19c79e67f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c79e6980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c79e6b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c79e6da0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c79e5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f19c79e91d0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f19c79e91d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c79e9550"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c79e96e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c79e9870"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c79e9a00"/>
        <function-ref name="get" scoped="" ref="0x7f19c79e9b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c79e9d20"/>
        <function-ref name="set" scoped="" ref="0x7f19c79e8020"/>
        <function-ref name="clr" scoped="" ref="0x7f19c79e81b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f19c79e2020" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f19c79e2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c79e23a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c79e2530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f19c79e26c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c79e2850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c79e29e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f19c79e2b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c79e2d00"/>
        <function-ref name="get" scoped="" ref="0x7f19c79e1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f19c79e11b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f19c79e1340"/>
        <function-ref name="set" scoped="" ref="0x7f19c79e14d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f19c79e1660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f19c79e17f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f19c79e1a80"/>
        <function-ref name="clr" scoped="" ref="0x7f19c79e1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f19c79e4d70" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f19c79e4d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f19c79e3180"/>
        <function-ref name="isInput" scoped="" ref="0x7f19c79e3310"/>
        <function-ref name="toggle" scoped="" ref="0x7f19c79e34a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f19c79e3630"/>
        <function-ref name="get" scoped="" ref="0x7f19c79e37c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f19c79e3950"/>
        <function-ref name="set" scoped="" ref="0x7f19c79e3ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f19c79e3c70"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f19c8466a40" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f19c8464690" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f19c84260e0" loc="48:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f19c8429350" loc="43:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f19c8428990" loc="47:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f19c842abf0" loc="42:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f19c8429ac0" loc="45:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f19c842ddf0" loc="40:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f19c842a510" loc="41:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f19c8428270" loc="46:../../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f19c8744020" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f19c8a053a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f19c83d5020" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f19c83d6cc0" loc="55:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f19c83d9390" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f19c841fb60"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f19c841e650"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f19c83d5890" loc="57:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f19c83d37b0" loc="59:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f19c83d6560" loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f19c83d3020" loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f19c83d9b30" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f19c83d7350" loc="44:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f19c83d7da0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f19c841fb60"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f19c841e650"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f19c83d7b20" loc="46:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f19c841fb60"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f19c841e650"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f19c83c70e0" loc="44:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f19c83c5730" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f19c83c54b0" loc="84:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f19c83c32e0" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f19c83c3060" loc="91:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f19c83c6ca0" loc="73:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f19c83c63e0" loc="68:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f19c83c7a90" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f19c83c7810" loc="56:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f19c83ce3e0" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f19c83ced60" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f19c83ceae0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f19c83cd790" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f19c83cd510" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f19c83cc2a0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f19c83cc020" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f19c83cc990" loc="45:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f19c83de960" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f19c83dc2a0" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f19c83dc020" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f19c83dd0e0" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f19c83e4b50" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f19c83dd820" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f19c83e1a90" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f19c83de270" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f19c83e1350" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f19c83e01f0" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f19c83e0b00" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f19c83e0880" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f19c83dccb0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f19c83dca30" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f19c839e1f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f19c84967f0" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f19c8493020" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f19c8496020" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f19c891e810" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f19c8ac4020" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f19c8ac3020" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f19c8ac4790" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f19c8ab8270" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f19c8ab8ac0" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f19c8467c70" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c8467c70"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f19c828a560" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f19c82882f0" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c8467c70"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f19c828ace0" loc="63:../../../tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f19c8288060" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c8467c70"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:../../../tos/interfaces/ReadNow.nc">
      <documentation loc="33:../../../tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f19c828b680" loc="52:../../../tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c828b680"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f19c8285020" loc="58:../../../tos/interfaces/ReadNow.nc">
        <documentation loc="53:../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f19c8285d90" loc="66:../../../tos/interfaces/ReadNow.nc">
        <documentation loc="60:../../../tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c828b680"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f19c82857e0" loc="66:../../../tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f19c8285b00" loc="66:../../../tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c828b680"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f19c827f120" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f19c8280120" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f19c8281770" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f19c8280910" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f19c827fb80" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="52:../../../tos/platforms/shimmer2r/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f19c826e5b0" loc="62:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="59:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f19c826ed60" loc="68:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="64:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f19c826d5a0" loc="73:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="70:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f19c826c510" loc="84:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="80:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f19c826ac60" loc="101:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="97:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f19c82694d0" loc="117:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="103:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f19c826dd30" loc="78:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="75:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f19c82680b0" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="120:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f19c8269dc0" loc="134:../../../tos/platforms/shimmer2r/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f19c826fdf0" loc="57:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="54:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f19c826ccf0" loc="90:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="87:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f19c826a4b0" loc="95:../../../tos/platforms/shimmer2r/Leds.nc">
        <documentation loc="92:../../../tos/platforms/shimmer2r/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadStream" loc="57:../../../tos/interfaces/ReadStream.nc">
      <documentation loc="33:../../../tos/interfaces/ReadStream.nc">
        <short>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices.</short>
        <long>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices. The type of the values being&#10; read is given as a template argument. &#10;&#10; &#60;p> To use this interface, allocate one or more buffers in your own&#10; space. Then, call postBuffer to pass these buffers into the&#10; device. Call read() to begin the sampling process. The buffers will&#10; be filled in the order originally posted, and a bufferDone() event&#10; will be signaled once each buffer has been filled with data. At any&#10; time while the read() is running, you may post new buffers to be&#10; filled. If the lower layer finishes signaling readDone() and then&#10; finds that no more buffers have been posted, it will consider the&#10; read to be finished, and signal readDone(). &#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f19c827c5e0" loc="57:../../../tos/interfaces/ReadStream.nc">
          <interfacedef-ref qname="ReadStream"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c827c5e0"/></type-var>
        </typedef>
      </parameters>
      <function event="" provided="0" name="bufferDone" ref="0x7f19c827aa50" loc="89:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="80:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a previously posted buffer has been filled by the&#10; device.</short>
          <long>&#10; Signalled when a previously posted buffer has been filled by the&#10; device. In the event of a read error, result will not equal&#10; SUCCESS, and the buffer will be filled with zeroes.&#10;&#10; @param result SUCCESS if the buffer was filled without errors&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer that has been filled&#10; @param count the number of values actually read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c827c5e0"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f19c827a0d0" loc="89:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f19c827a450" loc="90:../../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c827c5e0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x7f19c827a7b0" loc="90:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="postBuffer" ref="0x7f19c827b610" loc="68:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="58:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer.</short>
          <long>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer. Make sure your count doesn't&#10; overrun the buffer.&#10;&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer&#10; @param count the number of values the buffer should hold&#10;&#10; @return SUCCESS if the post was successful&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c827c5e0"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f19c827b020" loc="68:../../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f19c827c5e0"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x7f19c827b380" loc="68:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x7f19c8279880" loc="78:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="70:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period.</short>
          <long>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period. &#10; &#10; @param usPeriod the between-sample period in microseconds&#10; &#10; @return SUCCESS if the reading process began&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="usPeriod" ref="0x7f19c8279600" loc="78:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f19c82770c0" loc="102:../../../tos/interfaces/ReadStream.nc">
        <documentation loc="92:../../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted.</short>
          <long>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted. In the event of a read error, all previously posted&#10; buffers will have their bufferDone() event signalled, and then&#10; this event will be signalled with a non-SUCCESS argument.&#10;&#10; @param result SUCCESS if all buffers were filled without errors&#10; @param usActualPeriod Actual sampling period used - may be different&#10;   from period requested at read time. Undefined if result != SUCCESS.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f19c8276a10" loc="102:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
          </variable>
          <variable name="usActualPeriod" ref="0x7f19c8276dc0" loc="102:../../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AdcConfigure" loc="45:../../../tos/interfaces/AdcConfigure.nc">
      <documentation loc="36:../../../tos/interfaces/AdcConfigure.nc">
        <short> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration.</short>
        <long> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration. &#10; &#10; @author Jan Hauer &#10; @see  Please refer to TEP 101 for more information about this interface and&#10; its intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="adc_config_t" ref="0x7f19c8228770" loc="45:../../../tos/interfaces/AdcConfigure.nc">
          <interfacedef-ref qname="AdcConfigure"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7f19c8228770"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getConfiguration" ref="0x7f19c8225190" loc="58:../../../tos/interfaces/AdcConfigure.nc">
        <documentation loc="48:../../../tos/interfaces/AdcConfigure.nc">
          <short> &#10; Returns the configuration of an ADC client.</short>
          <long> &#10; Returns the configuration of an ADC client.  &#60;code>adc_config_t&#60;/code> is&#10; a hardware specific data type that contains all information necessary to&#10; configure the respective ADC hardware for the client. A client MUST always&#10; return the same configuration and, if configuration data is passed as a&#10; pointer, the ADC subsystem (HIL component) MUST NOT reference it after the&#10; return of this command.&#10;  &#10; @return chip specific configuration.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AdcConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7f19c8228770"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12SingleChannel" loc="69:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <short> &#10; &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample a single adc channel once or repeatedly (one event is&#10; signalled per conversion result) or perform multiple conversions for a&#10; single channel once or repeatedly (one event is signalled per multiple&#10; conversion results). It cannot be used to sample different adc channels with&#10; a single command (use the Msp430Adc12MultiChannel interface instead).&#10; Sampling a channel requires calling a sequence of two commands, configureX()&#10; and getData(), where X is either 'Single', 'SingleRepeat', 'Multiple' or&#10; 'MultipleRepeat'. Conversion results will be signalled by the&#10; dataReadySingle() or dataReadyMultiple() event, depending on the previous&#10; configuration, i.e. there are four possible sequences:&#10; &#10; &#60;p> configureSingle()          -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureSingleRepeat()    -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureMultiple()        -> ( getData() -> multipleDataReady() )*&#10; &#60;p> configureMultipleRepeat()  -> getData() -> multipleDataReady()&#10;&#10; &#60;p> where configureX() and getData() are commands called by the client and&#10; singleDataReady() and multipleDataReady() are events signalled back to the&#10; client by the adc subsystem. Note that a configuration is valid until the&#10; client reconfigures or releases the ADC (using the Resource interface),&#10; except for configureMultipleRepeat(), which is only valid for a single call&#10; to getData(). This means that after a successful configuration with, for&#10; example, configureSingle() the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface).&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7f19c820a4b0" loc="189:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="180:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.</short>
          <long> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event singleDataReady() or multipleDataReady() will be signalled&#10; (depending on the previous configuration). Otherwise no such event will be&#10; signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingle" ref="0x7f19c8213450" loc="84:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="72:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC to perform a single conversion.</short>
          <long> &#10; Configures the ADC to perform a single conversion. Any previous&#10; configuration will be overwritten.  If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>singleDataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config ADC12 configuration data.  &#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f19c82131d0" loc="84:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingleRepeat" ref="0x7f19c8212940" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for repeated single channel conversion mode.</short>
          <long> &#10; Configures the ADC for repeated single channel conversion mode. Any&#10; previous configuration will be overwritten. If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start sampling the adc channel periodically&#10; (the first conversion is started immediately).  The sampling period is&#10; specified by the &#60;code>jiffies&#60;/code> parameter, which defines the time&#10; between successive conversions in terms of clock ticks of clock source&#10; &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34; as specified in the&#10; &#60;code>config&#60;/code> parameter. If jiffies is zero successive conversions&#10; are performed as quickly as possible.  Conversion result are signalled&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>singleDataReady()&#60;/code> event handler.&#10; &#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34; and&#10; input divider &#34;sampcon_id&#34;.&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f19c8212340" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="jiffies" ref="0x7f19c82126b0" loc="106:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultipleRepeat" ref="0x7f19c820b4c0" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="140:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.</short>
          <long> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.  Any&#10; previous configuration will be overwritten. In contrast to the&#10; &#60;code>configureSingleRepeat()&#60;/code> command this configuration means that&#10; an event with &#60;code>numSamples&#60;/code> conversion results will be&#10; signalled, where 0 &#60; &#60;code>numSamples&#60;/code> &#60;= 16. In contrast to the&#10; &#60;code>configureMultiple()&#60;/code> command, this configuration means that&#10; &#60;code>numSamples&#60;/code> conversion results will be signalled repeatedly&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler. &#10;&#10; If &#60;code>configureMultipleRepeat()&#60;/code> returns SUCCESS calling&#10; &#60;code>getData()&#60;/code> will start the the first conversion immediately.&#10; The sampling period is specified by the &#60;code>jiffies&#60;/code> parameter,&#10; which defines the time between successive conversions in terms of clock&#10; ticks of clock source &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34;&#10; as specified in the &#60;code>config&#60;/code> parameter. If jiffies is zero&#10; successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with &#60;code>numSamples&#60;/code>&#10; conversion results. If the client returns &#60;code>SUCCESS&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler, &#60;code>numSamples&#60;/code>&#10; new conversions will be performed, otherwise not.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples to take, 0 &#60;&#10; &#60;code>numSamples&#60;/code> &#60;= 16&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f19c820d260" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7f19c820db00" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f19c820de80" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f19c820b210" loc="177:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="multipleDataReady" ref="0x7f19c8208dd0" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="208:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Multiple ADC conversion results are ready.</short>
          <long> &#10; Multiple ADC conversion results are ready.  If the ADC was configured&#10; with the &#60;code>configureMultiple()&#60;/code> command, then the return value&#10; is ignored. If the ADC was configured with the&#10; &#60;code>configureMultipleRepeat()&#60;/code> command then the returned pointer&#10; defines where to store the next &#60;code>numSamples&#60;/code>&#10; conversion results (the client must make sure that the buffer is big&#10; enough!).  Returning a null pointer means that the repeated conversion&#10; mode will be stopped.&#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of samples stored in &#60;code>buffer&#60;/code> &#10;&#10; @return&#10; A null pointer stops a repeated conversion mode. Any non-zero value is&#10; interpreted as the next buffer, which must have at least&#10; &#60;code>numSamples&#60;/code> entries. The return value is ignored if the ADC&#10; was configured with &#60;code>configureMultiple()&#60;/code>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7f19c8208730" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f19c8208ac0" loc="227:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultiple" ref="0x7f19c820fd30" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="109:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period.</short>
          <long> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period. Any previous configuration will be&#10; overwritten.  In contrast to the &#60;code>configureSingleRepeat()&#60;/code>&#10; command, this configuration means that only one event will be signalled&#10; after all samples have been taken (which is useful for high-frequency&#10; sampling). If SUCCESS is returned calling &#60;code>getData()&#60;/code> will&#10; start sampling the adc channel &#60;code>numSamples&#60;/code> times and the first&#10; conversion is started immediately. Conversion results are stored in a&#10; buffer allocated by the client (the &#60;code>buffer&#60;/code>&#10; parameter). The sampling period is specified by the &#60;code>jiffies&#60;/code>&#10; parameter, which defines the time between successive conversions in terms&#10; of clock ticks of clock source &#34;sampcon_ssel&#34; and clock input divider&#10; &#34;sampcon_id&#34; as specified in the &#60;code>config&#60;/code> parameter. If jiffies&#10; is zero successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with the conversion results.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f19c8210a30" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7f19c820f380" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f19c820f710" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f19c820fa80" loc="138:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="singleDataReady" ref="0x7f19c8209120" loc="206:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="191:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; A single ADC conversion result is ready.</short>
          <long> &#10; A single ADC conversion result is ready. If the ADC was configured with&#10; the &#60;code>configureSingle()&#60;/code> command, then the return value is&#10; ignored. If the ADC was configured with the&#10; &#60;code>configureSingleRepeat()&#60;/code> command then the return value tells&#10; whether another conversion should be performed (&#60;code>SUCCESS()&#60;/code>) or&#10; not (&#60;code>FAIL&#60;/code>).&#10; &#10; @param data Conversion result (lower 12 bit).  &#10;&#10; @return If this event is signalled as response to a call to&#10; &#60;code>configureSingleRepeat()&#60;/code> then &#60;code>SUCCESS&#60;/code> results in&#10; another sampling and &#60;code>FAIL&#60;/code> stops the repeated sampling.&#10; Otherwise the return value is ignored.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f19c820ae70" loc="206:../../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12MultiChannel" loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <short> &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample up to 16 (different) ADC channels. It separates between&#10; configuration and data collection: every time a client has been granted&#10; access to the ADC subsystem (via the Resource interface), it first has to&#10; configure the ADC.  Afterwards the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface), i.e.&#60;p>&#10; &#10;    configure() -> ( getData() -> dataReady() )*&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7f19c81b8e20" loc="97:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="90:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.</short>
          <long> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event dataReady() will be signalled. Otherwise no event will be signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f19c81b8160" loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Configures the ADC to perform conversion(s) on multiple channels.</short>
          <long> &#10; Configures the ADC to perform conversion(s) on multiple channels.  Any&#10; previous configuration will be overwritten.  If SUCCESS is returned&#10; calling &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>dataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config Main ADC12 configuration and configuration of the first&#10; channel &#10;&#10; @param memctl List of additional channels and respective reference&#10; voltages&#10;&#10; @param numMemctl Number of entries in the list&#10; &#10; @param buffer Buffer to store the conversion results, it must have&#10; numSamples entries. Results will be stored in the order the channels where&#10; specified.&#10;&#10; @param numSamples Total number of samples. Note: numSamples %&#10; (numMemctl+1) must be zero. For example, to sample every channel twice use&#10; numSamples = (numMemctl+1) * 2&#10;&#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;. Samples are taken equally-spaced in&#10; time iterating round-robin over the channels (different channels are  &#10; not sampled simultaneously but one after another).&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f19c8240ed0"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7f19c823e3d0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f19c81bbaf0" loc="86:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7f19c82402d0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7f19c8241970"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="memctl" ref="0x7f19c81ba020" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f19c8240ed0"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7f19c823e3d0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="numMemctl" ref="0x7f19c81ba390" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </variable>
          <variable name="buffer" ref="0x7f19c81ba730" loc="87:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f19c81baae0" loc="88:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7f19c81bae50" loc="88:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7f19c81b7dc0" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="99:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Conversion results are ready.</short>
          <long> &#10; Conversion results are ready. Results are stored in the buffer in the&#10; order the channels where specified in the &#60;code>configure()&#60;/code>&#10; command, i.e. every (numMemctl+1)-th entry maps to the same channel. &#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of results stored in &#60;code>buffer&#60;/code> &#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7f19c81b77a0" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7f19c81b7b30" loc="107:../../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12Overflow" loc="44:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <short> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.</short>
        <long> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function event="" provided="0" name="memOverflow" ref="0x7f19c81b5780" loc="49:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="46:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; An ADC12MEMx overflow condition has occured.</short>
          <long> &#10; An ADC12MEMx overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionTimeOverflow" ref="0x7f19c81b4020" loc="54:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="51:../../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; A conversion time overflow condition has occured.</short>
          <long> &#10; A conversion time overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f19c81abda0" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f19c81a86a0" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../../tos/chips/msp430/adc12/HplAdc12.nc">
      <documentation loc="36:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCtl0" ref="0x7f19c8199840" loc="63:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c822e810"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x7f19c822d2d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x7f19c8197b20" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f19c8240ed0"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x7f19c823e3d0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f19c81978a0" loc="82:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x7f19c8193190" loc="106:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x7f19c8192390" loc="118:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x7f19c8193b90" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x7f19c8193910" loc="112:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x7f19c81980e0" loc="68:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c822c960"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x7f19c822a2d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x7f19c8197020" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f19c8240ed0"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f19c823e3d0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f19c8198850" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x7f19c8198c10" loc="75:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f19c8240ed0"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7f19c823e3d0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7f19c8190420" loc="128:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x7f19c819a520" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c822e810"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f19c822d2d0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x7f19c819a2a0" loc="51:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c822e810"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7f19c822d2d0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x7f19c8195630" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7f19c81953b0" loc="89:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x7f19c8194110" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7f19c8195e30" loc="95:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x7f19c8194980" loc="101:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f19c949e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7f19c8192b50" loc="123:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x7f19c8190bc0" loc="133:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x7f19c8199020" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c822c960"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f19c822a2d0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x7f19c819ad00" loc="57:../../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f19c822c960"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7f19c822a2d0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f19c8184c20" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f19c8183390" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f19c817fc10" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f19c817f990" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f19c81864a0" loc="58:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f19c8182270" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f19c817e520" loc="117:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f19c8183ad0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f19c8184480" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f19c8181940" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f19c8186c40" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f19c81875f0" loc="48:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f19c81829f0" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f19c817f120" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f19c81811f0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f19c8187d20" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f19c819d1f0" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f19c819da50" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f19c949e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f19c8079b20" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f19c80764e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f19c8072550" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f19c8075cf0" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f19c8069540" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f19c80735d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f19c80692c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f19c80735d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f19c806c580" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f19c806a0b0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f19c80735d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f19c806ce00" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f19c80735d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f19c806a9c0" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f19c80735d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f19c7de1dd0" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f19c7de1dd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f19c7ddac10" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f19c7ddd420" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f19c7ddb2b0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f19c7ddcbd0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f19c7ddb020" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f19c7ddc420" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f19c7dd5c60" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f19c7dd53e0" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f19c7dddc00" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f19c7de0970" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f19c7de06f0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f19c7dda2b0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f19c7ddbc50" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f19c7dda020" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f19c7ddf4d0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f19c7ddf250" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f19c7ddfcd0" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f19c7de94e0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f19c7de9260" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f19c7de8ab0" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f19c7de8830" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f19c7dea860" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f19c7de9d30" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f19c8abfc20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f19c7d2c6d0" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f19c7d2c6d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f19c7d28020" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f19c949e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f19c7d23070" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f19c7d23070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f19c7d232b0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7d232b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f19c7d1fe00" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7d232b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f19c7d22e40" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f19c7d1f460" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7d232b0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7d232b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f19c7d21e60" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7d232b0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f19c7d1f1d0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7d232b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f19c7d21640" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f19c7d1e620" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7d232b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f19c7d23e10" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7d232b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f19c7d23b90" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7d232b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f19c7d22680" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f19c7caf100" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f19c7caf100"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f19c7caf340" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7caf340"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f19c7cafc60" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f19c7caf340"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f19c7cadd70" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f19c7cad510" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f19c7cac500" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f19c7a23c40" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f19c7a22390" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f19c7a25de0" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f19c7a21270" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f19c7a23530" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f19c8ac8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f19c7a22ab0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f19c7a25020" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f19c7a256f0" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
